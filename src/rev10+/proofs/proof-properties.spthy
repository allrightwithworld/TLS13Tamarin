theory TLS_13_properties begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: HKDF/1, HKDFExpand/1, HKDFExpand1/1, HKDFExpand2/1,
           fst/1, h/1, hmac/1, mac/1, pair/2, pk/1, sdec/2, senc/2, sign/2,
           snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

/*
looping facts with injective instances:
  F_St_C_1_init/8, F_St_C_1_init_KC/10
*/

section{* TLS 1.3 *}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  --[ GenLtk( $A, ~ltkA ) ]->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenServerDH:
   [ Fr( ~y ) ]
  --[ GenServerDH( $S, ~y ), DH( $S, ~y ) ]->
   [ StoreServerDH( $S, ~y ), DHExp( $S, ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) UseStaticDH:
   [ StoreServerDH( $S, ~y ) ]
  --[ UseServerDH( $S, ~y ) ]->
   [ StoreServerDH( $S, ~y ), ServerDH( $S, ~y ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ExpireServerDH:
   [ StoreServerDH( $S, ~y ) ] --[ ExpireDH( $S, ~y ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1:
   [ Fr( ~nc ), Fr( ~a ) ]
  --[
  C1( ~nc ), Start( ~nc, $C, 'client' ),
  Running( $C, $S, 'client', ~nc ), DH( $C, ~a )
  ]->
   [
   F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, <~nc, $pc, 'g'^~a>,
                  'no_auth'
   ),
   DHExp( $C, ~a ), Out( <$C, ~nc, $pc, 'g'^~a> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_retry:
   [ In( <$C, ~nc, $pc, 'g'^a> ) ]
  --[ S1_Retry( ) ]->
   [ Out( <$S, $ps> ) ]

  /*
  rule (modulo AC) S_1_retry:
     [ In( <$C, ~nc, $pc, z> ) ]
    --[ S1_Retry( ) ]->
     [ Out( <$S, $ps> ) ]
    variants (modulo AC)
    1. z     = 'g'
    
    2. z     = 'g'^a.8
  */

rule (modulo E) C_1_retry:
   [
   F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, prev_messages, 'no_auth'
   ),
   In( <$S, $ps> ), Fr( ~a2 )
   ]
  --[
  C1_Retry( ~nc ), Running( $C, $S, 'client', ~nc ),
  Instance( ~nc, $C, 'client' ), DH( $C, ~a2 )
  ]->
   [
   F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a2, <~nc, $pc, 'g'^~a2>,
                  'no_auth'
   ),
   DHExp( $C, ~a2 ), Out( <$C, ~nc, $pc, 'g'^~a2> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S_1:
   [
   ServerDH( $S, ~y ), !Ltk( $S, ~ltkS ), Fr( ~ns ), Fr( ~b ),
   In( <$C, ~nc, $pc, 'g'^a> )
   ]
  --[
  S1( ~ns ), Start( ~ns, $S, 'server' ), UseLtk( $S, ~ltkS ),
  SignData( $S,
            <
             <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
              pk(~ltkS)>, 
             'server_cert_verify'>
  ),
  RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
  RunningSecrets( $S, $C, 'server', <'g'^a^~b, 'g'^a^~b> ),
  RunningTranscript( $S, $C, 'server',
                     <
                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                       pk(~ltkS)>, 
                      sign(<
                            <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                             pk(~ltkS)>, 
                            'server_cert_verify'>,
                           ~ltkS)
                     >
  ),
  RunningKC( $S, $C, 'server',
             <'g'^~y, h(<'g'^~y, $cert_req, pk(~ltkS)>)>
  ),
  Neq( a, one ), DH( $S, ~b ),
  DHChal( ~b, a, 'g'^~b, 'g'^a, 'g'^a^~b )
  ]->
   [
   F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, 'g'^a^~b, 'g'^a^~b,
                  <
                   <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                    pk(~ltkS)>, 
                   sign(<
                         <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>,
                        ~ltkS)
                  >,
                  h(<'g'^~y, $cert_req, pk(~ltkS)>), 'no_auth'
   ),
   ServerConfig( $S, ~y, h(<'g'^~y, $cert_req, pk(~ltkS)>) ),
   DHExp( $S, ~b ),
   Out( <$S, ~ns, $ps, 'g'^~b, 
         senc(<
               <$exts, 'g'^~y, $cert_req, pk(~ltkS), 
                sign(<
                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                       pk(~ltkS)>, 
                      'server_cert_verify'>,
                     ~ltkS)
               >, 
               hmac(<
                     HKDFExpand(<HKDF(<'0', 'g'^a^~b, 'extractedSS', '256'>), 
                                 'finished_secret', 
                                 h(h(<
                                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                       $cert_req, pk(~ltkS)>, 
                                      sign(<
                                            <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                             $cert_req, pk(~ltkS)>, 
                                            'server_cert_verify'>,
                                           ~ltkS)
                                     >)), 
                                 '256'>), 
                     'server_finished', 
                     <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                      pk(~ltkS)>, 
                     sign(<
                           <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                            pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >)
              >,
              HKDFExpand2(<HKDF(<'0', 'g'^a^~b, 'extractedES', '256'>), 
                           'handshake_key_expansion', 
                           h(h(<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>)), '256'>))
        >
   )
   ]

  /*
  rule (modulo AC) S_1:
     [
     ServerDH( $S, ~y ), !Ltk( $S, ~ltkS ), Fr( ~ns ), Fr( ~b ),
     In( <$C, ~nc, $pc, z> )
     ]
    --[
    S1( ~ns ), Start( ~ns, $S, 'server' ), UseLtk( $S, ~ltkS ),
    SignData( $S,
              <
               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                pk(~ltkS)>, 
               'server_cert_verify'>
    ),
    RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
    RunningSecrets( $S, $C, 'server', <z.1, z.1> ),
    RunningTranscript( $S, $C, 'server',
                       <
                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                         pk(~ltkS)>, 
                        sign(<
                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                               pk(~ltkS)>, 
                              'server_cert_verify'>,
                             ~ltkS)
                       >
    ),
    RunningKC( $S, $C, 'server',
               <'g'^~y, h(<'g'^~y, $cert_req, pk(~ltkS)>)>
    ),
    Neq( a, one ), DH( $S, ~b ), DHChal( ~b, a, 'g'^~b, z, z.1 )
    ]->
     [
     F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, z.1, z.1,
                    <
                     <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                      pk(~ltkS)>, 
                     sign(<
                           <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                            pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >,
                    h(<'g'^~y, $cert_req, pk(~ltkS)>), 'no_auth'
     ),
     ServerConfig( $S, ~y, h(<'g'^~y, $cert_req, pk(~ltkS)>) ),
     DHExp( $S, ~b ),
     Out( <$S, ~ns, $ps, 'g'^~b, 
           senc(<
                 <$exts, 'g'^~y, $cert_req, pk(~ltkS), 
                  sign(<
                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>,
                       ~ltkS)
                 >, 
                 hmac(<
                       HKDFExpand(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                                   'finished_secret', 
                                   h(h(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                         $cert_req, pk(~ltkS)>, 
                                        sign(<
                                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                               $cert_req, pk(~ltkS)>, 
                                              'server_cert_verify'>,
                                             ~ltkS)
                                       >)), 
                                   '256'>), 
                       'server_finished', 
                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                        pk(~ltkS)>, 
                       sign(<
                             <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                              pk(~ltkS)>, 
                             'server_cert_verify'>,
                            ~ltkS)
                      >)
                >,
                HKDFExpand2(<HKDF(<'0', z.1, 'extractedES', '256'>), 
                             'handshake_key_expansion', 
                             h(h(<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>)), '256'>))
          >
     )
     ]
    variants (modulo AC)
    1. ~b    = ~b.16
       a     = inv(~b.16)
       z     = 'g'^inv(~b.16)
       z.1   = 'g'
    
    2. ~b    = ~b.16
       a     = one
       z     = 'g'
       z.1   = 'g'^~b.16
    
    3. ~b    = ~b.21
       a     = a.26
       z     = 'g'^a.26
       z.1   = 'g'^(~b.21*a.26)
    
    4. ~b    = ~b.404
       a     = inv((~b.404*x.800))
       z     = 'g'^inv((~b.404*x.800))
       z.1   = 'g'^inv(x.800)
    
    5. ~b    = ~b.404
       a     = (x.800*inv(~b.404))
       z     = 'g'^(x.800*inv(~b.404))
       z.1   = 'g'^x.800
    
    6. ~b    = ~b.405
       a     = (x.802*inv((~b.405*x.801)))
       z     = 'g'^(x.802*inv((~b.405*x.801)))
       z.1   = 'g'^(x.802*inv(x.801))
  */

rule (modulo E) C_2:
   [
   F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, prev_messages,
                  auth_status
   ),
   !Pk( $S, pk(~ltkS) ),
   In( <$S, ~ns, $ps, 'g'^b, 
        senc(<<$exts, 'g'^y, $cert_req, pk(~ltkS), s_signature>, server_fin
             >,
             HKDFExpand2(<HKDF(<'0', 'g'^b^~a, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, 'g'^b>)), 
                          '256'>))
       >
   )
   ]
  --[
  C2( ~nc ), Instance( ~nc, $C, 'client' ), UsePK( $S, pk(~ltkS) ),
  RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
  RunningSecrets( $C, $S, 'client', <'g'^b^~a, 'g'^b^~a> ),
  CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
  CommitSS( $C, $S, 'client', 'g'^b^~a ),
  CommitES( $C, $S, 'client', 'g'^b^~a ),
  Eq( verify(s_signature,
             <
              <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
               pk(~ltkS)>, 
              'server_cert_verify'>,
             pk(~ltkS)),
      true
  ),
  Eq( server_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', 'g'^b^~a, 'extractedSS', '256'>), 
                        'finished_secret', 
                        h(h(<
                             <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
                              pk(~ltkS)>, 
                             s_signature>)), 
                        '256'>), 
            'server_finished', 
            <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
             pk(~ltkS)>, 
            s_signature>)
  ),
  Neq( b, one ), Neq( y, one ),
  DHChal( ~a, b, 'g'^~a, 'g'^b, 'g'^b^~a )
  ]->
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, 'g'^b^~a,
                   'g'^b^~a,
                   <
                    <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
                     pk(~ltkS)>, 
                    s_signature>,
                   h(<'g'^y, $cert_req, pk(~ltkS)>), 'no_auth'
   ),
   KnownConfig( $C, $S, 'g'^y, h(<'g'^y, $cert_req, pk(~ltkS)>) )
   ]

  /*
  rule (modulo AC) C_2:
     [
     F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, prev_messages,
                    auth_status
     ),
     !Pk( $S, pk(~ltkS) ),
     In( <$S, ~ns, $ps, z, 
          senc(<<$exts, z.1, $cert_req, pk(~ltkS), s_signature>, server_fin>,
               HKDFExpand2(<HKDF(<'0', z.2, 'extractedES', '256'>), 
                            'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, z>)), 
                            '256'>))
         >
     )
     ]
    --[
    C2( ~nc ), Instance( ~nc, $C, 'client' ), UsePK( $S, pk(~ltkS) ),
    RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
    RunningSecrets( $C, $S, 'client', <z.2, z.2> ),
    CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
    CommitSS( $C, $S, 'client', z.2 ),
    CommitES( $C, $S, 'client', z.2 ), Eq( z.3, true ),
    Eq( server_fin,
        hmac(<
              HKDFExpand(<HKDF(<'0', z.2, 'extractedSS', '256'>), 
                          'finished_secret', 
                          h(h(<
                               <<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                               s_signature>)), 
                          '256'>), 
              'server_finished', 
              <<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
              s_signature>)
    ),
    Neq( b, one ), Neq( y, one ), DHChal( ~a, b, 'g'^~a, z, z.2 )
    ]->
     [
     F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, z.2, z.2,
                     <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                      s_signature>,
                     h(<z.1, $cert_req, pk(~ltkS)>), 'no_auth'
     ),
     KnownConfig( $C, $S, z.1, h(<z.1, $cert_req, pk(~ltkS)>) )
     ]
    variants (modulo AC)
     1. $cert_req
              = $cert_req.38
        $exts = $exts.39
        $ps   = $ps.41
        ~a    = ~a.42
        ~ltkS = ~ltkS.43
        ~ns   = ~ns.45
        b     = b.47
        prev_messages
              = prev_messages.48
        s_signature
              = sign(<
                      <<prev_messages.48, ~ns.45, $ps.41, 'g'^b.47>, $exts.39, 'g', 
                       $cert_req.38, pk(~ltkS.43)>, 
                      'server_cert_verify'>,
                     ~ltkS.43)
        y     = one
        z     = 'g'^b.47
        z.1   = 'g'
        z.2   = 'g'^(~a.42*b.47)
        z.3   = true
    
     2. $cert_req
              = $cert_req.38
        $exts = $exts.39
        $ps   = $ps.41
        ~a    = ~a.42
        ~ltkS = ~ltkS.43
        ~ns   = ~ns.45
        b     = inv(~a.42)
        prev_messages
              = prev_messages.48
        s_signature
              = sign(<
                      <<prev_messages.48, ~ns.45, $ps.41, 'g'^inv(~a.42)>, $exts.39, 
                       'g', $cert_req.38, pk(~ltkS.43)>, 
                      'server_cert_verify'>,
                     ~ltkS.43)
        y     = one
        z     = 'g'^inv(~a.42)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = true
    
     3. $cert_req
              = $cert_req.38
        $exts = $exts.39
        $ps   = $ps.41
        ~a    = ~a.42
        ~ltkS = ~ltkS.43
        ~ns   = ~ns.45
        b     = one
        prev_messages
              = prev_messages.48
        s_signature
              = sign(<
                      <<prev_messages.48, ~ns.45, $ps.41, 'g'>, $exts.39, 'g', 
                       $cert_req.38, pk(~ltkS.43)>, 
                      'server_cert_verify'>,
                     ~ltkS.43)
        y     = one
        z     = 'g'
        z.1   = 'g'
        z.2   = 'g'^~a.42
        z.3   = true
    
     4. $cert_req
              = $cert_req.39
        $exts = $exts.40
        $ps   = $ps.42
        ~a    = ~a.43
        ~ltkS = ~ltkS.44
        ~ns   = ~ns.46
        b     = b.48
        prev_messages
              = prev_messages.49
        s_signature
              = s_signature.50
        y     = one
        z     = 'g'^b.48
        z.1   = 'g'
        z.2   = 'g'^(~a.43*b.48)
        z.3   = verify(s_signature.50,
                       <
                        <<prev_messages.49, ~ns.46, $ps.42, 'g'^b.48>, $exts.40, 'g', 
                         $cert_req.39, pk(~ltkS.44)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.44))
    
     5. $cert_req
              = $cert_req.39
        $exts = $exts.40
        $ps   = $ps.42
        ~a    = ~a.43
        ~ltkS = ~ltkS.44
        ~ns   = ~ns.46
        b     = inv(~a.43)
        prev_messages
              = prev_messages.49
        s_signature
              = s_signature.50
        y     = one
        z     = 'g'^inv(~a.43)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = verify(s_signature.50,
                       <
                        <<prev_messages.49, ~ns.46, $ps.42, 'g'^inv(~a.43)>, $exts.40, 
                         'g', $cert_req.39, pk(~ltkS.44)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.44))
    
     6. $cert_req
              = $cert_req.39
        $exts = $exts.40
        $ps   = $ps.42
        ~a    = ~a.43
        ~ltkS = ~ltkS.44
        ~ns   = ~ns.46
        b     = one
        prev_messages
              = prev_messages.49
        s_signature
              = s_signature.50
        y     = one
        z     = 'g'
        z.1   = 'g'
        z.2   = 'g'^~a.43
        z.3   = verify(s_signature.50,
                       <
                        <<prev_messages.49, ~ns.46, $ps.42, 'g'>, $exts.40, 'g', 
                         $cert_req.39, pk(~ltkS.44)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.44))
    
     7. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = b.50
        prev_messages
              = prev_messages.51
        s_signature
              = s_signature.52
        y     = y.54
        z     = 'g'^b.50
        z.1   = 'g'^y.54
        z.2   = 'g'^(~a.45*b.50)
        z.3   = verify(s_signature.52,
                       <
                        <<prev_messages.51, ~ns.48, $ps.44, 'g'^b.50>, $exts.42, 'g'^y.54, 
                         $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
     8. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = b.50
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.48, $ps.44, 'g'^b.50>, $exts.42, 'g'^y.54, 
                       $cert_req.41, pk(~ltkS.46)>, 
                      'server_cert_verify'>,
                     ~ltkS.46)
        y     = y.54
        z     = 'g'^b.50
        z.1   = 'g'^y.54
        z.2   = 'g'^(~a.45*b.50)
        z.3   = true
    
     9. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = inv(~a.45)
        prev_messages
              = prev_messages.51
        s_signature
              = s_signature.52
        y     = y.54
        z     = 'g'^inv(~a.45)
        z.1   = 'g'^y.54
        z.2   = 'g'
        z.3   = verify(s_signature.52,
                       <
                        <<prev_messages.51, ~ns.48, $ps.44, 'g'^inv(~a.45)>, $exts.42, 
                         'g'^y.54, $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
    10. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = inv(~a.45)
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.48, $ps.44, 'g'^inv(~a.45)>, $exts.42, 
                       'g'^y.54, $cert_req.41, pk(~ltkS.46)>, 
                      'server_cert_verify'>,
                     ~ltkS.46)
        y     = y.54
        z     = 'g'^inv(~a.45)
        z.1   = 'g'^y.54
        z.2   = 'g'
        z.3   = true
    
    11. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = one
        prev_messages
              = prev_messages.51
        s_signature
              = s_signature.52
        y     = y.54
        z     = 'g'
        z.1   = 'g'^y.54
        z.2   = 'g'^~a.45
        z.3   = verify(s_signature.52,
                       <
                        <<prev_messages.51, ~ns.48, $ps.44, 'g'>, $exts.42, 'g'^y.54, 
                         $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
    12. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = one
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.48, $ps.44, 'g'>, $exts.42, 'g'^y.54, 
                       $cert_req.41, pk(~ltkS.46)>, 
                      'server_cert_verify'>,
                     ~ltkS.46)
        y     = y.54
        z     = 'g'
        z.1   = 'g'^y.54
        z.2   = 'g'^~a.45
        z.3   = true
    
    13. $cert_req
              = $cert_req.383
        $exts = $exts.384
        $ps   = $ps.386
        ~a    = ~a.387
        ~ltkS = ~ltkS.388
        ~ns   = ~ns.390
        b     = inv((~a.387*x.762))
        prev_messages
              = prev_messages.393
        s_signature
              = s_signature.394
        y     = y.396
        z     = 'g'^inv((~a.387*x.762))
        z.1   = 'g'^y.396
        z.2   = 'g'^inv(x.762)
        z.3   = verify(s_signature.394,
                       <
                        <<prev_messages.393, ~ns.390, $ps.386, 'g'^inv((~a.387*x.762))>, 
                         $exts.384, 'g'^y.396, $cert_req.383, pk(~ltkS.388)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.388))
    
    14. $cert_req
              = $cert_req.383
        $exts = $exts.384
        $ps   = $ps.386
        ~a    = ~a.387
        ~ltkS = ~ltkS.388
        ~ns   = ~ns.390
        b     = inv((~a.387*x.762))
        prev_messages
              = prev_messages.393
        s_signature
              = s_signature.394
        y     = one
        z     = 'g'^inv((~a.387*x.762))
        z.1   = 'g'
        z.2   = 'g'^inv(x.762)
        z.3   = verify(s_signature.394,
                       <
                        <<prev_messages.393, ~ns.390, $ps.386, 'g'^inv((~a.387*x.762))>, 
                         $exts.384, 'g', $cert_req.383, pk(~ltkS.388)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.388))
    
    15. $cert_req
              = $cert_req.383
        $exts = $exts.384
        $ps   = $ps.386
        ~a    = ~a.387
        ~ltkS = ~ltkS.388
        ~ns   = ~ns.390
        b     = (x.762*inv(~a.387))
        prev_messages
              = prev_messages.393
        s_signature
              = s_signature.394
        y     = y.396
        z     = 'g'^(x.762*inv(~a.387))
        z.1   = 'g'^y.396
        z.2   = 'g'^x.762
        z.3   = verify(s_signature.394,
                       <
                        <<prev_messages.393, ~ns.390, $ps.386, 'g'^(x.762*inv(~a.387))>, 
                         $exts.384, 'g'^y.396, $cert_req.383, pk(~ltkS.388)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.388))
    
    16. $cert_req
              = $cert_req.383
        $exts = $exts.384
        $ps   = $ps.386
        ~a    = ~a.387
        ~ltkS = ~ltkS.388
        ~ns   = ~ns.390
        b     = (x.762*inv(~a.387))
        prev_messages
              = prev_messages.393
        s_signature
              = s_signature.394
        y     = one
        z     = 'g'^(x.762*inv(~a.387))
        z.1   = 'g'
        z.2   = 'g'^x.762
        z.3   = verify(s_signature.394,
                       <
                        <<prev_messages.393, ~ns.390, $ps.386, 'g'^(x.762*inv(~a.387))>, 
                         $exts.384, 'g', $cert_req.383, pk(~ltkS.388)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.388))
    
    17. $cert_req
              = $cert_req.384
        $exts = $exts.385
        $ps   = $ps.387
        ~a    = ~a.388
        ~ltkS = ~ltkS.389
        ~ns   = ~ns.391
        b     = (x.764*inv((~a.388*x.763)))
        prev_messages
              = prev_messages.394
        s_signature
              = s_signature.395
        y     = y.397
        z     = 'g'^(x.764*inv((~a.388*x.763)))
        z.1   = 'g'^y.397
        z.2   = 'g'^(x.764*inv(x.763))
        z.3   = verify(s_signature.395,
                       <
                        <
                         <prev_messages.394, ~ns.391, $ps.387, 
                          'g'^(x.764*inv((~a.388*x.763)))>, 
                         $exts.385, 'g'^y.397, $cert_req.384, pk(~ltkS.389)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.389))
    
    18. $cert_req
              = $cert_req.384
        $exts = $exts.385
        $ps   = $ps.387
        ~a    = ~a.388
        ~ltkS = ~ltkS.389
        ~ns   = ~ns.391
        b     = (x.764*inv((~a.388*x.763)))
        prev_messages
              = prev_messages.394
        s_signature
              = s_signature.395
        y     = one
        z     = 'g'^(x.764*inv((~a.388*x.763)))
        z.1   = 'g'
        z.2   = 'g'^(x.764*inv(x.763))
        z.3   = verify(s_signature.395,
                       <
                        <
                         <prev_messages.394, ~ns.391, $ps.387, 
                          'g'^(x.764*inv((~a.388*x.763)))>, 
                         $exts.385, 'g', $cert_req.384, pk(~ltkS.389)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.389))
    
    19. $cert_req
              = $cert_req.389
        $exts = $exts.390
        $ps   = $ps.392
        ~a    = ~a.393
        ~ltkS = ~ltkS.394
        ~ns   = ~ns.396
        b     = inv((~a.393*x.774))
        prev_messages
              = prev_messages.399
        s_signature
              = sign(<
                      <<prev_messages.399, ~ns.396, $ps.392, 'g'^inv((~a.393*x.774))>, 
                       $exts.390, 'g', $cert_req.389, pk(~ltkS.394)>, 
                      'server_cert_verify'>,
                     ~ltkS.394)
        y     = one
        z     = 'g'^inv((~a.393*x.774))
        z.1   = 'g'
        z.2   = 'g'^inv(x.774)
        z.3   = true
    
    20. $cert_req
              = $cert_req.389
        $exts = $exts.390
        $ps   = $ps.392
        ~a    = ~a.393
        ~ltkS = ~ltkS.394
        ~ns   = ~ns.396
        b     = (x.774*inv(~a.393))
        prev_messages
              = prev_messages.399
        s_signature
              = sign(<
                      <<prev_messages.399, ~ns.396, $ps.392, 'g'^(x.774*inv(~a.393))>, 
                       $exts.390, 'g', $cert_req.389, pk(~ltkS.394)>, 
                      'server_cert_verify'>,
                     ~ltkS.394)
        y     = one
        z     = 'g'^(x.774*inv(~a.393))
        z.1   = 'g'
        z.2   = 'g'^x.774
        z.3   = true
    
    21. $cert_req
              = $cert_req.390
        $exts = $exts.391
        $ps   = $ps.393
        ~a    = ~a.394
        ~ltkS = ~ltkS.395
        ~ns   = ~ns.397
        b     = inv((~a.394*x.776))
        prev_messages
              = prev_messages.400
        s_signature
              = sign(<
                      <<prev_messages.400, ~ns.397, $ps.393, 'g'^inv((~a.394*x.776))>, 
                       $exts.391, 'g'^y.403, $cert_req.390, pk(~ltkS.395)>, 
                      'server_cert_verify'>,
                     ~ltkS.395)
        y     = y.403
        z     = 'g'^inv((~a.394*x.776))
        z.1   = 'g'^y.403
        z.2   = 'g'^inv(x.776)
        z.3   = true
    
    22. $cert_req
              = $cert_req.390
        $exts = $exts.391
        $ps   = $ps.393
        ~a    = ~a.394
        ~ltkS = ~ltkS.395
        ~ns   = ~ns.397
        b     = (x.776*inv(~a.394))
        prev_messages
              = prev_messages.400
        s_signature
              = sign(<
                      <<prev_messages.400, ~ns.397, $ps.393, 'g'^(x.776*inv(~a.394))>, 
                       $exts.391, 'g'^y.403, $cert_req.390, pk(~ltkS.395)>, 
                      'server_cert_verify'>,
                     ~ltkS.395)
        y     = y.403
        z     = 'g'^(x.776*inv(~a.394))
        z.1   = 'g'^y.403
        z.2   = 'g'^x.776
        z.3   = true
    
    23. $cert_req
              = $cert_req.390
        $exts = $exts.391
        $ps   = $ps.393
        ~a    = ~a.394
        ~ltkS = ~ltkS.395
        ~ns   = ~ns.397
        b     = (x.776*inv((~a.394*x.775)))
        prev_messages
              = prev_messages.400
        s_signature
              = sign(<
                      <
                       <prev_messages.400, ~ns.397, $ps.393, 
                        'g'^(x.776*inv((~a.394*x.775)))>, 
                       $exts.391, 'g', $cert_req.390, pk(~ltkS.395)>, 
                      'server_cert_verify'>,
                     ~ltkS.395)
        y     = one
        z     = 'g'^(x.776*inv((~a.394*x.775)))
        z.1   = 'g'
        z.2   = 'g'^(x.776*inv(x.775))
        z.3   = true
    
    24. $cert_req
              = $cert_req.391
        $exts = $exts.392
        $ps   = $ps.394
        ~a    = ~a.395
        ~ltkS = ~ltkS.396
        ~ns   = ~ns.398
        b     = (x.778*inv((~a.395*x.777)))
        prev_messages
              = prev_messages.401
        s_signature
              = sign(<
                      <
                       <prev_messages.401, ~ns.398, $ps.394, 
                        'g'^(x.778*inv((~a.395*x.777)))>, 
                       $exts.392, 'g'^y.404, $cert_req.391, pk(~ltkS.396)>, 
                      'server_cert_verify'>,
                     ~ltkS.396)
        y     = y.404
        z     = 'g'^(x.778*inv((~a.395*x.777)))
        z.1   = 'g'^y.404
        z.2   = 'g'^(x.778*inv(x.777))
        z.3   = true
  */

rule (modulo E) S_2:
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  prev_messages, config_hash, auth_status
   ),
   In( <$C, 
        senc(client_fin,
             HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(prev_messages)), '256'>))
       >
   )
   ]
  --[
  S2( ~ns ), Instance( ~ns, $S, 'server' ),
  SessionKey( $S, $C, 'server',
              <
               HKDFExpand1(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(prev_messages)), '256'>), 
               auth_status>
  ),
  SessionKey( $S, $C, 'server',
              <
               HKDFExpand2(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(prev_messages)), '256'>), 
               auth_status>
  ),
  Eq( client_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                        'finished_secret', h(h(prev_messages)), '256'>), 
            'client_finished', prev_messages>)
  )
  ]->
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  prev_messages, config_hash, auth_status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_2_Auth:
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'auth_recv'
   )
   ]
  --[
  S2_Auth( ~ns ), Instance( ~ns, $S, 'server' ),
  CommitNonces( $S, $C, 'server', <~nc, ~ns> ),
  CommitSS( $S, $C, 'server', ss ), CommitES( $S, $C, 'server', es ),
  CommitTranscript( $S, $C, 'server', messages ),
  SessionKey( $S, $C, 'server',
              <
               HKDFExpand1(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(messages)), '256'>), 
               'authenticated'>
  ),
  SessionKey( $S, $C, 'server',
              <
               HKDFExpand2(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(messages)), '256'>), 
               'authenticated'>
  )
  ]->
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'authenticated'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_3:
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, auth_status
   )
   ]
  --[
  S3( ~ns ), Instance( ~ns, $S, 'server' ),
  FinishedHandshake( ~ns, $S, 'server' )
  ]->
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_3:
   [
   F_St_C_2_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, auth_status
   )
   ]
  --[
  C3( ~nc ), Instance( ~nc, $C, 'client' ),
  FinishedHandshake( ~nc, $C, 'client' )
  ]->
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_3_NST:
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, auth_status
   ),
   Fr( ~psk_id )
   ]
  --[
  S3_NST( ~ns ), Instance( ~ns, $S, 'server' ),
  FinishedHandshake( ~ns, $S, 'server' ),
  RunningPSK( $S, $C, 'server',
              <~psk_id, 
               HKDFExpand(<
                           HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                           'resumption_master_secret', h(h(messages)), '256'>)
              >
  ),
  AuthStatus( $S, $C, 'server', auth_status ),
  SendData( ~ns, ~psk_id )
  ]->
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   StoreServerPSK( $S, ~psk_id, $C,
                   HKDFExpand(<
                               HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                     HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'
                                    >), 
                               'resumption_master_secret', h(h(messages)), '256'>),
                   config_hash, auth_status
   ),
   Out( <$S, 
         senc(~psk_id,
              HKDFExpand2(<
                           HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                           'application_data_key_expansion', h(h(messages)), '256'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_3_NST:
   [
   F_St_C_2_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, auth_status
   ),
   In( <$S, 
        senc(~psk_id,
             HKDFExpand2(<
                          HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                          'application_data_key_expansion', h(h(messages)), '256'>))
       >
   )
   ]
  --[
  C3_NST( ~nc ), Instance( ~nc, $C, 'client' ),
  FinishedHandshake( ~nc, $C, 'client' ),
  RunningPSK( $C, $S, 'client',
              <~psk_id, 
               HKDFExpand(<
                           HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                           'resumption_master_secret', h(h(messages)), '256'>)
              >
  ),
  AuthStatus( $C, $S, 'client', auth_status ), RecvId( ~nc, ~psk_id )
  ]->
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   StoreClientPSK( $C, ~psk_id, $S,
                   HKDFExpand(<
                               HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                     HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'
                                    >), 
                               'resumption_master_secret', h(h(messages)), '256'>),
                   config_hash, auth_status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_Send:
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   Fr( ~data )
   ]
  --[
  C_Send( ~nc ),
  SessionData( ~nc, <$C, $S, 'client', ss, es, messages> ),
  Instance( ~nc, $C, 'client' ), SendData( ~nc, ~data )
  ]->
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   Out( <$C, 
         senc(~data,
              HKDFExpand1(<
                           HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                           'application_data_key_expansion', h(h(messages)), '256'>))
        >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S_Send:
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   Fr( ~data )
   ]
  --[
  S_Send( ~ns ),
  SessionData( ~ns, <$S, $C, 'server', ss, es, messages> ),
  Instance( ~ns, $S, 'server' ), SendData( ~ns, ~data )
  ]->
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   Out( <$S, 
         senc(~data,
              HKDFExpand2(<
                           HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                           'application_data_key_expansion', h(h(messages)), '256'>))
        >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) C_Recv:
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   In( <$S, 
        senc(~data,
             HKDFExpand2(<
                          HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                          'application_data_key_expansion', h(h(messages)), '256'>))
       >
   )
   ]
  --[
  C_Recv( ~nc ),
  SessionData( ~nc, <$C, $S, 'client', ss, es, messages> ),
  Instance( ~nc, $C, 'client' ), RecvData( ~nc, ~data )
  ]->
   [
   St_C_loop( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S_Recv:
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   ),
   In( <$C, 
        senc(~data,
             HKDFExpand1(<
                          HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                          'application_data_key_expansion', h(h(messages)), '256'>))
       >
   )
   ]
  --[
  S_Recv( ~ns ),
  SessionData( ~ns, <$S, $C, 'server', ss, es, messages> ),
  Instance( ~ns, $S, 'server' ), RecvData( ~ns, ~data )
  ]->
   [
   St_S_loop( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
              auth_status
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Gen_PSK:
   [ Fr( ~psk_id ), Fr( ~rs ) ]
  --[
  GenPSK( $S, 'server' ), GenPSK( $C, 'client' ),
  FreshPSK( ~psk_id, ~rs )
  ]->
   [
   StoreClientPSK( $C, ~psk_id, $S, ~rs, 'NULL', 'no_auth' ),
   StoreServerPSK( $S, ~psk_id, $C, ~rs, 'NULL', 'no_auth' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) UseClientPSK:
   [ StoreClientPSK( $C, ~psk_id, $S, rs, config_hash, auth_status ) ]
  --[ UsePSK( $C, ~psk_id, $S, rs, 'client', auth_status ) ]->
   [
   StoreClientPSK( $C, ~psk_id, $S, rs, config_hash, auth_status ),
   ClientPSK( $C, ~psk_id, $S, rs, config_hash, auth_status )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) UseServerPSK:
   [ StoreServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status ) ]
  --[ UsePSK( $S, ~psk_id, $C, rs, 'server', auth_status ) ]->
   [
   StoreServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status ),
   ServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) C_1_PSK:
   [
   Fr( ~nc ), Fr( ~data ), Fr( ~a ),
   ClientPSK( $C, ~psk_id, $S, rs, config_hash, auth_status )
   ]
  --[
  C1_PSK( ~nc ), Start( ~nc, $C, 'client' ),
  Running( $C, $S, 'client', ~nc ),
  RunningSS( $C, $S, 'client', rs ),
  CommitPSK( $C, $S, 'client', <~psk_id, rs> ),
  CommitSS( $C, $S, 'client', rs ), DH( $C, ~a ),
  SendData( ~nc, ~data ),
  EarlyDataKey( $C, $S, 'client',
                HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                             'early_data_key_expansion', 
                             h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>)
  )
  ]->
   [
   F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, rs,
                      <~nc, $pc, 'g'^~a>, config_hash, 'never_auth'
   ),
   DHExp( $C, ~a ),
   Out( <$C, ~nc, $pc, 'g'^~a, ~psk_id, 
         senc(~data,
              HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                           'early_data_key_expansion', 
                           h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_PSK:
   [
   In( <$C, ~nc, $pc, 'g'^a, ~psk_id, 
        senc(~data,
             HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                          'early_data_key_expansion', 
                          h(<h(<~nc, $pc, 'g'^a>), h(config_hash)>), '256'>))
       >
   ),
   Fr( ~ns ),
   ServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status )
   ]
  --[
  S1_PSK( ~ns ), Start( ~ns, $S, 'server' ),
  UseServerPSK( $S, $C, 'server', <~psk_id, rs> ),
  RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
  RunningSecrets( $S, $C, 'server', <rs, rs> ),
  RunningTranscript( $S, $C, 'server',
                     <<<~nc, $pc, 'g'^a>, ~ns, $ps>, $exts>
  )
  ]->
   [
   F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, rs, rs,
                      ~psk_id, <<<~nc, $pc, 'g'^a>, ~ns, $ps>, $exts>, config_hash,
                      auth_status
   ),
   Out( <$S, ~ns, $ps, 
         senc(<$exts, 
               hmac(<
                     HKDFExpand(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                                 'finished_secret', h(h(<<<~nc, $pc, 'g'^a>, ~ns, $ps>, $exts>)), 
                                 '256'>), 
                     'server_finished', <<~nc, $pc, 'g'^a>, ~ns, $ps>, $exts>)
              >,
              HKDFExpand2(<HKDF(<'0', rs, 'extractedES', '256'>), 
                           'handshake_key_expansion', h(h(<<~nc, $pc, 'g'^a>, ~ns, $ps>)), 
                           '256'>))
        >
   )
   ]

  /*
  rule (modulo AC) S_1_PSK:
     [
     In( <$C, ~nc, $pc, z, ~psk_id, 
          senc(~data,
               HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                            'early_data_key_expansion', h(<h(<~nc, $pc, z>), h(config_hash)>), 
                            '256'>))
         >
     ),
     Fr( ~ns ),
     ServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status )
     ]
    --[
    S1_PSK( ~ns ), Start( ~ns, $S, 'server' ),
    UseServerPSK( $S, $C, 'server', <~psk_id, rs> ),
    RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
    RunningSecrets( $S, $C, 'server', <rs, rs> ),
    RunningTranscript( $S, $C, 'server',
                       <<<~nc, $pc, z>, ~ns, $ps>, $exts>
    )
    ]->
     [
     F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, rs, rs,
                        ~psk_id, <<<~nc, $pc, z>, ~ns, $ps>, $exts>, config_hash,
                        auth_status
     ),
     Out( <$S, ~ns, $ps, 
           senc(<$exts, 
                 hmac(<
                       HKDFExpand(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                                   'finished_secret', h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), 
                                   '256'>), 
                       'server_finished', <<~nc, $pc, z>, ~ns, $ps>, $exts>)
                >,
                HKDFExpand2(<HKDF(<'0', rs, 'extractedES', '256'>), 
                             'handshake_key_expansion', h(h(<<~nc, $pc, z>, ~ns, $ps>)), '256'
                            >))
          >
     )
     ]
    variants (modulo AC)
    1. z     = 'g'
    
    2. z     = 'g'^a.16
  */

rule (modulo E) C_2_PSK:
   [
   F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                      config_hash, auth_status
   ),
   In( <$S, ~ns, $ps, 
        senc(<$exts, server_fin>,
             HKDFExpand2(<HKDF(<'0', ss, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps>)), '256'
                         >))
       >
   )
   ]
  --[
  C2_PSK( ~nc ), Instance( ~nc, $C, 'client' ),
  RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
  RunningSecrets( $C, $S, 'client', <ss, ss> ),
  CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
  CommitES( $C, $S, 'client', ss ),
  Eq( server_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                        'finished_secret', h(h(<<prev_messages, ~ns, $ps>, $exts>)), '256'
                       >), 
            'server_finished', <prev_messages, ~ns, $ps>, $exts>)
  )
  ]->
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, ss,
                   <<prev_messages, ~ns, $ps>, $exts>, config_hash, auth_status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_PSK_DHE:
   [
   In( <$C, ~nc, $pc, 'g'^a, ~psk_id, 
        senc(~data,
             HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                          'early_data_key_expansion', 
                          h(<h(<~nc, $pc, 'g'^a>), h(config_hash)>), '256'>))
       >
   ),
   Fr( ~ns ),
   ServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status ),
   Fr( ~b )
   ]
  --[
  S1_PSK_DHE( ~ns ), Start( ~ns, $S, 'server' ),
  UseServerPSK( $S, $C, 'server', <~psk_id, rs> ),
  RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
  RunningSecrets( $S, $C, 'server', <rs, 'g'^a^~b> ),
  RunningTranscript( $S, $C, 'server',
                     <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts>
  ),
  Neq( a, one ), DH( $S, ~b ),
  DHChal( ~b, a, 'g'^~b, 'g'^a, 'g'^a^~b )
  ]->
   [
   F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, rs, 'g'^a^~b,
                      ~psk_id, <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts>,
                      config_hash, auth_status
   ),
   DHExp( $S, ~b ),
   Out( <$S, ~ns, $ps, 'g'^~b, 
         senc(<$exts, 
               hmac(<
                     HKDFExpand(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                                 'finished_secret', 
                                 h(h(<<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>), 
                     'server_finished', <<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts>)
              >,
              HKDFExpand2(<HKDF(<'0', 'g'^a^~b, 'extractedES', '256'>), 
                           'handshake_key_expansion', 
                           h(h(<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>)), '256'>))
        >
   )
   ]

  /*
  rule (modulo AC) S_1_PSK_DHE:
     [
     In( <$C, ~nc, $pc, z, ~psk_id, 
          senc(~data,
               HKDFExpand1(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                            'early_data_key_expansion', h(<h(<~nc, $pc, z>), h(config_hash)>), 
                            '256'>))
         >
     ),
     Fr( ~ns ),
     ServerPSK( $S, ~psk_id, $C, rs, config_hash, auth_status ),
     Fr( ~b )
     ]
    --[
    S1_PSK_DHE( ~ns ), Start( ~ns, $S, 'server' ),
    UseServerPSK( $S, $C, 'server', <~psk_id, rs> ),
    RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
    RunningSecrets( $S, $C, 'server', <rs, z.1> ),
    RunningTranscript( $S, $C, 'server',
                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>
    ),
    Neq( a, one ), DH( $S, ~b ), DHChal( ~b, a, 'g'^~b, z, z.1 )
    ]->
     [
     F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, rs, z.1,
                        ~psk_id, <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>, config_hash,
                        auth_status
     ),
     DHExp( $S, ~b ),
     Out( <$S, ~ns, $ps, 'g'^~b, 
           senc(<$exts, 
                 hmac(<
                       HKDFExpand(<HKDF(<'0', rs, 'extractedSS', '256'>), 
                                   'finished_secret', 
                                   h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>), 
                       'server_finished', <<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)
                >,
                HKDFExpand2(<HKDF(<'0', z.1, 'extractedES', '256'>), 
                             'handshake_key_expansion', 
                             h(h(<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>)), '256'>))
          >
     )
     ]
    variants (modulo AC)
    1. ~b    = ~b.22
       a     = inv(~b.22)
       z     = 'g'^inv(~b.22)
       z.1   = 'g'
    
    2. ~b    = ~b.22
       a     = one
       z     = 'g'
       z.1   = 'g'^~b.22
    
    3. ~b    = ~b.27
       a     = a.32
       z     = 'g'^a.32
       z.1   = 'g'^(~b.27*a.32)
    
    4. ~b    = ~b.293
       a     = inv((~b.293*x.579))
       z     = 'g'^inv((~b.293*x.579))
       z.1   = 'g'^inv(x.579)
    
    5. ~b    = ~b.293
       a     = (x.579*inv(~b.293))
       z     = 'g'^(x.579*inv(~b.293))
       z.1   = 'g'^x.579
    
    6. ~b    = ~b.294
       a     = (x.581*inv((~b.294*x.580)))
       z     = 'g'^(x.581*inv((~b.294*x.580)))
       z.1   = 'g'^(x.581*inv(x.580))
  */

rule (modulo E) C_2_PSK_DHE:
   [
   F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                      config_hash, auth_status
   ),
   In( <$S, ~ns, $ps, 'g'^b, 
        senc(<$exts, server_fin>,
             HKDFExpand2(<HKDF(<'0', 'g'^b^~a, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, 'g'^b>)), 
                          '256'>))
       >
   )
   ]
  --[
  C2_PSK_DHE( ~nc ), Instance( ~nc, $C, 'client' ),
  RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
  RunningSecrets( $C, $S, 'client', <ss, 'g'^b^~a> ),
  CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
  CommitES( $C, $S, 'client', 'g'^b^~a ),
  Eq( server_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                        'finished_secret', 
                        h(h(<<prev_messages, ~ns, $ps, 'g'^b>, $exts>)), '256'>), 
            'server_finished', <prev_messages, ~ns, $ps, 'g'^b>, $exts>)
  ),
  Neq( b, one ), DHChal( ~a, b, 'g'^~a, 'g'^b, 'g'^b^~a )
  ]->
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, 'g'^b^~a,
                   <<prev_messages, ~ns, $ps, 'g'^b>, $exts>, config_hash, auth_status
   )
   ]

  /*
  rule (modulo AC) C_2_PSK_DHE:
     [
     F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                        config_hash, auth_status
     ),
     In( <$S, ~ns, $ps, z, 
          senc(<$exts, server_fin>,
               HKDFExpand2(<HKDF(<'0', z.1, 'extractedES', '256'>), 
                            'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, z>)), 
                            '256'>))
         >
     )
     ]
    --[
    C2_PSK_DHE( ~nc ), Instance( ~nc, $C, 'client' ),
    RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
    RunningSecrets( $C, $S, 'client', <ss, z.1> ),
    CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
    CommitES( $C, $S, 'client', z.1 ),
    Eq( server_fin,
        hmac(<
              HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                          'finished_secret', h(h(<<prev_messages, ~ns, $ps, z>, $exts>)), 
                          '256'>), 
              'server_finished', <prev_messages, ~ns, $ps, z>, $exts>)
    ),
    Neq( b, one ), DHChal( ~a, b, 'g'^~a, z, z.1 )
    ]->
     [
     F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, z.1,
                     <<prev_messages, ~ns, $ps, z>, $exts>, config_hash, auth_status
     )
     ]
    variants (modulo AC)
    1. ~a    = ~a.19
       b     = inv(~a.19)
       z     = 'g'^inv(~a.19)
       z.1   = 'g'
    
    2. ~a    = ~a.19
       b     = one
       z     = 'g'
       z.1   = 'g'^~a.19
    
    3. ~a    = ~a.23
       b     = b.27
       z     = 'g'^b.27
       z.1   = 'g'^(~a.23*b.27)
    
    4. ~a    = ~a.257
       b     = inv((~a.257*x.507))
       z     = 'g'^inv((~a.257*x.507))
       z.1   = 'g'^inv(x.507)
    
    5. ~a    = ~a.257
       b     = (x.507*inv(~a.257))
       z     = 'g'^(x.507*inv(~a.257))
       z.1   = 'g'^x.507
    
    6. ~a    = ~a.258
       b     = (x.509*inv((~a.258*x.508)))
       z     = 'g'^(x.509*inv((~a.258*x.508)))
       z.1   = 'g'^(x.509*inv(x.508))
  */

rule (modulo E) C_1_KC:
   [
   Fr( ~nc ), Fr( ~a ), Fr( ~data ),
   KnownConfig( $C, $S, 'g'^y, config_hash )
   ]
  --[
  C1_KC( ~nc ), Start( ~nc, $C, 'client' ),
  Running( $C, $S, 'client', ~nc ),
  RunningSS( $C, $S, 'client', 'g'^y^~a ),
  CommitKC( $C, $S, 'client', <'g'^y, config_hash> ),
  CommitSS( $C, $S, 'client', 'g'^y^~a ), SendData( ~nc, ~data ),
  EarlyDataKey( $C, $S, 'client',
                HKDFExpand1(<HKDF(<'0', 'g'^y^~a, 'extractedSS', '256'>), 
                             'early_data_key_expansion', 
                             h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>)
  ),
  Neq( y, one ), DH( $C, ~a ),
  DHChal( ~a, y, 'g'^~a, 'g'^y, 'g'^y^~a )
  ]->
   [
   F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, 'g'^y^~a,
                     <~nc, $pc, 'g'^~a>, config_hash, 'no_auth'
   ),
   DHExp( $C, ~a ),
   Out( <$C, ~nc, $pc, 'g'^~a, 
         senc(~data,
              HKDFExpand1(<HKDF(<'0', 'g'^y^~a, 'extractedSS', '256'>), 
                           'early_data_key_expansion', 
                           h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>))
        >
   )
   ]

  /*
  rule (modulo AC) C_1_KC:
     [
     Fr( ~nc ), Fr( ~a ), Fr( ~data ),
     KnownConfig( $C, $S, z, config_hash )
     ]
    --[
    C1_KC( ~nc ), Start( ~nc, $C, 'client' ),
    Running( $C, $S, 'client', ~nc ),
    RunningSS( $C, $S, 'client', z.1 ),
    CommitKC( $C, $S, 'client', <z, config_hash> ),
    CommitSS( $C, $S, 'client', z.1 ), SendData( ~nc, ~data ),
    EarlyDataKey( $C, $S, 'client',
                  HKDFExpand1(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                               'early_data_key_expansion', 
                               h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>)
    ),
    Neq( y, one ), DH( $C, ~a ), DHChal( ~a, y, 'g'^~a, z, z.1 )
    ]->
     [
     F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, z.1,
                       <~nc, $pc, 'g'^~a>, config_hash, 'no_auth'
     ),
     DHExp( $C, ~a ),
     Out( <$C, ~nc, $pc, 'g'^~a, 
           senc(~data,
                HKDFExpand1(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                             'early_data_key_expansion', 
                             h(<h(<~nc, $pc, 'g'^~a>), h(config_hash)>), '256'>))
          >
     )
     ]
    variants (modulo AC)
    1. ~a    = ~a.12
       y     = inv(~a.12)
       z     = 'g'^inv(~a.12)
       z.1   = 'g'
    
    2. ~a    = ~a.12
       y     = one
       z     = 'g'
       z.1   = 'g'^~a.12
    
    3. ~a    = ~a.16
       y     = y.20
       z     = 'g'^y.20
       z.1   = 'g'^(~a.16*y.20)
    
    4. ~a    = ~a.154
       y     = inv((~a.154*x.303))
       z     = 'g'^inv((~a.154*x.303))
       z.1   = 'g'^inv(x.303)
    
    5. ~a    = ~a.154
       y     = (x.303*inv(~a.154))
       z     = 'g'^(x.303*inv(~a.154))
       z.1   = 'g'^x.303
    
    6. ~a    = ~a.155
       y     = (x.305*inv((~a.155*x.304)))
       z     = 'g'^(x.305*inv((~a.155*x.304)))
       z.1   = 'g'^(x.305*inv(x.304))
  */

rule (modulo E) S_1_KC:
   [
   In( <$C, ~nc, $pc, 'g'^a, 
        senc(~data,
             HKDFExpand1(<HKDF(<'0', 'g'^a^~y, 'extractedSS', '256'>), 
                          'early_data_key_expansion', 
                          h(<h(<~nc, $pc, 'g'^a>), h(config_hash)>), '256'>))
       >
   ),
   ServerDH( $S, ~y2 ), !Ltk( $S, ~ltkS ), Fr( ~ns ), Fr( ~b ),
   ServerConfig( $S, ~y, config_hash )
   ]
  --[
  S1_KC( ~ns ), Start( ~ns, $S, 'server' ), UseLtk( $S, ~ltkS ),
  SignData( $S,
            <
             <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
              pk(~ltkS)>, 
             'server_cert_verify'>
  ),
  UseServerConfig( $S, ~y, config_hash ),
  RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
  RunningSecrets( $S, $C, 'server', <'g'^a^~y, 'g'^a^~b> ),
  RunningTranscript( $S, $C, 'server',
                     <
                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                       pk(~ltkS)>, 
                      sign(<
                            <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                             pk(~ltkS)>, 
                            'server_cert_verify'>,
                           ~ltkS)
                     >
  ),
  RunningKC( $S, $C, 'server',
             <'g'^~y2, h(<'g'^~y2, $cert_req, pk(~ltkS)>)>
  ),
  Neq( a, one ), DH( $S, ~b ),
  DHChal( ~y, a, 'g'^~y, 'g'^a, 'g'^a^~y ),
  DHChal( ~b, a, 'g'^~b, 'g'^a, 'g'^a^~b )
  ]->
   [
   F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, 'g'^a^~y, 'g'^a^~b,
                  <
                   <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                    pk(~ltkS)>, 
                   sign(<
                         <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>,
                        ~ltkS)
                  >,
                  h(<'g'^~y2, $cert_req, pk(~ltkS)>), 'no_auth'
   ),
   DHExp( $S, ~b ),
   ServerConfig( $S, ~y, h(<'g'^~y2, $cert_req, pk(~ltkS)>) ),
   Out( <$S, ~ns, $ps, 'g'^~b, 
         senc(<
               <$exts, 'g'^~y2, $cert_req, pk(~ltkS), 
                sign(<
                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                       pk(~ltkS)>, 
                      'server_cert_verify'>,
                     ~ltkS)
               >, 
               hmac(<
                     HKDFExpand(<HKDF(<'0', 'g'^a^~y, 'extractedSS', '256'>), 
                                 'finished_secret', 
                                 h(h(<
                                      <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                       $cert_req, pk(~ltkS)>, 
                                      sign(<
                                            <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                             $cert_req, pk(~ltkS)>, 
                                            'server_cert_verify'>,
                                           ~ltkS)
                                     >)), 
                                 '256'>), 
                     'server_finished', 
                     <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                      pk(~ltkS)>, 
                     sign(<
                           <<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                            pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >)
              >,
              HKDFExpand2(<HKDF(<'0', 'g'^a^~b, 'extractedES', '256'>), 
                           'handshake_key_expansion', 
                           h(h(<<~nc, $pc, 'g'^a>, ~ns, $ps, 'g'^~b>)), '256'>))
        >
   )
   ]

  // loop breaker: [5]
  /*
  rule (modulo AC) S_1_KC:
     [
     In( <$C, ~nc, $pc, z, 
          senc(~data,
               HKDFExpand1(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                            'early_data_key_expansion', h(<h(<~nc, $pc, z>), h(config_hash)>), 
                            '256'>))
         >
     ),
     ServerDH( $S, ~y2 ), !Ltk( $S, ~ltkS ), Fr( ~ns ), Fr( ~b ),
     ServerConfig( $S, ~y, config_hash )
     ]
    --[
    S1_KC( ~ns ), Start( ~ns, $S, 'server' ), UseLtk( $S, ~ltkS ),
    SignData( $S,
              <
               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                pk(~ltkS)>, 
               'server_cert_verify'>
    ),
    UseServerConfig( $S, ~y, config_hash ),
    RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
    RunningSecrets( $S, $C, 'server', <z.1, z.2> ),
    RunningTranscript( $S, $C, 'server',
                       <
                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                         pk(~ltkS)>, 
                        sign(<
                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                               pk(~ltkS)>, 
                              'server_cert_verify'>,
                             ~ltkS)
                       >
    ),
    RunningKC( $S, $C, 'server',
               <'g'^~y2, h(<'g'^~y2, $cert_req, pk(~ltkS)>)>
    ),
    Neq( a, one ), DH( $S, ~b ), DHChal( ~y, a, 'g'^~y, z, z.1 ),
    DHChal( ~b, a, 'g'^~b, z, z.2 )
    ]->
     [
     F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, z.1, z.2,
                    <
                     <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                      pk(~ltkS)>, 
                     sign(<
                           <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                            pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >,
                    h(<'g'^~y2, $cert_req, pk(~ltkS)>), 'no_auth'
     ),
     DHExp( $S, ~b ),
     ServerConfig( $S, ~y, h(<'g'^~y2, $cert_req, pk(~ltkS)>) ),
     Out( <$S, ~ns, $ps, 'g'^~b, 
           senc(<
                 <$exts, 'g'^~y2, $cert_req, pk(~ltkS), 
                  sign(<
                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>,
                       ~ltkS)
                 >, 
                 hmac(<
                       HKDFExpand(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                                   'finished_secret', 
                                   h(h(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                         $cert_req, pk(~ltkS)>, 
                                        sign(<
                                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                               $cert_req, pk(~ltkS)>, 
                                              'server_cert_verify'>,
                                             ~ltkS)
                                       >)), 
                                   '256'>), 
                       'server_finished', 
                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                        pk(~ltkS)>, 
                       sign(<
                             <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                              pk(~ltkS)>, 
                             'server_cert_verify'>,
                            ~ltkS)
                      >)
                >,
                HKDFExpand2(<HKDF(<'0', z.2, 'extractedES', '256'>), 
                             'handshake_key_expansion', 
                             h(h(<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>)), '256'>))
          >
     )
     ]
    variants (modulo AC)
     1. ~b    = ~b.24
        ~y    = ~b.24
        a     = inv(~b.24)
        z     = 'g'^inv(~b.24)
        z.1   = 'g'
        z.2   = 'g'
    
     2. ~b    = ~b.29
        ~y    = ~y.34
        a     = inv(~b.29)
        z     = 'g'^inv(~b.29)
        z.1   = 'g'^(~y.34*inv(~b.29))
        z.2   = 'g'
    
     3. ~b    = ~b.29
        ~y    = ~y.34
        a     = inv(~y.34)
        z     = 'g'^inv(~y.34)
        z.1   = 'g'
        z.2   = 'g'^(~b.29*inv(~y.34))
    
     4. ~b    = ~b.29
        ~y    = ~y.34
        a     = inv((~b.29*~y.34))
        z     = 'g'^inv((~b.29*~y.34))
        z.1   = 'g'^inv(~b.29)
        z.2   = 'g'^inv(~y.34)
    
     5. ~b    = ~b.29
        ~y    = ~y.34
        a     = one
        z     = 'g'
        z.1   = 'g'^~y.34
        z.2   = 'g'^~b.29
    
     6. ~b    = ~b.31
        ~y    = ~y.36
        a     = a.38
        z     = 'g'^a.38
        z.1   = 'g'^(~y.36*a.38)
        z.2   = 'g'^(~b.31*a.38)
    
     7. ~b    = ~b.697
        ~y    = ~b.697
        a     = inv((~b.697*x.1386))
        z     = 'g'^inv((~b.697*x.1386))
        z.1   = 'g'^inv(x.1386)
        z.2   = 'g'^inv(x.1386)
    
     8. ~b    = ~b.697
        ~y    = ~b.697
        a     = (x.1386*inv(~b.697))
        z     = 'g'^(x.1386*inv(~b.697))
        z.1   = 'g'^x.1386
        z.2   = 'g'^x.1386
    
     9. ~b    = ~b.697
        ~y    = ~y.702
        a     = inv((~b.697*x.1386))
        z     = 'g'^inv((~b.697*x.1386))
        z.1   = 'g'^(~y.702*inv((~b.697*x.1386)))
        z.2   = 'g'^inv(x.1386)
    
    10. ~b    = ~b.697
        ~y    = ~y.702
        a     = inv((~y.702*x.1386))
        z     = 'g'^inv((~y.702*x.1386))
        z.1   = 'g'^inv(x.1386)
        z.2   = 'g'^(~b.697*inv((~y.702*x.1386)))
    
    11. ~b    = ~b.697
        ~y    = ~y.702
        a     = (x.1386*inv(~b.697))
        z     = 'g'^(x.1386*inv(~b.697))
        z.1   = 'g'^(~y.702*x.1386*inv(~b.697))
        z.2   = 'g'^x.1386
    
    12. ~b    = ~b.697
        ~y    = ~y.702
        a     = (x.1386*inv(~y.702))
        z     = 'g'^(x.1386*inv(~y.702))
        z.1   = 'g'^x.1386
        z.2   = 'g'^(~b.697*x.1386*inv(~y.702))
    
    13. ~b    = ~b.698
        ~y    = ~b.698
        a     = (x.1388*inv((~b.698*x.1387)))
        z     = 'g'^(x.1388*inv((~b.698*x.1387)))
        z.1   = 'g'^(x.1388*inv(x.1387))
        z.2   = 'g'^(x.1388*inv(x.1387))
    
    14. ~b    = ~b.698
        ~y    = ~y.703
        a     = inv((~b.698*~y.703*x.1388))
        z     = 'g'^inv((~b.698*~y.703*x.1388))
        z.1   = 'g'^inv((~b.698*x.1388))
        z.2   = 'g'^inv((~y.703*x.1388))
    
    15. ~b    = ~b.698
        ~y    = ~y.703
        a     = (x.1388*inv((~b.698*~y.703)))
        z     = 'g'^(x.1388*inv((~b.698*~y.703)))
        z.1   = 'g'^(x.1388*inv(~b.698))
        z.2   = 'g'^(x.1388*inv(~y.703))
    
    16. ~b    = ~b.698
        ~y    = ~y.703
        a     = (x.1388*inv((~b.698*x.1387)))
        z     = 'g'^(x.1388*inv((~b.698*x.1387)))
        z.1   = 'g'^(~y.703*x.1388*inv((~b.698*x.1387)))
        z.2   = 'g'^(x.1388*inv(x.1387))
    
    17. ~b    = ~b.698
        ~y    = ~y.703
        a     = (x.1388*inv((~y.703*x.1387)))
        z     = 'g'^(x.1388*inv((~y.703*x.1387)))
        z.1   = 'g'^(x.1388*inv(x.1387))
        z.2   = 'g'^(~b.698*x.1388*inv((~y.703*x.1387)))
    
    18. ~b    = ~b.699
        ~y    = ~y.704
        a     = (x.1390*inv((~b.699*~y.704*x.1389)))
        z     = 'g'^(x.1390*inv((~b.699*~y.704*x.1389)))
        z.1   = 'g'^(x.1390*inv((~b.699*x.1389)))
        z.2   = 'g'^(x.1390*inv((~y.704*x.1389)))
    // loop breaker: [5]
  */

rule (modulo E) C_2_KC:
   [
   F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                     config_hash, auth_status
   ),
   !Pk( $S, pk(~ltkS) ),
   In( <$S, ~ns, $ps, 'g'^b, 
        senc(<<$exts, 'g'^y, $cert_req, pk(~ltkS), s_signature>, server_fin
             >,
             HKDFExpand2(<HKDF(<'0', 'g'^b^~a, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, 'g'^b>)), 
                          '256'>))
       >
   )
   ]
  --[
  C2_KC( ~nc ), Instance( ~nc, $C, 'client' ),
  UsePK( $S, pk(~ltkS) ),
  RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
  RunningSecrets( $C, $S, 'client', <ss, 'g'^b^~a> ),
  CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
  CommitES( $C, $S, 'client', 'g'^b^~a ),
  Eq( verify(s_signature,
             <
              <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
               pk(~ltkS)>, 
              'server_cert_verify'>,
             pk(~ltkS)),
      true
  ),
  Eq( server_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                        'finished_secret', 
                        h(h(<
                             <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
                              pk(~ltkS)>, 
                             s_signature>)), 
                        '256'>), 
            'server_finished', 
            <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
             pk(~ltkS)>, 
            s_signature>)
  ),
  Neq( b, one ), Neq( y, one ),
  DHChal( ~a, b, 'g'^~a, 'g'^b, 'g'^b^~a )
  ]->
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, 'g'^b^~a,
                   <
                    <<prev_messages, ~ns, $ps, 'g'^b>, $exts, 'g'^y, $cert_req, 
                     pk(~ltkS)>, 
                    s_signature>,
                   h(<'g'^y, $cert_req, pk(~ltkS)>), auth_status
   ),
   KnownConfig( $C, $S, 'g'^y, h(<'g'^y, $cert_req, pk(~ltkS)>) )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) C_2_KC:
     [
     F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                       config_hash, auth_status
     ),
     !Pk( $S, pk(~ltkS) ),
     In( <$S, ~ns, $ps, z, 
          senc(<<$exts, z.1, $cert_req, pk(~ltkS), s_signature>, server_fin>,
               HKDFExpand2(<HKDF(<'0', z.2, 'extractedES', '256'>), 
                            'handshake_key_expansion', h(h(<prev_messages, ~ns, $ps, z>)), 
                            '256'>))
         >
     )
     ]
    --[
    C2_KC( ~nc ), Instance( ~nc, $C, 'client' ),
    UsePK( $S, pk(~ltkS) ),
    RunningNonces( $C, $S, 'client', <~nc, ~ns> ),
    RunningSecrets( $C, $S, 'client', <ss, z.2> ),
    CommitNonces( $C, $S, 'client', <~nc, ~ns> ),
    CommitES( $C, $S, 'client', z.2 ), Eq( z.3, true ),
    Eq( server_fin,
        hmac(<
              HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                          'finished_secret', 
                          h(h(<
                               <<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                               s_signature>)), 
                          '256'>), 
              'server_finished', 
              <<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
              s_signature>)
    ),
    Neq( b, one ), Neq( y, one ), DHChal( ~a, b, 'g'^~a, z, z.2 )
    ]->
     [
     F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, z.2,
                     <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                      s_signature>,
                     h(<z.1, $cert_req, pk(~ltkS)>), auth_status
     ),
     KnownConfig( $C, $S, z.1, h(<z.1, $cert_req, pk(~ltkS)>) )
     ]
    variants (modulo AC)
     1. $cert_req
              = $cert_req.40
        $exts = $exts.41
        $ps   = $ps.43
        ~a    = ~a.44
        ~ltkS = ~ltkS.45
        ~ns   = ~ns.47
        b     = b.49
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.47, $ps.43, 'g'^b.49>, $exts.41, 'g', 
                       $cert_req.40, pk(~ltkS.45)>, 
                      'server_cert_verify'>,
                     ~ltkS.45)
        y     = one
        z     = 'g'^b.49
        z.1   = 'g'
        z.2   = 'g'^(~a.44*b.49)
        z.3   = true
    
     2. $cert_req
              = $cert_req.40
        $exts = $exts.41
        $ps   = $ps.43
        ~a    = ~a.44
        ~ltkS = ~ltkS.45
        ~ns   = ~ns.47
        b     = inv(~a.44)
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.47, $ps.43, 'g'^inv(~a.44)>, $exts.41, 
                       'g', $cert_req.40, pk(~ltkS.45)>, 
                      'server_cert_verify'>,
                     ~ltkS.45)
        y     = one
        z     = 'g'^inv(~a.44)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = true
    
     3. $cert_req
              = $cert_req.40
        $exts = $exts.41
        $ps   = $ps.43
        ~a    = ~a.44
        ~ltkS = ~ltkS.45
        ~ns   = ~ns.47
        b     = one
        prev_messages
              = prev_messages.51
        s_signature
              = sign(<
                      <<prev_messages.51, ~ns.47, $ps.43, 'g'>, $exts.41, 'g', 
                       $cert_req.40, pk(~ltkS.45)>, 
                      'server_cert_verify'>,
                     ~ltkS.45)
        y     = one
        z     = 'g'
        z.1   = 'g'
        z.2   = 'g'^~a.44
        z.3   = true
    
     4. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = b.50
        prev_messages
              = prev_messages.52
        s_signature
              = s_signature.53
        y     = one
        z     = 'g'^b.50
        z.1   = 'g'
        z.2   = 'g'^(~a.45*b.50)
        z.3   = verify(s_signature.53,
                       <
                        <<prev_messages.52, ~ns.48, $ps.44, 'g'^b.50>, $exts.42, 'g', 
                         $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
     5. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = inv(~a.45)
        prev_messages
              = prev_messages.52
        s_signature
              = s_signature.53
        y     = one
        z     = 'g'^inv(~a.45)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = verify(s_signature.53,
                       <
                        <<prev_messages.52, ~ns.48, $ps.44, 'g'^inv(~a.45)>, $exts.42, 
                         'g', $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
     6. $cert_req
              = $cert_req.41
        $exts = $exts.42
        $ps   = $ps.44
        ~a    = ~a.45
        ~ltkS = ~ltkS.46
        ~ns   = ~ns.48
        b     = one
        prev_messages
              = prev_messages.52
        s_signature
              = s_signature.53
        y     = one
        z     = 'g'
        z.1   = 'g'
        z.2   = 'g'^~a.45
        z.3   = verify(s_signature.53,
                       <
                        <<prev_messages.52, ~ns.48, $ps.44, 'g'>, $exts.42, 'g', 
                         $cert_req.41, pk(~ltkS.46)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.46))
    
     7. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = b.53
        prev_messages
              = prev_messages.55
        s_signature
              = s_signature.56
        y     = y.59
        z     = 'g'^b.53
        z.1   = 'g'^y.59
        z.2   = 'g'^(~a.48*b.53)
        z.3   = verify(s_signature.56,
                       <
                        <<prev_messages.55, ~ns.51, $ps.47, 'g'^b.53>, $exts.45, 'g'^y.59, 
                         $cert_req.44, pk(~ltkS.49)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.49))
    
     8. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = b.53
        prev_messages
              = prev_messages.55
        s_signature
              = sign(<
                      <<prev_messages.55, ~ns.51, $ps.47, 'g'^b.53>, $exts.45, 'g'^y.59, 
                       $cert_req.44, pk(~ltkS.49)>, 
                      'server_cert_verify'>,
                     ~ltkS.49)
        y     = y.59
        z     = 'g'^b.53
        z.1   = 'g'^y.59
        z.2   = 'g'^(~a.48*b.53)
        z.3   = true
    
     9. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = inv(~a.48)
        prev_messages
              = prev_messages.55
        s_signature
              = s_signature.56
        y     = y.59
        z     = 'g'^inv(~a.48)
        z.1   = 'g'^y.59
        z.2   = 'g'
        z.3   = verify(s_signature.56,
                       <
                        <<prev_messages.55, ~ns.51, $ps.47, 'g'^inv(~a.48)>, $exts.45, 
                         'g'^y.59, $cert_req.44, pk(~ltkS.49)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.49))
    
    10. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = inv(~a.48)
        prev_messages
              = prev_messages.55
        s_signature
              = sign(<
                      <<prev_messages.55, ~ns.51, $ps.47, 'g'^inv(~a.48)>, $exts.45, 
                       'g'^y.59, $cert_req.44, pk(~ltkS.49)>, 
                      'server_cert_verify'>,
                     ~ltkS.49)
        y     = y.59
        z     = 'g'^inv(~a.48)
        z.1   = 'g'^y.59
        z.2   = 'g'
        z.3   = true
    
    11. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = one
        prev_messages
              = prev_messages.55
        s_signature
              = s_signature.56
        y     = y.59
        z     = 'g'
        z.1   = 'g'^y.59
        z.2   = 'g'^~a.48
        z.3   = verify(s_signature.56,
                       <
                        <<prev_messages.55, ~ns.51, $ps.47, 'g'>, $exts.45, 'g'^y.59, 
                         $cert_req.44, pk(~ltkS.49)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.49))
    
    12. $cert_req
              = $cert_req.44
        $exts = $exts.45
        $ps   = $ps.47
        ~a    = ~a.48
        ~ltkS = ~ltkS.49
        ~ns   = ~ns.51
        b     = one
        prev_messages
              = prev_messages.55
        s_signature
              = sign(<
                      <<prev_messages.55, ~ns.51, $ps.47, 'g'>, $exts.45, 'g'^y.59, 
                       $cert_req.44, pk(~ltkS.49)>, 
                      'server_cert_verify'>,
                     ~ltkS.49)
        y     = y.59
        z     = 'g'
        z.1   = 'g'^y.59
        z.2   = 'g'^~a.48
        z.3   = true
    
    13. $cert_req
              = $cert_req.366
        $exts = $exts.367
        $ps   = $ps.369
        ~a    = ~a.370
        ~ltkS = ~ltkS.371
        ~ns   = ~ns.373
        b     = inv((~a.370*x.728))
        prev_messages
              = prev_messages.377
        s_signature
              = s_signature.378
        y     = y.381
        z     = 'g'^inv((~a.370*x.728))
        z.1   = 'g'^y.381
        z.2   = 'g'^inv(x.728)
        z.3   = verify(s_signature.378,
                       <
                        <<prev_messages.377, ~ns.373, $ps.369, 'g'^inv((~a.370*x.728))>, 
                         $exts.367, 'g'^y.381, $cert_req.366, pk(~ltkS.371)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.371))
    
    14. $cert_req
              = $cert_req.366
        $exts = $exts.367
        $ps   = $ps.369
        ~a    = ~a.370
        ~ltkS = ~ltkS.371
        ~ns   = ~ns.373
        b     = inv((~a.370*x.728))
        prev_messages
              = prev_messages.377
        s_signature
              = s_signature.378
        y     = one
        z     = 'g'^inv((~a.370*x.728))
        z.1   = 'g'
        z.2   = 'g'^inv(x.728)
        z.3   = verify(s_signature.378,
                       <
                        <<prev_messages.377, ~ns.373, $ps.369, 'g'^inv((~a.370*x.728))>, 
                         $exts.367, 'g', $cert_req.366, pk(~ltkS.371)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.371))
    
    15. $cert_req
              = $cert_req.366
        $exts = $exts.367
        $ps   = $ps.369
        ~a    = ~a.370
        ~ltkS = ~ltkS.371
        ~ns   = ~ns.373
        b     = (x.728*inv(~a.370))
        prev_messages
              = prev_messages.377
        s_signature
              = s_signature.378
        y     = y.381
        z     = 'g'^(x.728*inv(~a.370))
        z.1   = 'g'^y.381
        z.2   = 'g'^x.728
        z.3   = verify(s_signature.378,
                       <
                        <<prev_messages.377, ~ns.373, $ps.369, 'g'^(x.728*inv(~a.370))>, 
                         $exts.367, 'g'^y.381, $cert_req.366, pk(~ltkS.371)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.371))
    
    16. $cert_req
              = $cert_req.366
        $exts = $exts.367
        $ps   = $ps.369
        ~a    = ~a.370
        ~ltkS = ~ltkS.371
        ~ns   = ~ns.373
        b     = (x.728*inv(~a.370))
        prev_messages
              = prev_messages.377
        s_signature
              = s_signature.378
        y     = one
        z     = 'g'^(x.728*inv(~a.370))
        z.1   = 'g'
        z.2   = 'g'^x.728
        z.3   = verify(s_signature.378,
                       <
                        <<prev_messages.377, ~ns.373, $ps.369, 'g'^(x.728*inv(~a.370))>, 
                         $exts.367, 'g', $cert_req.366, pk(~ltkS.371)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.371))
    
    17. $cert_req
              = $cert_req.367
        $exts = $exts.368
        $ps   = $ps.370
        ~a    = ~a.371
        ~ltkS = ~ltkS.372
        ~ns   = ~ns.374
        b     = (x.730*inv((~a.371*x.729)))
        prev_messages
              = prev_messages.378
        s_signature
              = s_signature.379
        y     = y.382
        z     = 'g'^(x.730*inv((~a.371*x.729)))
        z.1   = 'g'^y.382
        z.2   = 'g'^(x.730*inv(x.729))
        z.3   = verify(s_signature.379,
                       <
                        <
                         <prev_messages.378, ~ns.374, $ps.370, 
                          'g'^(x.730*inv((~a.371*x.729)))>, 
                         $exts.368, 'g'^y.382, $cert_req.367, pk(~ltkS.372)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.372))
    
    18. $cert_req
              = $cert_req.367
        $exts = $exts.368
        $ps   = $ps.370
        ~a    = ~a.371
        ~ltkS = ~ltkS.372
        ~ns   = ~ns.374
        b     = (x.730*inv((~a.371*x.729)))
        prev_messages
              = prev_messages.378
        s_signature
              = s_signature.379
        y     = one
        z     = 'g'^(x.730*inv((~a.371*x.729)))
        z.1   = 'g'
        z.2   = 'g'^(x.730*inv(x.729))
        z.3   = verify(s_signature.379,
                       <
                        <
                         <prev_messages.378, ~ns.374, $ps.370, 
                          'g'^(x.730*inv((~a.371*x.729)))>, 
                         $exts.368, 'g', $cert_req.367, pk(~ltkS.372)>, 
                        'server_cert_verify'>,
                       pk(~ltkS.372))
    
    19. $cert_req
              = $cert_req.372
        $exts = $exts.373
        $ps   = $ps.375
        ~a    = ~a.376
        ~ltkS = ~ltkS.377
        ~ns   = ~ns.379
        b     = inv((~a.376*x.740))
        prev_messages
              = prev_messages.383
        s_signature
              = sign(<
                      <<prev_messages.383, ~ns.379, $ps.375, 'g'^inv((~a.376*x.740))>, 
                       $exts.373, 'g', $cert_req.372, pk(~ltkS.377)>, 
                      'server_cert_verify'>,
                     ~ltkS.377)
        y     = one
        z     = 'g'^inv((~a.376*x.740))
        z.1   = 'g'
        z.2   = 'g'^inv(x.740)
        z.3   = true
    
    20. $cert_req
              = $cert_req.372
        $exts = $exts.373
        $ps   = $ps.375
        ~a    = ~a.376
        ~ltkS = ~ltkS.377
        ~ns   = ~ns.379
        b     = (x.740*inv(~a.376))
        prev_messages
              = prev_messages.383
        s_signature
              = sign(<
                      <<prev_messages.383, ~ns.379, $ps.375, 'g'^(x.740*inv(~a.376))>, 
                       $exts.373, 'g', $cert_req.372, pk(~ltkS.377)>, 
                      'server_cert_verify'>,
                     ~ltkS.377)
        y     = one
        z     = 'g'^(x.740*inv(~a.376))
        z.1   = 'g'
        z.2   = 'g'^x.740
        z.3   = true
    
    21. $cert_req
              = $cert_req.373
        $exts = $exts.374
        $ps   = $ps.376
        ~a    = ~a.377
        ~ltkS = ~ltkS.378
        ~ns   = ~ns.380
        b     = inv((~a.377*x.742))
        prev_messages
              = prev_messages.384
        s_signature
              = sign(<
                      <<prev_messages.384, ~ns.380, $ps.376, 'g'^inv((~a.377*x.742))>, 
                       $exts.374, 'g'^y.388, $cert_req.373, pk(~ltkS.378)>, 
                      'server_cert_verify'>,
                     ~ltkS.378)
        y     = y.388
        z     = 'g'^inv((~a.377*x.742))
        z.1   = 'g'^y.388
        z.2   = 'g'^inv(x.742)
        z.3   = true
    
    22. $cert_req
              = $cert_req.373
        $exts = $exts.374
        $ps   = $ps.376
        ~a    = ~a.377
        ~ltkS = ~ltkS.378
        ~ns   = ~ns.380
        b     = (x.742*inv(~a.377))
        prev_messages
              = prev_messages.384
        s_signature
              = sign(<
                      <<prev_messages.384, ~ns.380, $ps.376, 'g'^(x.742*inv(~a.377))>, 
                       $exts.374, 'g'^y.388, $cert_req.373, pk(~ltkS.378)>, 
                      'server_cert_verify'>,
                     ~ltkS.378)
        y     = y.388
        z     = 'g'^(x.742*inv(~a.377))
        z.1   = 'g'^y.388
        z.2   = 'g'^x.742
        z.3   = true
    
    23. $cert_req
              = $cert_req.373
        $exts = $exts.374
        $ps   = $ps.376
        ~a    = ~a.377
        ~ltkS = ~ltkS.378
        ~ns   = ~ns.380
        b     = (x.742*inv((~a.377*x.741)))
        prev_messages
              = prev_messages.384
        s_signature
              = sign(<
                      <
                       <prev_messages.384, ~ns.380, $ps.376, 
                        'g'^(x.742*inv((~a.377*x.741)))>, 
                       $exts.374, 'g', $cert_req.373, pk(~ltkS.378)>, 
                      'server_cert_verify'>,
                     ~ltkS.378)
        y     = one
        z     = 'g'^(x.742*inv((~a.377*x.741)))
        z.1   = 'g'
        z.2   = 'g'^(x.742*inv(x.741))
        z.3   = true
    
    24. $cert_req
              = $cert_req.374
        $exts = $exts.375
        $ps   = $ps.377
        ~a    = ~a.378
        ~ltkS = ~ltkS.379
        ~ns   = ~ns.381
        b     = (x.744*inv((~a.378*x.743)))
        prev_messages
              = prev_messages.385
        s_signature
              = sign(<
                      <
                       <prev_messages.385, ~ns.381, $ps.377, 
                        'g'^(x.744*inv((~a.378*x.743)))>, 
                       $exts.375, 'g'^y.389, $cert_req.374, pk(~ltkS.379)>, 
                      'server_cert_verify'>,
                     ~ltkS.379)
        y     = y.389
        z     = 'g'^(x.744*inv((~a.378*x.743)))
        z.1   = 'g'^y.389
        z.2   = 'g'^(x.744*inv(x.743))
        z.3   = true
    // loop breaker: [0]
  */

rule (modulo E) S_1_AuthReq:
   [
   F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'no_auth'
   )
   ]
  --[ S1_AuthReq( ~ns ), Instance( ~ns, $S, 'server' ) ]->
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'auth_req'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_NoAuth:
   [
   F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, auth_status
   )
   ]
  --[ S1_NoAuth( ~ns ), Instance( ~ns, $S, 'server' ) ]->
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'no_auth'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_2_NoAuth:
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                   prev_messages, config_hash, auth_status
   )
   ]
  --[
  C2_NoAuth( ~nc ), Instance( ~nc, $C, 'client' ),
  RunningSecrets( $C, $S, 'client', <ss, es> ),
  RunningTranscript( $C, $S, 'client', prev_messages ),
  CommitTranscript( $C, $S, 'client', prev_messages ),
  SessionKey( $C, $S, 'client',
              <
               HKDFExpand1(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(prev_messages)), '256'>), 
               'authenticated'>
  ),
  SessionKey( $C, $S, 'client',
              <
               HKDFExpand2(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', h(h(prev_messages)), '256'>), 
               'authenticated'>
  )
  ]->
   [
   F_St_C_2_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  prev_messages, config_hash, auth_status
   ),
   Out( <$C, 
         senc(hmac(<
                    HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                'finished_secret', h(h(prev_messages)), '256'>), 
                    'client_finished', prev_messages>),
              HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                           'handshake_key_expansion', h(h(prev_messages)), '256'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_2_Auth:
   [
   F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                   prev_messages, config_hash, 'no_auth'
   ),
   !Ltk( $C, ~ltkC )
   ]
  --[
  C2_Auth( ~nc ), Instance( ~nc, $C, 'client' ), UseLtk( $C, ~ltkC ),
  SignData( $C, <<prev_messages, pk(~ltkC)>, 'client_cert_verify'> ),
  RunningSecrets( $C, $S, 'client', <ss, es> ),
  RunningTranscript( $C, $S, 'client',
                     <<prev_messages, pk(~ltkC)>, 
                      sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC)>
  ),
  CommitTranscript( $C, $S, 'client', prev_messages ),
  SessionKey( $C, $S, 'client',
              <
               HKDFExpand1(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', 
                            h(h(<<prev_messages, pk(~ltkC)>, 
                                 sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC)
                                >)), 
                            '256'>), 
               'authenticated'>
  ),
  SessionKey( $C, $S, 'client',
              <
               HKDFExpand2(<
                            HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                            'application_data_key_expansion', 
                            h(h(<<prev_messages, pk(~ltkC)>, 
                                 sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC)
                                >)), 
                            '256'>), 
               'authenticated'>
  )
  ]->
   [
   F_St_C_2_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  <<prev_messages, pk(~ltkC)>, 
                   sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC)>,
                  config_hash, 'auth_sent'
   ),
   Out( <$C, 
         senc(<pk(~ltkC), 
               sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC), 
               hmac(<
                     HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                 'finished_secret', 
                                 h(h(<<prev_messages, pk(~ltkC)>, 
                                      sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>,
                                           ~ltkC)
                                     >)), 
                                 '256'>), 
                     'client_finished', <prev_messages, pk(~ltkC)>, 
                     sign(<<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, ~ltkC)>)
              >,
              HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                           'handshake_key_expansion', h(h(prev_messages)), '256'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_2_RecvAuth:
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  prev_messages, config_hash, 'auth_req'
   ),
   In( <$C, 
        senc(<pk(~ltkC), c_signature, client_fin>,
             HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                          'handshake_key_expansion', h(h(prev_messages)), '256'>))
       >
   ),
   !Pk( $C, pk(~ltkC) )
   ]
  --[
  S2_RecvAuth( ~ns ), UsePK( $C, pk(~ltkC) ),
  Instance( ~ns, $S, 'server' ),
  Eq( verify(c_signature,
             <<prev_messages, pk(~ltkC)>, 'client_cert_verify'>, pk(~ltkC)),
      true
  ),
  Eq( client_fin,
      hmac(<
            HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                        'finished_secret', 
                        h(h(<<prev_messages, pk(~ltkC)>, c_signature>)), '256'>), 
            'client_finished', <prev_messages, pk(~ltkC)>, c_signature>)
  ),
  RunningTranscript( $S, $C, 'server',
                     <<prev_messages, pk(~ltkC)>, c_signature>
  ),
  RunningSecrets( $S, $C, 'server', <ss, es> )
  ]->
   [
   F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                  <<prev_messages, pk(~ltkC)>, c_signature>, config_hash, 'auth_recv'
   )
   ]

  /*
  rule (modulo AC) S_2_RecvAuth:
     [
     F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                    prev_messages, config_hash, 'auth_req'
     ),
     In( <$C, 
          senc(<pk(~ltkC), c_signature, client_fin>,
               HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                            'handshake_key_expansion', h(h(prev_messages)), '256'>))
         >
     ),
     !Pk( $C, pk(~ltkC) )
     ]
    --[
    S2_RecvAuth( ~ns ), UsePK( $C, pk(~ltkC) ),
    Instance( ~ns, $S, 'server' ), Eq( z, true ),
    Eq( client_fin,
        hmac(<
              HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                          'finished_secret', 
                          h(h(<<prev_messages, pk(~ltkC)>, c_signature>)), '256'>), 
              'client_finished', <prev_messages, pk(~ltkC)>, c_signature>)
    ),
    RunningTranscript( $S, $C, 'server',
                       <<prev_messages, pk(~ltkC)>, c_signature>
    ),
    RunningSecrets( $S, $C, 'server', <ss, es> )
    ]->
     [
     F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                    <<prev_messages, pk(~ltkC)>, c_signature>, config_hash, 'auth_recv'
     )
     ]
    variants (modulo AC)
    1. ~ltkC = ~ltkC.30
       c_signature
             = c_signature.33
       prev_messages
             = prev_messages.37
       z     = verify(c_signature.33,
                      <<prev_messages.37, pk(~ltkC.30)>, 'client_cert_verify'>,
                      pk(~ltkC.30))
    
    2. ~ltkC = ~ltkC.30
       c_signature
             = sign(<<prev_messages.37, pk(~ltkC.30)>, 'client_cert_verify'>,
                    ~ltkC.30)
       prev_messages
             = prev_messages.37
       z     = true
  */

rule (modulo E) C_1_KC_Auth:
   [
   F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss, prev_messages,
                     config_hash, 'no_auth'
   ),
   !Ltk( $C, ~ltkC )
   ]
  --[
  C1_KC_Auth( ~nc ), Instance( ~nc, $C, 'client' ),
  UseLtk( $C, ~ltkC ),
  SignData( $C, <<prev_messages, config_hash>, 'client_cert_verify'>
  )
  ]->
   [
   F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                     <prev_messages, pk(~ltkC), 
                      sign(<<prev_messages, config_hash>, 'client_cert_verify'>, ~ltkC)>,
                     config_hash, 'auth_sent'
   ),
   Out( <$C, 
         senc(<pk(~ltkC), 
               sign(<<prev_messages, config_hash>, 'client_cert_verify'>, ~ltkC)>,
              HKDFExpand1(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                           'early_data_key_expansion', h(<h(prev_messages), h(config_hash)>), 
                           '256'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_KC_RecvAuth:
   [
   In( <$C, ~nc, $pc, 'g'^a, 
        senc(~data,
             HKDFExpand1(<HKDF(<'0', 'g'^a^~y, 'extractedSS', '256'>), 
                          'early_data_key_expansion', 
                          h(<h(<~nc, $pc, 'g'^a>), h(config_hash)>), '256'>))
       >
   ),
   In( <$C, 
        senc(<pk(~ltkC), c_signature>,
             HKDFExpand1(<HKDF(<'0', 'g'^a^~y, 'extractedSS', '256'>), 
                          'early_data_key_expansion', 
                          h(<h(<~nc, $pc, 'g'^a>), h(config_hash)>), '256'>))
       >
   ),
   ServerDH( $S, ~y2 ), !Ltk( $S, ~ltkS ), !Pk( $C, pk(~ltkC) ),
   Fr( ~ns ), Fr( ~b ), ServerConfig( $S, ~y, config_hash )
   ]
  --[
  S1_KC_RecvAuth( ~ns ), Start( ~ns, $S, 'server' ),
  UseLtk( $S, ~ltkS ),
  SignData( $S,
            <
             <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
              $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
             'server_cert_verify'>
  ),
  UseServerConfig( $S, ~y, config_hash ),
  RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
  RunningSecrets( $S, $C, 'server', <'g'^a^~y, 'g'^a^~b> ),
  RunningTranscript( $S, $C, 'server',
                     <
                      <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                       $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                      sign(<
                            <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                             $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                            'server_cert_verify'>,
                           ~ltkS)
                     >
  ),
  RunningKC( $S, $C, 'server',
             <'g'^~y2, h(<'g'^~y2, $cert_req, pk(~ltkS)>)>
  ),
  UsePK( $C, pk(~ltkC) ),
  Eq( verify(c_signature,
             <<<~nc, $pc, 'g'^a>, config_hash>, 'client_cert_verify'>,
             pk(~ltkC)),
      true
  ),
  Neq( a, one ), DH( $S, ~b ),
  DHChal( ~y, a, 'g'^~y, 'g'^a, 'g'^a^~y ),
  DHChal( ~b, a, 'g'^~b, 'g'^a, 'g'^a^~b )
  ]->
   [
   F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, 'g'^a^~y, 'g'^a^~b,
                  <
                   <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                    $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                   sign(<
                         <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                          $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                         'server_cert_verify'>,
                        ~ltkS)
                  >,
                  h(<'g'^~y2, $cert_req, pk(~ltkS)>), 'auth_recv'
   ),
   DHExp( $S, ~b ),
   ServerConfig( $S, ~y, h(<'g'^~y2, $cert_req, pk(~ltkS)>) ),
   Out( <$S, ~ns, $ps, 'g'^~b, 
         senc(<
               <$exts, 'g'^~y2, $cert_req, pk(~ltkS), 
                sign(<
                      <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                       $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                      'server_cert_verify'>,
                     ~ltkS)
               >, 
               hmac(<
                     HKDFExpand(<HKDF(<'0', 'g'^a^~y, 'extractedSS', '256'>), 
                                 'finished_secret', 
                                 h(h(<
                                      <
                                       <<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 
                                        'g'^~b>, 
                                       $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                                      sign(<
                                            <
                                             <<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, 
                                              $ps, 'g'^~b>, 
                                             $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                                            'server_cert_verify'>,
                                           ~ltkS)
                                     >)), 
                                 '256'>), 
                     'server_finished', 
                     <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                      $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                     sign(<
                           <<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                            $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >)
              >,
              HKDFExpand2(<HKDF(<'0', 'g'^a^~b, 'extractedES', '256'>), 
                           'handshake_key_expansion', 
                           h(h(<<<~nc, $pc, 'g'^a>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b
                               >)), 
                           '256'>))
        >
   )
   ]

  // loop breaker: [7]
  /*
  rule (modulo AC) S_1_KC_RecvAuth:
     [
     In( <$C, ~nc, $pc, z, 
          senc(~data,
               HKDFExpand1(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                            'early_data_key_expansion', h(<h(<~nc, $pc, z>), h(config_hash)>), 
                            '256'>))
         >
     ),
     In( <$C, 
          senc(<pk(~ltkC), c_signature>,
               HKDFExpand1(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                            'early_data_key_expansion', h(<h(<~nc, $pc, z>), h(config_hash)>), 
                            '256'>))
         >
     ),
     ServerDH( $S, ~y2 ), !Ltk( $S, ~ltkS ), !Pk( $C, pk(~ltkC) ),
     Fr( ~ns ), Fr( ~b ), ServerConfig( $S, ~y, config_hash )
     ]
    --[
    S1_KC_RecvAuth( ~ns ), Start( ~ns, $S, 'server' ),
    UseLtk( $S, ~ltkS ),
    SignData( $S,
              <
               <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
               'server_cert_verify'>
    ),
    UseServerConfig( $S, ~y, config_hash ),
    RunningNonces( $S, $C, 'server', <~nc, ~ns> ),
    RunningSecrets( $S, $C, 'server', <z.1, z.2> ),
    RunningTranscript( $S, $C, 'server',
                       <
                        <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                         $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                        sign(<
                              <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                               $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                              'server_cert_verify'>,
                             ~ltkS)
                       >
    ),
    RunningKC( $S, $C, 'server',
               <'g'^~y2, h(<'g'^~y2, $cert_req, pk(~ltkS)>)>
    ),
    UsePK( $C, pk(~ltkC) ), Eq( z.3, true ), Neq( a, one ),
    DH( $S, ~b ), DHChal( ~y, a, 'g'^~y, z, z.1 ),
    DHChal( ~b, a, 'g'^~b, z, z.2 )
    ]->
     [
     F_St_S_0_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, z.1, z.2,
                    <
                     <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                      $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                     sign(<
                           <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                            $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                           'server_cert_verify'>,
                          ~ltkS)
                    >,
                    h(<'g'^~y2, $cert_req, pk(~ltkS)>), 'auth_recv'
     ),
     DHExp( $S, ~b ),
     ServerConfig( $S, ~y, h(<'g'^~y2, $cert_req, pk(~ltkS)>) ),
     Out( <$S, ~ns, $ps, 'g'^~b, 
           senc(<
                 <$exts, 'g'^~y2, $cert_req, pk(~ltkS), 
                  sign(<
                        <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                         $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                        'server_cert_verify'>,
                       ~ltkS)
                 >, 
                 hmac(<
                       HKDFExpand(<HKDF(<'0', z.1, 'extractedSS', '256'>), 
                                   'finished_secret', 
                                   h(h(<
                                        <
                                         <<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b
                                         >, 
                                         $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                                        sign(<
                                              <
                                               <<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 
                                                'g'^~b>, 
                                               $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                                              'server_cert_verify'>,
                                             ~ltkS)
                                       >)), 
                                   '256'>), 
                       'server_finished', 
                       <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                        $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                       sign(<
                             <<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>, 
                              $exts, 'g'^~y2, $cert_req, pk(~ltkS)>, 
                             'server_cert_verify'>,
                            ~ltkS)
                      >)
                >,
                HKDFExpand2(<HKDF(<'0', z.2, 'extractedES', '256'>), 
                             'handshake_key_expansion', 
                             h(h(<<<~nc, $pc, z>, pk(~ltkC), c_signature>, ~ns, $ps, 'g'^~b>)), 
                             '256'>))
          >
     )
     ]
    variants (modulo AC)
     1. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~b.50
        a     = inv(~b.50)
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'^inv(~b.50)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'^inv(~b.50)>, config_hash.60>, 
                        'client_cert_verify'>,
                       pk(~ltkC.52))
    
     2. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~b.50
        a     = inv(~b.50)
        c_signature
              = sign(<<<~nc.54, $pc.48, 'g'^inv(~b.50)>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'^inv(~b.50)
        z.1   = 'g'
        z.2   = 'g'
        z.3   = true
    
     3. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = a.58
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'^a.58
        z.1   = 'g'^(~y.56*a.58)
        z.2   = 'g'^(~b.50*a.58)
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'^a.58>, config_hash.60>, 'client_cert_verify'
                       >,
                       pk(~ltkC.52))
    
     4. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = a.58
        c_signature
              = sign(<<<~nc.54, $pc.48, 'g'^a.58>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'^a.58
        z.1   = 'g'^(~y.56*a.58)
        z.2   = 'g'^(~b.50*a.58)
        z.3   = true
    
     5. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv(~b.50)
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'^inv(~b.50)
        z.1   = 'g'^(~y.56*inv(~b.50))
        z.2   = 'g'
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'^inv(~b.50)>, config_hash.60>, 
                        'client_cert_verify'>,
                       pk(~ltkC.52))
    
     6. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv(~b.50)
        c_signature
              = sign(<<<~nc.54, $pc.48, 'g'^inv(~b.50)>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'^inv(~b.50)
        z.1   = 'g'^(~y.56*inv(~b.50))
        z.2   = 'g'
        z.3   = true
    
     7. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv(~y.56)
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'^inv(~y.56)
        z.1   = 'g'
        z.2   = 'g'^(~b.50*inv(~y.56))
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'^inv(~y.56)>, config_hash.60>, 
                        'client_cert_verify'>,
                       pk(~ltkC.52))
    
     8. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv(~y.56)
        c_signature
              = sign(<<<~nc.54, $pc.48, 'g'^inv(~y.56)>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'^inv(~y.56)
        z.1   = 'g'
        z.2   = 'g'^(~b.50*inv(~y.56))
        z.3   = true
    
     9. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv((~b.50*~y.56))
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'^inv((~b.50*~y.56))
        z.1   = 'g'^inv(~b.50)
        z.2   = 'g'^inv(~y.56)
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'^inv((~b.50*~y.56))>, config_hash.60>, 
                        'client_cert_verify'>,
                       pk(~ltkC.52))
    
    10. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = inv((~b.50*~y.56))
        c_signature
              = sign(<
                      <<~nc.54, $pc.48, 'g'^inv((~b.50*~y.56))>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'^inv((~b.50*~y.56))
        z.1   = 'g'^inv(~b.50)
        z.2   = 'g'^inv(~y.56)
        z.3   = true
    
    11. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = one
        c_signature
              = c_signature.59
        config_hash
              = config_hash.60
        z     = 'g'
        z.1   = 'g'^~y.56
        z.2   = 'g'^~b.50
        z.3   = verify(c_signature.59,
                       <<<~nc.54, $pc.48, 'g'>, config_hash.60>, 'client_cert_verify'>,
                       pk(~ltkC.52))
    
    12. $pc   = $pc.48
        ~b    = ~b.50
        ~ltkC = ~ltkC.52
        ~nc   = ~nc.54
        ~y    = ~y.56
        a     = one
        c_signature
              = sign(<<<~nc.54, $pc.48, 'g'>, config_hash.60>, 
                      'client_cert_verify'>,
                     ~ltkC.52)
        config_hash
              = config_hash.60
        z     = 'g'
        z.1   = 'g'^~y.56
        z.2   = 'g'^~b.50
        z.3   = true
    
    13. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~b.821
        a     = inv((~b.821*x.1632))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^inv((~b.821*x.1632))
        z.1   = 'g'^inv(x.1632)
        z.2   = 'g'^inv(x.1632)
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^inv((~b.821*x.1632))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    14. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~b.821
        a     = (x.1632*inv(~b.821))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^(x.1632*inv(~b.821))
        z.1   = 'g'^x.1632
        z.2   = 'g'^x.1632
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^(x.1632*inv(~b.821))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    15. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~y.827
        a     = inv((~b.821*x.1632))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^inv((~b.821*x.1632))
        z.1   = 'g'^(~y.827*inv((~b.821*x.1632)))
        z.2   = 'g'^inv(x.1632)
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^inv((~b.821*x.1632))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    16. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~y.827
        a     = inv((~y.827*x.1632))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^inv((~y.827*x.1632))
        z.1   = 'g'^inv(x.1632)
        z.2   = 'g'^(~b.821*inv((~y.827*x.1632)))
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^inv((~y.827*x.1632))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    17. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~y.827
        a     = (x.1632*inv(~b.821))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^(x.1632*inv(~b.821))
        z.1   = 'g'^(~y.827*x.1632*inv(~b.821))
        z.2   = 'g'^x.1632
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^(x.1632*inv(~b.821))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    18. $pc   = $pc.819
        ~b    = ~b.821
        ~ltkC = ~ltkC.823
        ~nc   = ~nc.825
        ~y    = ~y.827
        a     = (x.1632*inv(~y.827))
        c_signature
              = c_signature.830
        config_hash
              = config_hash.831
        z     = 'g'^(x.1632*inv(~y.827))
        z.1   = 'g'^x.1632
        z.2   = 'g'^(~b.821*x.1632*inv(~y.827))
        z.3   = verify(c_signature.830,
                       <<<~nc.825, $pc.819, 'g'^(x.1632*inv(~y.827))>, config_hash.831>, 
                        'client_cert_verify'>,
                       pk(~ltkC.823))
    
    19. $pc   = $pc.820
        ~b    = ~b.822
        ~ltkC = ~ltkC.824
        ~nc   = ~nc.826
        ~y    = ~b.822
        a     = (x.1634*inv((~b.822*x.1633)))
        c_signature
              = c_signature.831
        config_hash
              = config_hash.832
        z     = 'g'^(x.1634*inv((~b.822*x.1633)))
        z.1   = 'g'^(x.1634*inv(x.1633))
        z.2   = 'g'^(x.1634*inv(x.1633))
        z.3   = verify(c_signature.831,
                       <
                        <<~nc.826, $pc.820, 'g'^(x.1634*inv((~b.822*x.1633)))>, 
                         config_hash.832>, 
                        'client_cert_verify'>,
                       pk(~ltkC.824))
    
    20. $pc   = $pc.820
        ~b    = ~b.822
        ~ltkC = ~ltkC.824
        ~nc   = ~nc.826
        ~y    = ~y.828
        a     = inv((~b.822*~y.828*x.1634))
        c_signature
              = c_signature.831
        config_hash
              = config_hash.832
        z     = 'g'^inv((~b.822*~y.828*x.1634))
        z.1   = 'g'^inv((~b.822*x.1634))
        z.2   = 'g'^inv((~y.828*x.1634))
        z.3   = verify(c_signature.831,
                       <
                        <<~nc.826, $pc.820, 'g'^inv((~b.822*~y.828*x.1634))>, 
                         config_hash.832>, 
                        'client_cert_verify'>,
                       pk(~ltkC.824))
    
    21. $pc   = $pc.820
        ~b    = ~b.822
        ~ltkC = ~ltkC.824
        ~nc   = ~nc.826
        ~y    = ~y.828
        a     = (x.1634*inv((~b.822*~y.828)))
        c_signature
              = c_signature.831
        config_hash
              = config_hash.832
        z     = 'g'^(x.1634*inv((~b.822*~y.828)))
        z.1   = 'g'^(x.1634*inv(~b.822))
        z.2   = 'g'^(x.1634*inv(~y.828))
        z.3   = verify(c_signature.831,
                       <
                        <<~nc.826, $pc.820, 'g'^(x.1634*inv((~b.822*~y.828)))>, 
                         config_hash.832>, 
                        'client_cert_verify'>,
                       pk(~ltkC.824))
    
    22. $pc   = $pc.820
        ~b    = ~b.822
        ~ltkC = ~ltkC.824
        ~nc   = ~nc.826
        ~y    = ~y.828
        a     = (x.1634*inv((~b.822*x.1633)))
        c_signature
              = c_signature.831
        config_hash
              = config_hash.832
        z     = 'g'^(x.1634*inv((~b.822*x.1633)))
        z.1   = 'g'^(~y.828*x.1634*inv((~b.822*x.1633)))
        z.2   = 'g'^(x.1634*inv(x.1633))
        z.3   = verify(c_signature.831,
                       <
                        <<~nc.826, $pc.820, 'g'^(x.1634*inv((~b.822*x.1633)))>, 
                         config_hash.832>, 
                        'client_cert_verify'>,
                       pk(~ltkC.824))
    
    23. $pc   = $pc.820
        ~b    = ~b.822
        ~ltkC = ~ltkC.824
        ~nc   = ~nc.826
        ~y    = ~y.828
        a     = (x.1634*inv((~y.828*x.1633)))
        c_signature
              = c_signature.831
        config_hash
              = config_hash.832
        z     = 'g'^(x.1634*inv((~y.828*x.1633)))
        z.1   = 'g'^(x.1634*inv(x.1633))
        z.2   = 'g'^(~b.822*x.1634*inv((~y.828*x.1633)))
        z.3   = verify(c_signature.831,
                       <
                        <<~nc.826, $pc.820, 'g'^(x.1634*inv((~y.828*x.1633)))>, 
                         config_hash.832>, 
                        'client_cert_verify'>,
                       pk(~ltkC.824))
    
    24. $pc   = $pc.821
        ~b    = ~b.823
        ~ltkC = ~ltkC.825
        ~nc   = ~nc.827
        ~y    = ~y.829
        a     = (x.1636*inv((~b.823*~y.829*x.1635)))
        c_signature
              = c_signature.832
        config_hash
              = config_hash.833
        z     = 'g'^(x.1636*inv((~b.823*~y.829*x.1635)))
        z.1   = 'g'^(x.1636*inv((~b.823*x.1635)))
        z.2   = 'g'^(x.1636*inv((~y.829*x.1635)))
        z.3   = verify(c_signature.832,
                       <
                        <<~nc.827, $pc.821, 'g'^(x.1636*inv((~b.823*~y.829*x.1635)))>, 
                         config_hash.833>, 
                        'client_cert_verify'>,
                       pk(~ltkC.825))
    
    25. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~b.825
        a     = inv((~b.825*x.1640))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^inv((~b.825*x.1640))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^inv((~b.825*x.1640))
        z.1   = 'g'^inv(x.1640)
        z.2   = 'g'^inv(x.1640)
        z.3   = true
    
    26. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~b.825
        a     = (x.1640*inv(~b.825))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^(x.1640*inv(~b.825))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^(x.1640*inv(~b.825))
        z.1   = 'g'^x.1640
        z.2   = 'g'^x.1640
        z.3   = true
    
    27. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~y.831
        a     = inv((~b.825*x.1640))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^inv((~b.825*x.1640))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^inv((~b.825*x.1640))
        z.1   = 'g'^(~y.831*inv((~b.825*x.1640)))
        z.2   = 'g'^inv(x.1640)
        z.3   = true
    
    28. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~y.831
        a     = inv((~y.831*x.1640))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^inv((~y.831*x.1640))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^inv((~y.831*x.1640))
        z.1   = 'g'^inv(x.1640)
        z.2   = 'g'^(~b.825*inv((~y.831*x.1640)))
        z.3   = true
    
    29. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~y.831
        a     = (x.1640*inv(~b.825))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^(x.1640*inv(~b.825))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^(x.1640*inv(~b.825))
        z.1   = 'g'^(~y.831*x.1640*inv(~b.825))
        z.2   = 'g'^x.1640
        z.3   = true
    
    30. $pc   = $pc.823
        ~b    = ~b.825
        ~ltkC = ~ltkC.827
        ~nc   = ~nc.829
        ~y    = ~y.831
        a     = (x.1640*inv(~y.831))
        c_signature
              = sign(<
                      <<~nc.829, $pc.823, 'g'^(x.1640*inv(~y.831))>, config_hash.835>, 
                      'client_cert_verify'>,
                     ~ltkC.827)
        config_hash
              = config_hash.835
        z     = 'g'^(x.1640*inv(~y.831))
        z.1   = 'g'^x.1640
        z.2   = 'g'^(~b.825*x.1640*inv(~y.831))
        z.3   = true
    
    31. $pc   = $pc.824
        ~b    = ~b.826
        ~ltkC = ~ltkC.828
        ~nc   = ~nc.830
        ~y    = ~b.826
        a     = (x.1642*inv((~b.826*x.1641)))
        c_signature
              = sign(<
                      <<~nc.830, $pc.824, 'g'^(x.1642*inv((~b.826*x.1641)))>, 
                       config_hash.836>, 
                      'client_cert_verify'>,
                     ~ltkC.828)
        config_hash
              = config_hash.836
        z     = 'g'^(x.1642*inv((~b.826*x.1641)))
        z.1   = 'g'^(x.1642*inv(x.1641))
        z.2   = 'g'^(x.1642*inv(x.1641))
        z.3   = true
    
    32. $pc   = $pc.824
        ~b    = ~b.826
        ~ltkC = ~ltkC.828
        ~nc   = ~nc.830
        ~y    = ~y.832
        a     = inv((~b.826*~y.832*x.1642))
        c_signature
              = sign(<
                      <<~nc.830, $pc.824, 'g'^inv((~b.826*~y.832*x.1642))>, 
                       config_hash.836>, 
                      'client_cert_verify'>,
                     ~ltkC.828)
        config_hash
              = config_hash.836
        z     = 'g'^inv((~b.826*~y.832*x.1642))
        z.1   = 'g'^inv((~b.826*x.1642))
        z.2   = 'g'^inv((~y.832*x.1642))
        z.3   = true
    
    33. $pc   = $pc.824
        ~b    = ~b.826
        ~ltkC = ~ltkC.828
        ~nc   = ~nc.830
        ~y    = ~y.832
        a     = (x.1642*inv((~b.826*~y.832)))
        c_signature
              = sign(<
                      <<~nc.830, $pc.824, 'g'^(x.1642*inv((~b.826*~y.832)))>, 
                       config_hash.836>, 
                      'client_cert_verify'>,
                     ~ltkC.828)
        config_hash
              = config_hash.836
        z     = 'g'^(x.1642*inv((~b.826*~y.832)))
        z.1   = 'g'^(x.1642*inv(~b.826))
        z.2   = 'g'^(x.1642*inv(~y.832))
        z.3   = true
    
    34. $pc   = $pc.824
        ~b    = ~b.826
        ~ltkC = ~ltkC.828
        ~nc   = ~nc.830
        ~y    = ~y.832
        a     = (x.1642*inv((~b.826*x.1641)))
        c_signature
              = sign(<
                      <<~nc.830, $pc.824, 'g'^(x.1642*inv((~b.826*x.1641)))>, 
                       config_hash.836>, 
                      'client_cert_verify'>,
                     ~ltkC.828)
        config_hash
              = config_hash.836
        z     = 'g'^(x.1642*inv((~b.826*x.1641)))
        z.1   = 'g'^(~y.832*x.1642*inv((~b.826*x.1641)))
        z.2   = 'g'^(x.1642*inv(x.1641))
        z.3   = true
    
    35. $pc   = $pc.824
        ~b    = ~b.826
        ~ltkC = ~ltkC.828
        ~nc   = ~nc.830
        ~y    = ~y.832
        a     = (x.1642*inv((~y.832*x.1641)))
        c_signature
              = sign(<
                      <<~nc.830, $pc.824, 'g'^(x.1642*inv((~y.832*x.1641)))>, 
                       config_hash.836>, 
                      'client_cert_verify'>,
                     ~ltkC.828)
        config_hash
              = config_hash.836
        z     = 'g'^(x.1642*inv((~y.832*x.1641)))
        z.1   = 'g'^(x.1642*inv(x.1641))
        z.2   = 'g'^(~b.826*x.1642*inv((~y.832*x.1641)))
        z.3   = true
    
    36. $pc   = $pc.825
        ~b    = ~b.827
        ~ltkC = ~ltkC.829
        ~nc   = ~nc.831
        ~y    = ~y.833
        a     = (x.1644*inv((~b.827*~y.833*x.1643)))
        c_signature
              = sign(<
                      <<~nc.831, $pc.825, 'g'^(x.1644*inv((~b.827*~y.833*x.1643)))>, 
                       config_hash.837>, 
                      'client_cert_verify'>,
                     ~ltkC.829)
        config_hash
              = config_hash.837
        z     = 'g'^(x.1644*inv((~b.827*~y.833*x.1643)))
        z.1   = 'g'^(x.1644*inv((~b.827*x.1643)))
        z.2   = 'g'^(x.1644*inv((~y.833*x.1643)))
        z.3   = true
    // loop breaker: [7]
  */

rule (modulo E) S_1_PSK_Auth:
   [
   F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                      ~psk_id, messages, config_hash, 'authenticated'
   )
   ]
  --[
  S1_PSK_Auth( ~ns ), CommitPSK( $S, $C, 'server', <~psk_id, ss> ),
  Instance( ~ns, $S, 'server' )
  ]->
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'auth_recv'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_PSK_NoAuth:
   [
   F_St_S_0_init_PSK( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                      ~psk_id, messages, config_hash, auth_status
   )
   ]
  --[ S1_PSK_NoAuth( ~ns ), Instance( ~ns, $S, 'server' ) ]->
   [
   F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es, messages,
                  config_hash, 'never_auth'
   )
   ]

  /* has exactly the trivial AC variant */

axiom Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

axiom Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

axiom one_ltk:
  "∀ A x y #i #j.
    ((GenLtk( A, x ) @ #i) ∧ (GenLtk( A, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

axiom one_role_per_actor:
  "∀ actor tid tid2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧
     (Start( tid2, actor, role2 ) @ #j)) ⇒
    (role = role2)"
  // safety formula

lemma session_origin [reuse, use_induction]:
  all-traces
  "∀ tid actor peer role ss es messages #i.
    (SessionData( tid, <actor, peer, role, ss, es, messages> ) @ #i) ⇒
    (∃ #j #k.
      (((((RunningTranscript( actor, peer, role, messages ) @ #j) ∧
          (RunningSecrets( actor, peer, role, <ss, es> ) @ #j)) ∧
         (Instance( tid, actor, role ) @ #j)) ∧
        (FinishedHandshake( tid, actor, role ) @ #k)) ∧
       (#j < #i)) ∧
      (#k < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role ss es messages #i.
  (SessionData( tid, <actor, peer, role, ss, es, messages> ) @ #i)
 ∧
  ∀ #j #k.
   (RunningTranscript( actor, peer, role, messages ) @ #j) ∧
   (RunningSecrets( actor, peer, role, <ss, es> ) @ #j) ∧
   (Instance( tid, actor, role ) @ #j) ∧
   (FinishedHandshake( tid, actor, role ) @ #k)
  ⇒
   (¬(#j < #i)) ∨ (¬(#k < #i))"
*/
by sorry

lemma tid_invariant [use_induction, reuse]:
  all-traces
  "∀ tid actor role #i.
    (Instance( tid, actor, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role #i.
  (Instance( tid, actor, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma pk_origin [reuse]:
  all-traces
  "∀ actor ltk #i.
    (UsePK( actor, pk(ltk) ) @ #i) ⇒
    (∃ #j. (GenLtk( actor, ltk ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ltk #i.
  (UsePK( actor, pk(ltk) ) @ #i)
 ∧
  ∀ #j. (GenLtk( actor, ltk ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma ltk_invariant [reuse]:
  all-traces
  "∀ actor ltk #i #j.
    ((GenLtk( actor, ltk ) @ #i) ∧ (!KU( ltk ) @ #j)) ⇒
    (∃ #r. (RevLtk( actor ) @ #r) ∧ (#r < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ltk #i #j.
  (GenLtk( actor, ltk ) @ #i) ∧ (!KU( ltk ) @ #j)
 ∧
  ∀ #r. (RevLtk( actor ) @ #r) ⇒ ¬(#r < #j)"
*/
by sorry

lemma ku_keyc [reuse]:
  all-traces
  "∀ ss es session_hash #i.
    (!KU( HKDFExpand1(<
                       HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                             HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                       'application_data_key_expansion', session_hash, '256'>)
     ) @ #i) ⇒
    (∃ #r #s. (!KU( ss ) @ #r) ∧ (!KU( es ) @ #s))"
/*
guarded formula characterizing all counter-examples:
"∃ ss es session_hash #i.
  (!KU( HKDFExpand1(<
                     HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                           HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                     'application_data_key_expansion', session_hash, '256'>)
   ) @ #i)
 ∧
  ∀ #r #s. (!KU( ss ) @ #r) ∧ (!KU( es ) @ #s) ⇒ ⊥"
*/
by sorry

lemma ku_keys [reuse]:
  all-traces
  "∀ ss es session_hash #i.
    (!KU( HKDFExpand2(<
                       HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                             HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                       'application_data_key_expansion', session_hash, '256'>)
     ) @ #i) ⇒
    (∃ #r #s. (!KU( ss ) @ #r) ∧ (!KU( es ) @ #s))"
/*
guarded formula characterizing all counter-examples:
"∃ ss es session_hash #i.
  (!KU( HKDFExpand2(<
                     HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                           HKDF(<'0', es, 'extractedES', '256'>), 'master_secret', '256'>), 
                     'application_data_key_expansion', session_hash, '256'>)
   ) @ #i)
 ∧
  ∀ #r #s. (!KU( ss ) @ #r) ∧ (!KU( es ) @ #s) ⇒ ⊥"
*/
by sorry

lemma ku_edkeyc [reuse]:
  all-traces
  "∀ ss hs_hashc #i.
    (!KU( HKDFExpand1(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                       'early_data_key_expansion', hs_hashc, '256'>)
     ) @ #i) ⇒
    (∃ #r. !KU( ss ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ ss hs_hashc #i.
  (!KU( HKDFExpand1(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                     'early_data_key_expansion', hs_hashc, '256'>)
   ) @ #i)
 ∧
  ∀ #r. (!KU( ss ) @ #r) ⇒ ⊥"
*/
by sorry

lemma forge_server_sig [reuse]:
  all-traces
  "∀ exts Y pkA ltkA cert_req signature_messages hs_hashs es fin #i.
    (!KU( senc(<
                <exts, Y, cert_req, pkA, 
                 sign(<signature_messages, 'server_cert_verify'>, ltkA)>, 
                fin>,
               HKDFExpand2(<HKDF(<'0', es, 'extractedES', '256'>), 
                            'handshake_key_expansion', hs_hashs, '256'>))
     ) @ #i) ⇒
    ((∃ #j. (!KU( ltkA ) @ #j) ∧ (#j < #i)) ∨
     (∃ actor #j.
       ((SignData( actor, <signature_messages, 'server_cert_verify'>
         ) @ #j) ∧
        (UseLtk( actor, ltkA ) @ #j)) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ exts Y pkA ltkA cert_req signature_messages hs_hashs es fin #i.
  (!KU( senc(<
              <exts, Y, cert_req, pkA, 
               sign(<signature_messages, 'server_cert_verify'>, ltkA)>, 
              fin>,
             HKDFExpand2(<HKDF(<'0', es, 'extractedES', '256'>), 
                          'handshake_key_expansion', hs_hashs, '256'>))
   ) @ #i)
 ∧
  (∀ #j. (!KU( ltkA ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ actor #j.
    (SignData( actor, <signature_messages, 'server_cert_verify'>
     ) @ #j) ∧
    (UseLtk( actor, ltkA ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma forge_server_fin [reuse]:
  all-traces
  "∀ s1 ss es server_fin_messages fs_hash hs_hashs #i.
    (!KU( senc(<s1, 
                hmac(<
                      HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                  'finished_secret', fs_hash, '256'>), 
                      'server_finished', server_fin_messages>)
               >,
               HKDFExpand2(<HKDF(<'0', es, 'extractedES', '256'>), 
                            'handshake_key_expansion', hs_hashs, '256'>))
     ) @ #i) ⇒
    ((∃ #j. (!KU( ss ) @ #j) ∧ (#j < #i)) ∨
     (∃ es2 S C #j.
       ((RunningTranscript( S, C, 'server', server_fin_messages ) @ #j) ∧
        (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ s1 ss es server_fin_messages fs_hash hs_hashs #i.
  (!KU( senc(<s1, 
              hmac(<
                    HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                'finished_secret', fs_hash, '256'>), 
                    'server_finished', server_fin_messages>)
             >,
             HKDFExpand2(<HKDF(<'0', es, 'extractedES', '256'>), 
                          'handshake_key_expansion', hs_hashs, '256'>))
   ) @ #i)
 ∧
  (∀ #j. (!KU( ss ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ es2 S C #j.
    (RunningTranscript( S, C, 'server', server_fin_messages ) @ #j) ∧
    (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma psk_invariant [reuse, use_induction]:
  all-traces
  "∀ actor peer psk_id rs role auth_status #i.
    (UsePSK( actor, psk_id, peer, rs, role, auth_status ) @ #i) ⇒
    ((∃ #j.
       ((RunningPSK( actor, peer, role, <psk_id, rs> ) @ #j) ∧
        (AuthStatus( actor, peer, role, auth_status ) @ #j)) ∧
       (#j < #i)) ∨
     (∃ #j role2.
       (((((FreshPSK( psk_id, rs ) @ #j) ∧ (GenPSK( actor, role ) @ #j)) ∧
          (GenPSK( peer, role2 ) @ #j)) ∧
         (#j < #i)) ∧
        (¬(role2 = role))) ∧
       (auth_status = 'no_auth')))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer psk_id rs role auth_status #i.
  (UsePSK( actor, psk_id, peer, rs, role, auth_status ) @ #i)
 ∧
  (∀ #j.
    (RunningPSK( actor, peer, role, <psk_id, rs> ) @ #j) ∧
    (AuthStatus( actor, peer, role, auth_status ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j role2.
    (FreshPSK( psk_id, rs ) @ #j) ∧
    (GenPSK( actor, role ) @ #j) ∧
    (GenPSK( peer, role2 ) @ #j) ∧
    (auth_status = 'no_auth')
   ⇒
    (¬(#j < #i)) ∨ (role2 = role))"
*/
by sorry

lemma psk_auth [reuse, use_induction]:
  all-traces
  "∀ actor peer actor2 peer2 psk_idc psk_ids rs #i #j.
    ((CommitPSK( actor, peer, 'client', <psk_idc, rs> ) @ #i) ∧
     (RunningPSK( actor2, peer2, 'server', <psk_ids, rs> ) @ #j)) ⇒
    (((∃ #r. ((RevLtk( peer ) @ #r) ∧ (#r < #i)) ∧ (#r < #j)) ∨
      (∃ psk_id2 rs2 #r #s.
        ((((CommitPSK( actor, peer, 'client', <psk_id2, rs2> ) @ #r) ∧
           (!KU( rs2 ) @ #s)) ∧
          (#r < #s)) ∧
         (#s < #i)) ∧
        (#s < #j))) ∨
     (actor2 = peer))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer actor2 peer2 psk_idc psk_ids rs #i #j.
  (CommitPSK( actor, peer, 'client', <psk_idc, rs> ) @ #i) ∧
  (RunningPSK( actor2, peer2, 'server', <psk_ids, rs> ) @ #j)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ (¬(#r < #i)) ∨ (¬(#r < #j))) ∧
  (∀ psk_id2 rs2 #r #s.
    (CommitPSK( actor, peer, 'client', <psk_id2, rs2> ) @ #r) ∧
    (!KU( rs2 ) @ #s)
   ⇒
    (¬(#r < #s)) ∨ (¬(#s < #i)) ∨ (¬(#s < #j))) ∧
  (¬(actor2 = peer))"
*/
by sorry

lemma psk_helper [reuse, use_induction]:
  all-traces
  "∀ actor actor2 psk_id psk_id2 peer peer2 rs auth_status
     auth_status2 #i #j.
    ((UsePSK( actor, psk_id, peer, rs, 'client', auth_status ) @ #i) ∧
     (UsePSK( actor2, psk_id2, peer2, rs, 'server', auth_status2
      ) @ #j)) ⇒
    (actor2 = peer)"
/*
guarded formula characterizing all counter-examples:
"∃ actor actor2 psk_id psk_id2 peer peer2 rs auth_status
   auth_status2 #i #j.
  (UsePSK( actor, psk_id, peer, rs, 'client', auth_status ) @ #i) ∧
  (UsePSK( actor2, psk_id2, peer2, rs, 'server', auth_status2 ) @ #j)
 ∧
  ¬(actor2 = peer)"
*/
by sorry

lemma authenticated_psk [reuse, use_induction]:
  all-traces
  "∀ actor peer psk_id rs #i #j.
    ((UsePSK( actor, psk_id, peer, rs, 'server', 'authenticated'
      ) @ #i) ∧
     (!KU( rs ) @ #j)) ⇒
    (∃ ss es #a #b #r #s.
      (((((((CommitES( actor, peer, 'server', es ) @ #a) ∧
            (CommitSS( actor, peer, 'server', ss ) @ #b)) ∧
           (#a < #i)) ∧
          (#b < #i)) ∧
         (!KU( ss ) @ #r)) ∧
        (!KU( es ) @ #s)) ∧
       (#r < #j)) ∧
      (#s < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer psk_id rs #i #j.
  (UsePSK( actor, psk_id, peer, rs, 'server', 'authenticated'
   ) @ #i) ∧
  (!KU( rs ) @ #j)
 ∧
  ∀ ss es #a #b #r #s.
   (CommitES( actor, peer, 'server', es ) @ #a) ∧
   (CommitSS( actor, peer, 'server', ss ) @ #b) ∧
   (!KU( ss ) @ #r) ∧
   (!KU( es ) @ #s)
  ⇒
   (¬(#a < #i)) ∨ (¬(#b < #i)) ∨ (¬(#r < #j)) ∨ (¬(#s < #j))"
*/
by sorry

lemma C1_before_Retry [reuse, use_induction]:
  all-traces
  "∀ tid #j.
    (C1_Retry( tid ) @ #j) ⇒ (∃ #i. (C1( tid ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ tid #j.
  (C1_Retry( tid ) @ #j) ∧ ∀ #i. (C1( tid ) @ #i) ⇒ ¬(#i < #j)"
*/
by sorry

lemma Retry_before_C2 [reuse, use_induction]:
  all-traces
  "∀ tid #i #j.
    ((C1_Retry( tid ) @ #i) ∧ (C2( tid ) @ #j)) ⇒ (#i < #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C1_Retry( tid ) @ #i) ∧ (C2( tid ) @ #j) ∧ ¬(#i < #j)"
*/
by sorry

lemma C2_uniq [reuse]:
  all-traces
  "∀ tid #i #j. ((C2( tid ) @ #i) ∧ (C2( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2( tid ) @ #i) ∧ (C2( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma es_basic [use_induction, reuse]:
  all-traces
  "∀ actor peer es #i #j.
    ((CommitES( actor, peer, 'client', es ) @ #i) ∧ (!KU( es ) @ #j)) ⇒
    (∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer es #i #j.
  (CommitES( actor, peer, 'client', es ) @ #i) ∧ (!KU( es ) @ #j)
 ∧
  ∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)"
*/
by sorry

lemma ss_basic [use_induction, reuse]:
  all-traces
  "∀ actor peer ss #i #j.
    ((CommitSS( actor, peer, 'client', ss ) @ #i) ∧ (!KU( ss ) @ #j)) ⇒
    (∃ #r. RevLtk( peer ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer ss #i #j.
  (CommitSS( actor, peer, 'client', ss ) @ #i) ∧ (!KU( ss ) @ #j)
 ∧
  ∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥"
*/
by sorry

lemma es_mutual [use_induction, reuse]:
  all-traces
  "∀ actor peer es #i #k.
    ((CommitES( actor, peer, 'server', es ) @ #i) ∧ (!KU( es ) @ #k)) ⇒
    ((∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)) ∨
     (∃ #r. (RevLtk( actor ) @ #r) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer es #i #k.
  (CommitES( actor, peer, 'server', es ) @ #i) ∧ (!KU( es ) @ #k)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ¬(#r < #i))"
*/
by sorry

lemma ss_mutual [use_induction, reuse]:
  all-traces
  "∀ actor peer ss #i #k.
    ((CommitSS( actor, peer, 'server', ss ) @ #i) ∧ (!KU( ss ) @ #k)) ⇒
    ((∃ #r. RevLtk( peer ) @ #r) ∨ (∃ #r. RevLtk( actor ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer ss #i #k.
  (CommitSS( actor, peer, 'server', ss ) @ #i) ∧ (!KU( ss ) @ #k)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secret_session_keys:
  all-traces
  "∀ actor peer role k #i.
    ((SessionKey( actor, peer, role, <k, 'authenticated'> ) @ #i) ∧
     (¬((∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)) ∨
        (∃ #r. (RevLtk( actor ) @ #r) ∧ (#r < #i))))) ⇒
    (¬(∃ #j. !KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer role k #i.
  (SessionKey( actor, peer, role, <k, 'authenticated'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∃ #j. (!KU( k ) @ #j))"
*/
simplify
solve( SessionKey( actor, peer, role, <k, 'authenticated'> ) @ #i )
  case C_2_Auth_case_1
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         prev_messages, config_hash, 'no_auth'
         ) ▶₀ #i )
    case C_2_KC
    by contradiction /* from formulas */
  next
    case C_2_case_1
    by contradiction /* from formulas */
  next
    case C_2_case_2
    by contradiction /* from formulas */
  qed
next
  case C_2_Auth_case_2
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         prev_messages, config_hash, 'no_auth'
         ) ▶₀ #i )
    case C_2_KC
    by contradiction /* from formulas */
  next
    case C_2_case_1
    by contradiction /* from formulas */
  next
    case C_2_case_2
    by contradiction /* from formulas */
  qed
next
  case C_2_NoAuth_case_1
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         prev_messages, config_hash, auth_status
         ) ▶₀ #i )
    case C_2_KC
    by contradiction
  next
    case C_2_PSK
    by contradiction
  next
    case C_2_PSK_DHE
    by contradiction
  next
    case C_2_case_1
    by contradiction
  next
    case C_2_case_2
    by contradiction
  qed
next
  case C_2_NoAuth_case_2
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         prev_messages, config_hash, auth_status
         ) ▶₀ #i )
    case C_2_KC
    by contradiction
  next
    case C_2_PSK
    by contradiction
  next
    case C_2_PSK_DHE
    by contradiction
  next
    case C_2_case_1
    by contradiction
  next
    case C_2_case_2
    by contradiction
  qed
next
  case S_2_Auth_case_1
  solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
         (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
    case case_1
    by contradiction
  next
    case case_2
    by contradiction
  qed
next
  case S_2_Auth_case_2
  solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
         (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
    case case_1
    by contradiction
  next
    case case_2
    by contradiction
  qed
next
  case S_2_case_1
  by solve( F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                           prev_messages, config_hash, 'authenticated'
            ) ▶₀ #i )
next
  case S_2_case_2
  by solve( F_St_S_1_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                           prev_messages, config_hash, 'authenticated'
            ) ▶₀ #i )
qed

lemma secret_early_data_keys:
  all-traces
  "∀ actor peer k #i.
    ((EarlyDataKey( actor, peer, 'client', k ) @ #i) ∧
     (¬(∃ #r. RevLtk( peer ) @ #r))) ⇒
    (¬(∃ #j. !KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer k #i.
  (EarlyDataKey( actor, peer, 'client', k ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧ (∃ #j. (!KU( k ) @ #j))"
*/
simplify
solve( EarlyDataKey( actor, peer, 'client', k ) @ #i )
  case C_1_KC
  by contradiction
next
  case C_1_PSK
  by contradiction
qed

lemma entity_authentication [reuse]:
  all-traces
  "∀ actor peer nonces #i.
    ((CommitNonces( actor, peer, 'client', nonces ) @ #i) ∧
     (¬(∃ #r. RevLtk( peer ) @ #r))) ⇒
    (∃ #j peer2.
      (RunningNonces( peer, peer2, 'server', nonces ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer nonces #i.
  (CommitNonces( actor, peer, 'client', nonces ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧
  (∀ #j peer2.
    (RunningNonces( peer, peer2, 'server', nonces ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
simplify
solve( CommitNonces( actor, peer, 'client', nonces ) @ #i )
  case C_2
  solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
         (∃ actor #j.
           (SignData( actor,
                      <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                       'server_cert_verify'>
            ) @ #j) ∧
           (UseLtk( actor, ~ltkS ) @ #j)
          ∧
           #j < #vk.8) )
    case case_1
    by contradiction
  next
    case case_2
    solve( SignData( actor,
                     <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                      'server_cert_verify'>
           ) @ #j.2 )
      case S_1
      solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j.1 )
        case Register_pk
        solve( F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, <~nc.1, $pc.1, z>,
                              auth_status
               ) ▶₀ #i )
          case C_1
          by contradiction
        next
          case C_1_retry
          by contradiction
        qed
      qed
    next
      case S_1_KC
      solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j.1 )
        case Register_pk
        solve( F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a, <~nc.1, $pc.1, z>,
                              auth_status
               ) ▶₀ #i )
          case C_1
          by contradiction
        next
          case C_1_retry
          by contradiction
        qed
      qed
    next
      case S_1_KC_RecvAuth
      solve( !Ltk( $S.1, ~ltkS ) ▶₃ #j.1 )
        case Register_pk
        by solve( F_St_C_1_init( ~nc, $C, ~nc, $pc, $S, ~a,
                                 <<~nc.1, $pc.1, z>, pk(~ltkC), 
                                  sign(<<<~nc.1, $pc.1, z>, config_hash>, 'client_cert_verify'>,
                                       ~ltkC)
                                 >,
                                 auth_status
                  ) ▶₀ #i )
      qed
    qed
  qed
next
  case C_2_KC
  solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
         (∃ actor #j.
           (SignData( actor,
                      <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                       'server_cert_verify'>
            ) @ #j) ∧
           (UseLtk( actor, ~ltkS ) @ #j)
          ∧
           #j < #vk.8) )
    case case_1
    by contradiction
  next
    case case_2
    solve( SignData( actor,
                     <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                      'server_cert_verify'>
           ) @ #j.2 )
      case S_1
      solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j.1 )
        case Register_pk
        solve( F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                                 <~nc.1, $pc.1, z>, config_hash, auth_status
               ) ▶₀ #i )
          case C_1_KC_case_1
          by contradiction
        next
          case C_1_KC_case_2
          by contradiction
        next
          case C_1_KC_case_3
          by contradiction
        qed
      qed
    next
      case S_1_KC
      solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j.1 )
        case Register_pk
        solve( F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                                 <~nc.1, $pc.1, z>, config_hash, auth_status
               ) ▶₀ #i )
          case C_1_KC_case_1
          by contradiction
        next
          case C_1_KC_case_2
          by contradiction
        next
          case C_1_KC_case_3
          by contradiction
        qed
      qed
    next
      case S_1_KC_RecvAuth
      solve( !Ltk( $S.1, ~ltkS ) ▶₃ #j.1 )
        case Register_pk
        solve( F_St_C_1_init_KC( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                                 <<~nc.1, $pc.1, z>, pk(~ltkC), 
                                  sign(<<<~nc.1, $pc.1, z>, config_hash>, 'client_cert_verify'>,
                                       ~ltkC)
                                 >,
                                 config_hash.1, auth_status
               ) ▶₀ #i )
          case C_1_KC_Auth_case_1
          by contradiction
        next
          case C_1_KC_Auth_case_2
          by contradiction
        next
          case C_1_KC_Auth_case_3
          by contradiction
        qed
      qed
    qed
  qed
next
  case C_2_PSK
  solve( (∃ #j. (!KU( ss ) @ #j) ∧ #j < #vk.6)  ∥
         (∃ es2 S C #j.
           (RunningTranscript( S, C, 'server',
                               <<prev_messages, ~ns, $ps>, $exts>
            ) @ #j) ∧
           (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)
          ∧
           #j < #vk.6) )
    case case_1
    by contradiction
  next
    case case_2
    solve( RunningTranscript( S.1, C.1, 'server',
                              <<prev_messages, ~ns, $ps>, $exts>
           ) @ #j.1 )
      case S_1_PSK
      solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                                <~nc.1, $pc.1, z>, config_hash, auth_status
             ) ▶₀ #i )
        case C_1_PSK
        solve( ServerPSK( $S.1, ~psk_id, $C.1, rs, config_hash.1,
                          auth_status
               ) ▶₂ #j )
          case UseServerPSK
          solve( (∃ #j.
                   (RunningPSK( $S.1, $C.1, 'server', <~psk_id, rs> ) @ #j) ∧
                   (AuthStatus( $S.1, $C.1, 'server', auth_status ) @ #j)
                  ∧
                   #j < #vr.2)  ∥
                 (∃ #j role2.
                   (FreshPSK( ~psk_id, rs ) @ #j) ∧
                   (GenPSK( $S.1, 'server' ) @ #j) ∧
                   (GenPSK( $C.1, role2 ) @ #j) ∧
                   (auth_status = 'no_auth')
                  ∧
                   (#j < #vr.2) ∧ (¬(role2 = 'server'))) )
            case case_1
            solve( RunningPSK( $S.1, $C.1, 'server', <~psk_id, rs> ) @ #j.2 )
              case S_3_NST
              solve( RunningSecrets( $S.1, $C.1, 'server', <ss, es2> ) @ #j )
                case S_1_PSK
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( GenPSK( $S.1, 'server' ) @ #j.1 )
              case Gen_PSK
              solve( GenPSK( $C.1, role2 ) @ #j.1 )
                case Gen_PSK_case_1
                by contradiction /* from formulas */
              next
                case Gen_PSK_case_2
                solve( RunningSecrets( $S.1, $C.1, 'server', <ss, es2> ) @ #j )
                  case S_1_PSK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case C_2_PSK_DHE
  solve( (∃ #j. (!KU( ss ) @ #j) ∧ #j < #vk.8)  ∥
         (∃ es2 S C #j.
           (RunningTranscript( S, C, 'server',
                               <<prev_messages, ~ns, $ps, z>, $exts>
            ) @ #j) ∧
           (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)
          ∧
           #j < #vk.8) )
    case case_1
    solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ss,
                              prev_messages, config_hash, auth_status
           ) ▶₀ #i )
      case C_1_PSK
      by contradiction
    qed
  next
    case case_2
    solve( RunningTranscript( S.1, C.1, 'server',
                              <<prev_messages, ~ns, $ps, z>, $exts>
           ) @ #j.1 )
      case S_1_PSK_DHE
      solve( RunningSecrets( $S.1, $C.1, 'server', <ss, es2> ) @ #j )
        case S_1_PSK_DHE
        solve( ServerPSK( $S.1, ~psk_id, $C.1, rs, config_hash.1,
                          auth_status.1
               ) ▶₂ #j )
          case UseServerPSK
          solve( (∃ #j.
                   (RunningPSK( $S.1, $C.1, 'server', <~psk_id, rs> ) @ #j) ∧
                   (AuthStatus( $S.1, $C.1, 'server', auth_status.1 ) @ #j)
                  ∧
                   #j < #vr)  ∥
                 (∃ #j role2.
                   (FreshPSK( ~psk_id, rs ) @ #j) ∧
                   (GenPSK( $S.1, 'server' ) @ #j) ∧
                   (GenPSK( $C.1, role2 ) @ #j) ∧
                   (auth_status.1 = 'no_auth')
                  ∧
                   (#j < #vr) ∧ (¬(role2 = 'server'))) )
            case case_1
            solve( RunningPSK( $S.1, $C.1, 'server', <~psk_id, rs> ) @ #j.2 )
              case S_3_NST
              solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a,
                                        HKDFExpand(<
                                                    HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                                          HKDF(<'0', es, 'extractedES', '256'>), 
                                                          'master_secret', '256'>), 
                                                    'resumption_master_secret', h(h(messages)), 
                                                    '256'>),
                                        <~nc.1, $pc.1, z>, config_hash, auth_status
                     ) ▶₀ #i )
                case C_1_PSK
                by contradiction
              qed
            qed
          next
            case case_2
            solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc, $S, ~a, ~rs,
                                      <~nc.1, $pc.1, z>, config_hash, auth_status
                   ) ▶₀ #i )
              case C_1_PSK
              by contradiction
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma transcript_agreement [reuse]:
  all-traces
  "∀ actor peer transcript #i.
    ((CommitTranscript( actor, peer, 'client', transcript ) @ #i) ∧
     (¬(∃ #r. RevLtk( peer ) @ #r))) ⇒
    (∃ #j peer2.
      (RunningTranscript( peer, peer2, 'server', transcript ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer transcript #i.
  (CommitTranscript( actor, peer, 'client', transcript ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧
  (∀ #j peer2.
    (RunningTranscript( peer, peer2, 'server', transcript ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
simplify
solve( CommitTranscript( actor, peer, 'client', transcript ) @ #i )
  case C_2_Auth
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         transcript, config_hash, 'no_auth'
         ) ▶₀ #i )
    case C_2_KC
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.8) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      solve( SignData( actor,
                       <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.2 )
        case S_1
        solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      next
        case S_1_KC_RecvAuth
        solve( !Ltk( $S.1, ~ltkS ) ▶₃ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case C_2_case_1
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <
                         <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.8) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      solve( SignData( actor,
                       <
                        <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.2 )
        case S_1
        solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case C_2_case_2
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.9)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <
                         <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.9) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      solve( SignData( actor,
                       <
                        <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.3 )
        case S_1
        solve( !Ltk( $S.2, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.2, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case C_2_NoAuth
  solve( F_St_C_2a_init( ~nc, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                         transcript, config_hash, auth_status
         ) ▶₀ #i )
    case C_2_KC
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.8) )
      case case_1
      by contradiction
    next
      case case_2
      solve( SignData( actor,
                       <<<prev_messages, ~ns, $ps, z>, $exts, z.1, $cert_req, pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.2 )
        case S_1
        solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction
        qed
      next
        case S_1_KC_RecvAuth
        solve( !Ltk( $S.1, ~ltkS ) ▶₃ #j )
          case Register_pk
          by contradiction
        qed
      qed
    qed
  next
    case C_2_PSK
    solve( (∃ #j. (!KU( es ) @ #j) ∧ #j < #vk.6)  ∥
           (∃ es2 S C #j.
             (RunningTranscript( S, C, 'server',
                                 <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
              ) @ #j) ∧
             (RunningSecrets( S, C, 'server', <es, es2> ) @ #j)
            ∧
             #j < #vk.6) )
      case case_1
      by contradiction
    next
      case case_2
      solve( RunningTranscript( S.1, C.1, 'server',
                                <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
             ) @ #j.2 )
        case S_1_PSK
        solve( Start( ~nc, $C, 'client' ) @ #j.2 )
          case C_1_PSK
          solve( RunningSecrets( $S.1, $C.1, 'server', <es, es2> ) @ #j )
            case S_1_PSK
            solve( ServerPSK( $S.1, ~psk_id, $C.1, es, config_hash.1,
                              auth_status
                   ) ▶₂ #j )
              case UseServerPSK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case C_2_PSK_DHE
    solve( (∃ #j. (!KU( ss ) @ #j) ∧ #j < #vk.8)  ∥
           (∃ es2 S C #j.
             (RunningTranscript( S, C, 'server',
                                 <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts>
              ) @ #j) ∧
             (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)
            ∧
             #j < #vk.8) )
      case case_1
      by contradiction
    next
      case case_2
      solve( RunningTranscript( S.1, C.1, 'server',
                                <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts>
             ) @ #j.2 )
        case S_1_PSK_DHE
        solve( RunningSecrets( $S.1, $C.1, 'server', <ss, es2> ) @ #j )
          case S_1_PSK_DHE
          solve( ServerPSK( $S.1, ~psk_id, $C.1, rs, config_hash.1,
                            auth_status
                 ) ▶₂ #j )
            case UseServerPSK
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case C_2_case_1
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.8)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <
                         <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.8) )
      case case_1
      by contradiction
    next
      case case_2
      solve( SignData( actor,
                       <
                        <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.2 )
        case S_1
        solve( !Ltk( $S.1, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.1, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction
        qed
      qed
    qed
  next
    case C_2_case_2
    solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk.9)  ∥
           (∃ actor #j.
             (SignData( actor,
                        <
                         <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                          pk(~ltkS)>, 
                         'server_cert_verify'>
              ) @ #j) ∧
             (UseLtk( actor, ~ltkS ) @ #j)
            ∧
             #j < #vk.9) )
      case case_1
      by contradiction
    next
      case case_2
      solve( SignData( actor,
                       <
                        <<<~nc, $pc, 'g'^~a>, ~ns, $ps, z>, $exts, z.1, $cert_req, 
                         pk(~ltkS)>, 
                        'server_cert_verify'>
             ) @ #j.3 )
        case S_1
        solve( !Ltk( $S.2, ~ltkS ) ▶₁ #j )
          case Register_pk
          by contradiction
        qed
      next
        case S_1_KC
        solve( !Ltk( $S.2, ~ltkS ) ▶₂ #j )
          case Register_pk
          by contradiction
        qed
      qed
    qed
  qed
qed

lemma mutual_entity_authentication [reuse, use_induction]:
  all-traces
  "∀ actor peer nonces #i.
    ((CommitNonces( actor, peer, 'server', nonces ) @ #i) ∧
     (¬((∃ #r. RevLtk( peer ) @ #r) ∨ (∃ #r. RevLtk( actor ) @ #r)))) ⇒
    (∃ #j.
      (RunningNonces( peer, actor, 'client', nonces ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer nonces #i.
  (CommitNonces( actor, peer, 'server', nonces ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #j.
    (RunningNonces( peer, actor, 'client', nonces ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (∃ #r. (RevLtk( peer ) @ #r) ∧ ¬(last(#r)))  ∥
         (∃ #r. (RevLtk( actor ) @ #r) ∧ ¬(last(#r)))  ∥
         (∃ #j.
           (RunningNonces( peer, actor, 'client', nonces ) @ #j)
          ∧
           (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( CommitNonces( actor, peer, 'server', nonces ) @ #i )
      case S_2_Auth
      solve( F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                            messages, config_hash, 'auth_recv'
             ) ▶₀ #i )
        case S_2_RecvAuth_case_1
        solve( !KU( senc(<pk(~ltkC), 
                          sign(<
                                <
                                 <
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                   pk(~ltkS)>, 
                                  sign(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                         $cert_req, pk(~ltkS)>, 
                                        'server_cert_verify'>,
                                       ~ltkS)
                                 >, 
                                 pk(~ltkC)>, 
                                'client_cert_verify'>,
                               ~ltkC), 
                          hmac(<
                                HKDFExpand(<HKDF(<'0', es, 'extractedSS', '256'>), 
                                            'finished_secret', 
                                            h(h(<
                                                 <
                                                  <
                                                   <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                    'g'^~y, $cert_req, pk(~ltkS)>, 
                                                   sign(<
                                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                          'g'^~y, $cert_req, pk(~ltkS)>, 
                                                         'server_cert_verify'>,
                                                        ~ltkS)
                                                  >, 
                                                  pk(~ltkC)>, 
                                                 sign(<
                                                       <
                                                        <
                                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                          'g'^~y, $cert_req, pk(~ltkS)>, 
                                                         sign(<
                                                               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, 
                                                                $exts, 'g'^~y, $cert_req, pk(~ltkS)
                                                               >, 
                                                               'server_cert_verify'>,
                                                              ~ltkS)
                                                        >, 
                                                        pk(~ltkC)>, 
                                                       'client_cert_verify'>,
                                                      ~ltkC)
                                                >)), 
                                            '256'>), 
                                'client_finished', 
                                <
                                 <
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                   pk(~ltkS)>, 
                                  sign(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                         $cert_req, pk(~ltkS)>, 
                                        'server_cert_verify'>,
                                       ~ltkS)
                                 >, 
                                 pk(~ltkC)>, 
                                sign(<
                                      <
                                       <
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                         $cert_req, pk(~ltkS)>, 
                                        sign(<
                                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                               $cert_req, pk(~ltkS)>, 
                                              'server_cert_verify'>,
                                             ~ltkS)
                                       >, 
                                       pk(~ltkC)>, 
                                      'client_cert_verify'>,
                                     ~ltkC)
                               >)
                         >,
                         HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                      'handshake_key_expansion', 
                                      h(h(<
                                           <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                            $cert_req, pk(~ltkS)>, 
                                           sign(<
                                                 <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                                  $cert_req, pk(~ltkS)>, 
                                                 'server_cert_verify'>,
                                                ~ltkS)
                                          >)), 
                                      '256'>))
               ) @ #vk.3 )
          case C_2_Auth_case_1
          by contradiction
        next
          case C_2_Auth_case_2
          by contradiction
        next
          case C_2_Auth_case_3
          solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.1, $S, ~a,
                                   'g'^(~a*~b), <~nc, $pc, 'g'^~a>, config_hash, 'no_auth'
                 ) ▶₀ #vr.8 )
            case C_1_KC_case_1
            by contradiction
          next
            case C_1_KC_case_2
            by contradiction
          next
            case C_1_KC_case_3
            by contradiction
          qed
        next
          case csenc
          solve( !KU( sign(<
                            <
                             <
                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                               pk(~ltkS)>, 
                              sign(<
                                    <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                     pk(~ltkS)>, 
                                    'server_cert_verify'>,
                                   ~ltkS)
                             >, 
                             pk(~ltkC)>, 
                            'client_cert_verify'>,
                           ~ltkC)
                 ) @ #vk.13 )
            case C_2_Auth_case_1
            by contradiction
          next
            case C_2_Auth_case_2
            by contradiction
          next
            case C_2_Auth_case_3
            solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.1, $S, ~a.1, ss,
                                     <~nc, $pc, z>, config_hash, 'no_auth'
                   ) ▶₀ #vr.11 )
              case C_1_KC_case_1
              by contradiction
            next
              case C_1_KC_case_2
              by contradiction
            next
              case C_1_KC_case_3
              by contradiction
            qed
          next
            case csign
            by contradiction
          qed
        qed
      next
        case S_2_RecvAuth_case_2
        solve( !KU( senc(<pk(~ltkC), 
                          sign(<
                                <
                                 <
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                   pk(~ltkS)>, 
                                  sign(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                         $cert_req, pk(~ltkS)>, 
                                        'server_cert_verify'>,
                                       ~ltkS)
                                 >, 
                                 pk(~ltkC)>, 
                                'client_cert_verify'>,
                               ~ltkC), 
                          hmac(<
                                HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                            'finished_secret', 
                                            h(h(<
                                                 <
                                                  <
                                                   <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                    'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                   sign(<
                                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                          'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                         'server_cert_verify'>,
                                                        ~ltkS)
                                                  >, 
                                                  pk(~ltkC)>, 
                                                 sign(<
                                                       <
                                                        <
                                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                          'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                         sign(<
                                                               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, 
                                                                $exts, 'g'^~y2, $cert_req, pk(~ltkS)
                                                               >, 
                                                               'server_cert_verify'>,
                                                              ~ltkS)
                                                        >, 
                                                        pk(~ltkC)>, 
                                                       'client_cert_verify'>,
                                                      ~ltkC)
                                                >)), 
                                            '256'>), 
                                'client_finished', 
                                <
                                 <
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                   pk(~ltkS)>, 
                                  sign(<
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                         $cert_req, pk(~ltkS)>, 
                                        'server_cert_verify'>,
                                       ~ltkS)
                                 >, 
                                 pk(~ltkC)>, 
                                sign(<
                                      <
                                       <
                                        <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                         $cert_req, pk(~ltkS)>, 
                                        sign(<
                                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                               $cert_req, pk(~ltkS)>, 
                                              'server_cert_verify'>,
                                             ~ltkS)
                                       >, 
                                       pk(~ltkC)>, 
                                      'client_cert_verify'>,
                                     ~ltkC)
                               >)
                         >,
                         HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                      'handshake_key_expansion', 
                                      h(h(<
                                           <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                            $cert_req, pk(~ltkS)>, 
                                           sign(<
                                                 <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                  'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                 'server_cert_verify'>,
                                                ~ltkS)
                                          >)), 
                                      '256'>))
               ) @ #vk.3 )
          case C_2_Auth_case_1
          by contradiction
        next
          case C_2_Auth_case_2
          by contradiction
        next
          case C_2_Auth_case_3
          solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.1, $S, ~a,
                                   'g'^(~a*~y), <~nc, $pc, 'g'^~a>, config_hash.1, 'no_auth'
                 ) ▶₀ #vr.8 )
            case C_1_KC_case_1
            by contradiction
          next
            case C_1_KC_case_2
            by contradiction
          next
            case C_1_KC_case_3
            by contradiction
          qed
        next
          case csenc
          solve( !KU( sign(<
                            <
                             <
                              <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                               pk(~ltkS)>, 
                              sign(<
                                    <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                     pk(~ltkS)>, 
                                    'server_cert_verify'>,
                                   ~ltkS)
                             >, 
                             pk(~ltkC)>, 
                            'client_cert_verify'>,
                           ~ltkC)
                 ) @ #vk.15 )
            case C_2_Auth_case_1
            by contradiction
          next
            case C_2_Auth_case_2
            by contradiction
          next
            case C_2_Auth_case_3
            solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.1, $S, ~a.1, ss.1,
                                     <~nc, $pc, z>, config_hash.1, 'no_auth'
                   ) ▶₀ #vr.11 )
              case C_1_KC_case_1
              by contradiction
            next
              case C_1_KC_case_2
              by contradiction
            next
              case C_1_KC_case_3
              by contradiction
            qed
          next
            case csign
            by contradiction
          qed
        qed
      next
        case S_2_case_1
        solve( !KU( senc(hmac(<
                               HKDFExpand(<HKDF(<'0', es, 'extractedSS', '256'>), 
                                           'finished_secret', 
                                           h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>), 
                               'client_finished', <<~nc, $pc, z>, ~ns, $ps>, $exts>),
                         HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                      'handshake_key_expansion', 
                                      h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>))
               ) @ #vk.3 )
          case C_2_NoAuth
          solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
                 (∃ #j peer2.
                   (RunningTranscript( $S, peer2, 'server',
                                       <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                    ) @ #j)
                  ∧
                   #j < #vr.4) )
            case case_1
            by contradiction
          next
            case case_2
            solve( RunningTranscript( $S, peer2, 'server',
                                      <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                   ) @ #j.5 )
              case S_1_PSK
              solve( (∃ #j.
                       (RunningPSK( $S, $C, 'server', <~psk_id, es> ) @ #j) ∧
                       (AuthStatus( $S, $C, 'server', 'authenticated' ) @ #j)
                      ∧
                       #j < #vr.3)  ∥
                     (∃ #j role2.
                       (FreshPSK( ~psk_id, es ) @ #j) ∧
                       (GenPSK( $S, 'server' ) @ #j) ∧
                       (GenPSK( $C, role2 ) @ #j) ∧
                       ('authenticated' = 'no_auth')
                      ∧
                       (#j < #vr.3) ∧ (¬(role2 = 'server'))) )
                case case_1
                solve( AuthStatus( $S, $C, 'server', 'authenticated' ) @ #j.5 )
                  case S_3_NST
                  solve( RunningPSK( $S, $C, 'server', <~psk_id, es> ) @ #j )
                    case S_3_NST
                    solve( (∃ #j.
                             (RunningPSK( $C.1, $S, 'client',
                                          <~psk_id.1, 
                                           HKDFExpand(<
                                                       HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                                             HKDF(<'0', es, 'extractedES', '256'>), 
                                                             'master_secret', '256'>), 
                                                       'resumption_master_secret', h(h(messages)), 
                                                       '256'>)
                                          >
                              ) @ #j) ∧
                             (AuthStatus( $C.1, $S, 'client', auth_status ) @ #j)
                            ∧
                             #j < #vr.8)  ∥
                           (∃ #j role2.
                             (FreshPSK( ~psk_id.1,
                                        HKDFExpand(<
                                                    HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                                          HKDF(<'0', es, 'extractedES', '256'>), 
                                                          'master_secret', '256'>), 
                                                    'resumption_master_secret', h(h(messages)), 
                                                    '256'>)
                              ) @ #j) ∧
                             (GenPSK( $C.1, 'client' ) @ #j) ∧
                             (GenPSK( $S, role2 ) @ #j) ∧
                             (auth_status = 'no_auth')
                            ∧
                             (#j < #vr.8) ∧ (¬(role2 = 'client'))) )
                      case case_1
                      solve( RunningPSK( $C.1, $S, 'client',
                                         <~psk_id.1, 
                                          HKDFExpand(<
                                                      HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                                            HKDF(<'0', es, 'extractedES', '256'>), 
                                                            'master_secret', '256'>), 
                                                      'resumption_master_secret', h(h(messages)), 
                                                      '256'>)
                                         >
                             ) @ #j.7 )
                        case C_3_NST
                        solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
                               (∃ #j peer2.
                                 (RunningNonces( $S, peer2, 'server', <~nc, ~ns> ) @ #j)
                                ∧
                                 #j < #vr.6) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          solve( RunningNonces( $S, peer2, 'server', <~nc, ~ns> ) @ #j.9 )
                            case S_1_PSK
                            solve( (∃ #j.
                                     (!KU( HKDFExpand(<
                                                       HKDF(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                                             HKDF(<'0', es, 'extractedES', '256'>), 
                                                             'master_secret', '256'>), 
                                                       'resumption_master_secret', h(h(messages)), 
                                                       '256'>)
                                      ) @ #j)
                                    ∧
                                     #j < #vk.20)  ∥
                                   (∃ es2 S C #j.
                                     (RunningTranscript( S, C, 'server',
                                                         <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                                      ) @ #j) ∧
                                     (RunningSecrets( S, C, 'server',
                                                      <
                                                       HKDFExpand(<
                                                                   HKDF(<
                                                                         HKDF(<'0', ss, 
                                                                               'extractedSS', '256'
                                                                              >), 
                                                                         HKDF(<'0', es, 
                                                                               'extractedES', '256'
                                                                              >), 
                                                                         'master_secret', '256'>), 
                                                                   'resumption_master_secret', 
                                                                   h(h(messages)), '256'>), 
                                                       es2>
                                      ) @ #j)
                                    ∧
                                     #j < #vk.20) )
                              case case_1
                              by contradiction
                            next
                              case case_2
                              solve( RunningTranscript( S.1, C.2, 'server',
                                                        <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                                     ) @ #j.9 )
                                case S_1_PSK
                                solve( RunningSecrets( $S, $C, 'server',
                                                       <
                                                        HKDFExpand(<
                                                                    HKDF(<
                                                                          HKDF(<'0', ss, 
                                                                                'extractedSS', '256'
                                                                               >), 
                                                                          HKDF(<'0', es, 
                                                                                'extractedES', '256'
                                                                               >), 
                                                                          'master_secret', '256'>), 
                                                                    'resumption_master_secret', 
                                                                    h(h(messages)), '256'>), 
                                                        es2>
                                       ) @ #vr.2 )
                                  case S_1_PSK
                                  solve( F_St_S_2_init( ~ns.1, $C, ~nc.1, $pc.1, $S, ~ns.1, $ps.1,
                                                        ss, es, messages, config_hash.1,
                                                        'authenticated'
                                         ) ▶₀ #j )
                                    case S_2_Auth_case_1
                                    solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #j.
                                             (RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                              ) @ #j)
                                            ∧
                                             (¬(last(#j))) ∧ (#j < #vr.9)) )
                                      case case_1
                                      by contradiction
                                    next
                                      case case_2
                                      by contradiction
                                    next
                                      case case_3
                                      solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S, ~ns.2,
                                                            $ps.2, es, es,
                                                            <<<~nc.1, $pc.1, z>, ~ns.1, $ps.1>, 
                                                             $exts>,
                                                            config_hash.2, auth_status
                                             ) ▶₀ #j.1 )
                                        case C_2_NoAuth
                                        solve( RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                               ) @ #j.12 )
                                          case C_2
                                          by solve( F_St_C_1_init( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                   ~a.2, prev_messages,
                                                                   auth_status.1
                                                    ) ▶₀ #j.2 )
                                        next
                                          case C_2_KC
                                          by solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                      ~a.2, ss, prev_messages,
                                                                      config_hash.4, auth_status.1
                                                    ) ▶₀ #j.2 )
                                        next
                                          case C_2_PSK
                                          solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                    ~a.2, ss, prev_messages,
                                                                    config_hash.4, auth_status.1
                                                 ) ▶₀ #j.2 )
                                            case C_1_PSK
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case C_2_PSK_DHE
                                          by solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                       ~a.2, ss, prev_messages,
                                                                       config_hash.4, auth_status.1
                                                    ) ▶₀ #j.2 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case S_2_Auth_case_2
                                    solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S, ~ns.2,
                                                          $ps.2, ss, es,
                                                          <
                                                           <<~nc.1, $pc.1, z>, ~ns.1, $ps.1, 'g'^~b
                                                           >, 
                                                           $exts>,
                                                          config_hash.2, auth_status
                                           ) ▶₀ #j.1 )
                                      case C_2_NoAuth
                                      solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                             (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                             (∃ #j.
                                               (RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                                ) @ #j)
                                              ∧
                                               (¬(last(#j))) ∧ (#j < #vr.9)) )
                                        case case_1
                                        by contradiction
                                      next
                                        case case_2
                                        by contradiction
                                      next
                                        case case_3
                                        solve( RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                               ) @ #j.14 )
                                          case C_2
                                          solve( Start( ~nc.1, $C, 'client' ) @ #j.16 )
                                            case C_1_PSK
                                            by contradiction
                                          qed
                                        next
                                          case C_2_KC
                                          by solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                      ~a.2, ss.1, prev_messages,
                                                                      config_hash.4, auth_status.1
                                                    ) ▶₀ #j.2 )
                                        next
                                          case C_2_PSK
                                          solve( Start( ~ns, $S, 'server' ) @ #j.3 )
                                            case S_1_PSK
                                            by solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1, $pc.2,
                                                                         $S, ~a.2, ss.1,
                                                                         prev_messages,
                                                                         config_hash.3, auth_status
                                                      ) ▶₀ #j.2 )
                                          qed
                                        next
                                          case C_2_PSK_DHE
                                          solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1, $pc.2, $S,
                                                                    ~a.2, ss.1, prev_messages,
                                                                    config_hash.4, auth_status.1
                                                 ) ▶₀ #j.2 )
                                            case C_1_PSK
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case S_2_Auth_case_3
                                    solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #j.
                                             (RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                              ) @ #j)
                                            ∧
                                             (¬(last(#j))) ∧ (#j < #vr.9)) )
                                      case case_1
                                      by contradiction
                                    next
                                      case case_2
                                      by contradiction
                                    next
                                      case case_3
                                      solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S, ~ns.2,
                                                            $ps.2, es, es,
                                                            <
                                                             <
                                                              <
                                                               <
                                                                <<~nc.1, $pc.1, z>, ~ns.1, $ps.1, 
                                                                 'g'^~b>, 
                                                                $exts, 'g'^~y, $cert_req, pk(~ltkS)
                                                               >, 
                                                               sign(<
                                                                     <
                                                                      <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                       $ps.1, 'g'^~b>, 
                                                                      $exts, 'g'^~y, $cert_req, 
                                                                      pk(~ltkS)>, 
                                                                     'server_cert_verify'>,
                                                                    ~ltkS)
                                                              >, 
                                                              pk(~ltkC)>, 
                                                             sign(<
                                                                   <
                                                                    <
                                                                     <
                                                                      <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                       $ps.1, 'g'^~b>, 
                                                                      $exts, 'g'^~y, $cert_req, 
                                                                      pk(~ltkS)>, 
                                                                     sign(<
                                                                           <
                                                                            <<~nc.1, $pc.1, z>, 
                                                                             ~ns.1, $ps.1, 'g'^~b>, 
                                                                            $exts, 'g'^~y, 
                                                                            $cert_req, pk(~ltkS)>, 
                                                                           'server_cert_verify'>,
                                                                          ~ltkS)
                                                                    >, 
                                                                    pk(~ltkC)>, 
                                                                   'client_cert_verify'>,
                                                                  ~ltkC)
                                                            >,
                                                            config_hash.1, auth_status
                                             ) ▶₀ #j.1 )
                                        case C_2_Auth_case_1
                                        by contradiction
                                      next
                                        case C_2_Auth_case_2
                                        by contradiction
                                      next
                                        case C_2_Auth_case_3
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case S_2_Auth_case_4
                                    solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                           (∃ #j.
                                             (RunningNonces( $C, $S, 'client', <~nc.1, ~ns.1>
                                              ) @ #j)
                                            ∧
                                             (¬(last(#j))) ∧ (#j < #vr.9)) )
                                      case case_1
                                      by contradiction
                                    next
                                      case case_2
                                      by contradiction
                                    next
                                      case case_3
                                      solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S, ~ns.2,
                                                            $ps.2, ss, es,
                                                            <
                                                             <
                                                              <
                                                               <
                                                                <<~nc.1, $pc.1, z>, ~ns.1, $ps.1, 
                                                                 'g'^~b>, 
                                                                $exts, 'g'^~y2, $cert_req, pk(~ltkS)
                                                               >, 
                                                               sign(<
                                                                     <
                                                                      <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                       $ps.1, 'g'^~b>, 
                                                                      $exts, 'g'^~y2, $cert_req, 
                                                                      pk(~ltkS)>, 
                                                                     'server_cert_verify'>,
                                                                    ~ltkS)
                                                              >, 
                                                              pk(~ltkC)>, 
                                                             sign(<
                                                                   <
                                                                    <
                                                                     <
                                                                      <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                       $ps.1, 'g'^~b>, 
                                                                      $exts, 'g'^~y2, $cert_req, 
                                                                      pk(~ltkS)>, 
                                                                     sign(<
                                                                           <
                                                                            <<~nc.1, $pc.1, z>, 
                                                                             ~ns.1, $ps.1, 'g'^~b>, 
                                                                            $exts, 'g'^~y2, 
                                                                            $cert_req, pk(~ltkS)>, 
                                                                           'server_cert_verify'>,
                                                                          ~ltkS)
                                                                    >, 
                                                                    pk(~ltkC)>, 
                                                                   'client_cert_verify'>,
                                                                  ~ltkC)
                                                            >,
                                                            config_hash.1, auth_status
                                             ) ▶₀ #j.1 )
                                        case C_2_Auth_case_1
                                        by contradiction
                                      next
                                        case C_2_Auth_case_2
                                        by contradiction
                                      next
                                        case C_2_Auth_case_3
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case csenc
          solve( !KU( HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                   'handshake_key_expansion', 
                                   h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>)
                 ) @ #vk.14 )
            case cHKDFExpand1
            solve( !KU( HKDF(<'0', es, 'extractedES', '256'>) ) @ #vk.16 )
              case cHKDF
              solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                     (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              qed
            qed
          qed
        qed
      next
        case S_2_case_2
        solve( !KU( senc(hmac(<
                               HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                           'finished_secret', 
                                           h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'
                                          >), 
                               'client_finished', <<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>),
                         HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                      'handshake_key_expansion', 
                                      h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>))
               ) @ #vk.3 )
          case C_2_NoAuth
          solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
                 (∃ #j peer2.
                   (RunningTranscript( $S, peer2, 'server',
                                       <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                    ) @ #j)
                  ∧
                   #j < #vr.4) )
            case case_1
            by contradiction
          next
            case case_2
            solve( RunningTranscript( $S, peer2, 'server',
                                      <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                   ) @ #j.5 )
              case S_1_PSK_DHE
              solve( Start( ~ns, $S, 'server' ) @ #j )
                case S_1_PSK_DHE
                solve( Start( ~ns, $S, 'server' ) @ #j.1 )
                  case S_1_PSK_DHE
                  solve( Start( ~ns, $S, 'server' ) @ #j.1 )
                    case S_1_PSK_DHE
                    solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
                           (∃ #j peer2.
                             (RunningNonces( $S, peer2, 'server', <~nc, ~ns> ) @ #j)
                            ∧
                             #j < #vr.5) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      solve( RunningNonces( $S, peer2, 'server', <~nc, ~ns> ) @ #j.3 )
                        case S_1_PSK_DHE
                        solve( (∃ #j. (!KU( ss ) @ #j) ∧ #j < #vk.21)  ∥
                               (∃ es2 S C #j.
                                 (RunningTranscript( S, C, 'server',
                                                     <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                                  ) @ #j) ∧
                                 (RunningSecrets( S, C, 'server', <ss, es2> ) @ #j)
                                ∧
                                 #j < #vk.21) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          solve( RunningTranscript( S.1, C.2, 'server',
                                                    <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                                 ) @ #j.3 )
                            case S_1_PSK_DHE
                            solve( RunningSecrets( $S, $C, 'server', <ss, es2> ) @ #j )
                              case S_1_PSK_DHE
                              solve( (∃ #j.
                                       (RunningPSK( $S, $C, 'server', <~psk_id, ss> ) @ #j) ∧
                                       (AuthStatus( $S, $C, 'server', 'authenticated' ) @ #j)
                                      ∧
                                       #j < #vr.2)  ∥
                                     (∃ #j role2.
                                       (FreshPSK( ~psk_id, ss ) @ #j) ∧
                                       (GenPSK( $S, 'server' ) @ #j) ∧
                                       (GenPSK( $C, role2 ) @ #j) ∧
                                       ('authenticated' = 'no_auth')
                                      ∧
                                       (#j < #vr.2) ∧ (¬(role2 = 'server'))) )
                                case case_1
                                solve( Start( ~nc, $C.1, 'client' ) @ #j.1 )
                                  case C_1_PSK
                                  solve( Start( ~nc, $C.1, 'client' ) @ #j.2 )
                                    case C_1_PSK
                                    solve( RunningPSK( $S, $C, 'server', <~psk_id, ss> ) @ #j.2 )
                                      case S_3_NST
                                      solve( AuthStatus( $S, $C, 'server', 'authenticated'
                                             ) @ #j.2 )
                                        case S_3_NST
                                        solve( (∃ #j.
                                                 (RunningPSK( $C.1, $S, 'client',
                                                              <~psk_id.1, 
                                                               HKDFExpand(<
                                                                           HKDF(<
                                                                                 HKDF(<'0', ss, 
                                                                                       'extractedSS', 
                                                                                       '256'>), 
                                                                                 HKDF(<'0', es, 
                                                                                       'extractedES', 
                                                                                       '256'>), 
                                                                                 'master_secret', 
                                                                                 '256'>), 
                                                                           'resumption_master_secret', 
                                                                           h(h(messages)), '256'>)
                                                              >
                                                  ) @ #j) ∧
                                                 (AuthStatus( $C.1, $S, 'client', auth_status
                                                  ) @ #j)
                                                ∧
                                                 #j < #vr.6)  ∥
                                               (∃ #j role2.
                                                 (FreshPSK( ~psk_id.1,
                                                            HKDFExpand(<
                                                                        HKDF(<
                                                                              HKDF(<'0', ss, 
                                                                                    'extractedSS', 
                                                                                    '256'>), 
                                                                              HKDF(<'0', es, 
                                                                                    'extractedES', 
                                                                                    '256'>), 
                                                                              'master_secret', '256'
                                                                             >), 
                                                                        'resumption_master_secret', 
                                                                        h(h(messages)), '256'>)
                                                  ) @ #j) ∧
                                                 (GenPSK( $C.1, 'client' ) @ #j) ∧
                                                 (GenPSK( $S, role2 ) @ #j) ∧
                                                 (auth_status = 'no_auth')
                                                ∧
                                                 (#j < #vr.6) ∧ (¬(role2 = 'client'))) )
                                          case case_1
                                          solve( RunningPSK( $C.1, $S, 'client',
                                                             <~psk_id.1, 
                                                              HKDFExpand(<
                                                                          HKDF(<
                                                                                HKDF(<'0', ss, 
                                                                                      'extractedSS', 
                                                                                      '256'>), 
                                                                                HKDF(<'0', es, 
                                                                                      'extractedES', 
                                                                                      '256'>), 
                                                                                'master_secret', 
                                                                                '256'>), 
                                                                          'resumption_master_secret', 
                                                                          h(h(messages)), '256'>)
                                                             >
                                                 ) @ #j.4 )
                                            case C_3_NST
                                            solve( AuthStatus( $C.1, $S, 'client', auth_status
                                                   ) @ #j.3 )
                                              case C_3_NST
                                              solve( F_St_S_2_init( ~ns.1, $C, ~nc.1, $pc.1, $S,
                                                                    ~ns.1, $ps.1, ss, es, messages,
                                                                    config_hash.2, 'authenticated'
                                                     ) ▶₀ #j.2 )
                                                case S_2_Auth_case_1
                                                solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                                       (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                                       (∃ #j.
                                                         (RunningNonces( $C, $S, 'client',
                                                                         <~nc.1, ~ns.1>
                                                          ) @ #j)
                                                        ∧
                                                         (¬(last(#j))) ∧ (#j < #vr.7)) )
                                                  case case_1
                                                  by contradiction
                                                next
                                                  case case_2
                                                  by contradiction
                                                next
                                                  case case_3
                                                  solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2,
                                                                        $S, ~ns.2, $ps.2, es, es,
                                                                        <
                                                                         <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                          $ps.1>, 
                                                                         $exts>,
                                                                        config_hash.3, auth_status
                                                         ) ▶₀ #j.3 )
                                                    case C_2_NoAuth
                                                    solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
                                                           (∃ #j peer2.
                                                             (RunningNonces( $S, peer2, 'server',
                                                                             <~nc.1, ~ns.1>
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction
                                                    next
                                                      case case_2
                                                      solve( RunningNonces( $C, $S, 'client',
                                                                            <~nc.1, ~ns.1>
                                                             ) @ #j.9 )
                                                        case C_2
                                                        by solve( F_St_C_1_init( ~nc.1, $C, ~nc.1,
                                                                                 $pc.2, $S, ~a.2,
                                                                                 prev_messages,
                                                                                 auth_status
                                                                  ) ▶₀ #j.4 )
                                                      next
                                                        case C_2_KC
                                                        by solve( F_St_C_1_init_KC( ~nc.1, $C,
                                                                                    ~nc.1, $pc.2,
                                                                                    $S, ~a.2, ss,
                                                                                    prev_messages,
                                                                                    config_hash.4,
                                                                                    auth_status
                                                                  ) ▶₀ #j.4 )
                                                      next
                                                        case C_2_PSK
                                                        solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1,
                                                                                  $pc.2, $S, ~a.2,
                                                                                  ss, prev_messages,
                                                                                  config_hash.4,
                                                                                  auth_status
                                                               ) ▶₀ #j.4 )
                                                          case C_1_PSK
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case C_2_PSK_DHE
                                                        by solve( F_St_C_1_init_PSK( ~nc.1, $C,
                                                                                     ~nc.1, $pc.2,
                                                                                     $S, ~a.2, ss,
                                                                                     prev_messages,
                                                                                     config_hash.4,
                                                                                     auth_status
                                                                  ) ▶₀ #j.4 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case S_2_Auth_case_2
                                                solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ ¬(last(#r)))  ∥
                                                       (∃ #r. (RevLtk( $S ) @ #r) ∧ ¬(last(#r)))  ∥
                                                       (∃ #j.
                                                         (RunningNonces( $C, $S, 'client',
                                                                         <~nc.1, ~ns.1>
                                                          ) @ #j)
                                                        ∧
                                                         (¬(last(#j))) ∧ (#j < #vr.7)) )
                                                  case case_1
                                                  by contradiction
                                                next
                                                  case case_2
                                                  by contradiction
                                                next
                                                  case case_3
                                                  solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2,
                                                                        $S, ~ns.2, $ps.2, ss, es,
                                                                        <
                                                                         <<~nc.1, $pc.1, z>, ~ns.1, 
                                                                          $ps.1, 'g'^~b>, 
                                                                         $exts>,
                                                                        config_hash.3, auth_status
                                                         ) ▶₀ #j.3 )
                                                    case C_2_NoAuth
                                                    solve( RunningNonces( $C, $S, 'client',
                                                                          <~nc.1, ~ns.1>
                                                           ) @ #j.9 )
                                                      case C_2
                                                      by solve( F_St_C_1_init( ~nc.1, $C, ~nc.1,
                                                                               $pc.2, $S, ~a.2,
                                                                               prev_messages,
                                                                               auth_status
                                                                ) ▶₀ #j.4 )
                                                    next
                                                      case C_2_KC
                                                      by solve( F_St_C_1_init_KC( ~nc.1, $C, ~nc.1,
                                                                                  $pc.2, $S, ~a.2,
                                                                                  ss.1,
                                                                                  prev_messages,
                                                                                  config_hash.4,
                                                                                  auth_status
                                                                ) ▶₀ #j.4 )
                                                    next
                                                      case C_2_PSK
                                                      solve( Start( ~ns.1, $S, 'server' ) @ #j.5 )
                                                        case S_1_PSK_DHE
                                                        by solve( F_St_C_1_init_PSK( ~nc.1, $C,
                                                                                     ~nc.1, $pc.2,
                                                                                     $S, ~a.2, ss.1,
                                                                                     prev_messages,
                                                                                     config_hash.4,
                                                                                     auth_status
                                                                  ) ▶₀ #j.4 )
                                                      qed
                                                    next
                                                      case C_2_PSK_DHE
                                                      solve( F_St_C_1_init_PSK( ~nc.1, $C, ~nc.1,
                                                                                $pc.2, $S, ~a.2,
                                                                                ss.1, prev_messages,
                                                                                config_hash.4,
                                                                                auth_status
                                                             ) ▶₀ #j.4 )
                                                        case C_1_PSK
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case S_2_Auth_case_3
                                                solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S,
                                                                      ~ns.2, $ps.2, es, es,
                                                                      <
                                                                       <
                                                                        <
                                                                         <
                                                                          <<~nc.1, $pc.1, z>, 
                                                                           ~ns.1, $ps.1, 'g'^~b>, 
                                                                          $exts, 'g'^~y, $cert_req, 
                                                                          pk(~ltkS)>, 
                                                                         sign(<
                                                                               <
                                                                                <<~nc.1, $pc.1, z>, 
                                                                                 ~ns.1, $ps.1, 
                                                                                 'g'^~b>, 
                                                                                $exts, 'g'^~y, 
                                                                                $cert_req, pk(~ltkS)
                                                                               >, 
                                                                               'server_cert_verify'
                                                                              >,
                                                                              ~ltkS)
                                                                        >, 
                                                                        pk(~ltkC)>, 
                                                                       sign(<
                                                                             <
                                                                              <
                                                                               <
                                                                                <<~nc.1, $pc.1, z>, 
                                                                                 ~ns.1, $ps.1, 
                                                                                 'g'^~b>, 
                                                                                $exts, 'g'^~y, 
                                                                                $cert_req, pk(~ltkS)
                                                                               >, 
                                                                               sign(<
                                                                                     <
                                                                                      <
                                                                                       <~nc.1, 
                                                                                        $pc.1, z>, 
                                                                                       ~ns.1, 
                                                                                       $ps.1, 'g'^~b
                                                                                      >, 
                                                                                      $exts, 
                                                                                      'g'^~y, 
                                                                                      $cert_req, 
                                                                                      pk(~ltkS)>, 
                                                                                     'server_cert_verify'
                                                                                    >,
                                                                                    ~ltkS)
                                                                              >, 
                                                                              pk(~ltkC)>, 
                                                                             'client_cert_verify'>,
                                                                            ~ltkC)
                                                                      >,
                                                                      config_hash.2, auth_status
                                                       ) ▶₀ #j.3 )
                                                  case C_2_Auth_case_1
                                                  by contradiction
                                                next
                                                  case C_2_Auth_case_2
                                                  by contradiction
                                                next
                                                  case C_2_Auth_case_3
                                                  by contradiction
                                                qed
                                              next
                                                case S_2_Auth_case_4
                                                solve( F_St_C_2_init( ~nc.2, $C.1, ~nc.2, $pc.2, $S,
                                                                      ~ns.2, $ps.2, ss, es,
                                                                      <
                                                                       <
                                                                        <
                                                                         <
                                                                          <<~nc.1, $pc.1, z>, 
                                                                           ~ns.1, $ps.1, 'g'^~b>, 
                                                                          $exts, 'g'^~y2, 
                                                                          $cert_req, pk(~ltkS)>, 
                                                                         sign(<
                                                                               <
                                                                                <<~nc.1, $pc.1, z>, 
                                                                                 ~ns.1, $ps.1, 
                                                                                 'g'^~b>, 
                                                                                $exts, 'g'^~y2, 
                                                                                $cert_req, pk(~ltkS)
                                                                               >, 
                                                                               'server_cert_verify'
                                                                              >,
                                                                              ~ltkS)
                                                                        >, 
                                                                        pk(~ltkC)>, 
                                                                       sign(<
                                                                             <
                                                                              <
                                                                               <
                                                                                <<~nc.1, $pc.1, z>, 
                                                                                 ~ns.1, $ps.1, 
                                                                                 'g'^~b>, 
                                                                                $exts, 'g'^~y2, 
                                                                                $cert_req, pk(~ltkS)
                                                                               >, 
                                                                               sign(<
                                                                                     <
                                                                                      <
                                                                                       <~nc.1, 
                                                                                        $pc.1, z>, 
                                                                                       ~ns.1, 
                                                                                       $ps.1, 'g'^~b
                                                                                      >, 
                                                                                      $exts, 
                                                                                      'g'^~y2, 
                                                                                      $cert_req, 
                                                                                      pk(~ltkS)>, 
                                                                                     'server_cert_verify'
                                                                                    >,
                                                                                    ~ltkS)
                                                                              >, 
                                                                              pk(~ltkC)>, 
                                                                             'client_cert_verify'>,
                                                                            ~ltkC)
                                                                      >,
                                                                      config_hash.2, auth_status
                                                       ) ▶₀ #j.3 )
                                                  case C_2_Auth_case_1
                                                  by contradiction
                                                next
                                                  case C_2_Auth_case_2
                                                  by contradiction
                                                next
                                                  case C_2_Auth_case_3
                                                  by contradiction
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case csenc
          solve( !KU( HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                   'handshake_key_expansion', 
                                   h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>)
                 ) @ #vk.14 )
            case cHKDFExpand1
            solve( !KU( HKDF(<'0', es, 'extractedES', '256'>) ) @ #vk.16 )
              case cHKDF
              solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                     (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction
  next
    case case_3
    by contradiction
  next
    case case_4
    by contradiction
  qed
qed

lemma mutual_transcript_agreement [reuse]:
  all-traces
  "∀ actor peer transcript #i.
    ((CommitTranscript( actor, peer, 'server', transcript ) @ #i) ∧
     (¬((∃ #r. RevLtk( peer ) @ #r) ∨ (∃ #r. RevLtk( actor ) @ #r)))) ⇒
    (∃ #j.
      (RunningTranscript( peer, actor, 'client', transcript ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer transcript #i.
  (CommitTranscript( actor, peer, 'server', transcript ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #j.
    (RunningTranscript( peer, actor, 'client', transcript ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
simplify
solve( CommitTranscript( actor, peer, 'server', transcript ) @ #i )
  case S_2_Auth
  solve( (∃ #r. (RevLtk( $C ) @ #r))  ∥
         (∃ #r. (RevLtk( $S ) @ #r))  ∥
         (∃ #j.
           (RunningNonces( $C, $S, 'client', <~nc, ~ns> ) @ #j) ∧ #j < #i) )
    case case_1
    by contradiction
  next
    case case_2
    by contradiction
  next
    case case_3
    solve( F_St_S_2_init( ~ns, $C, ~nc, $pc, $S, ~ns, $ps, ss, es,
                          transcript, config_hash, 'auth_recv'
           ) ▶₀ #i )
      case S_2_RecvAuth_case_1
      solve( !KU( senc(<pk(~ltkC), 
                        sign(<
                              <
                               <
                                <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                 pk(~ltkS)>, 
                                sign(<
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                       pk(~ltkS)>, 
                                      'server_cert_verify'>,
                                     ~ltkS)
                               >, 
                               pk(~ltkC)>, 
                              'client_cert_verify'>,
                             ~ltkC), 
                        hmac(<
                              HKDFExpand(<HKDF(<'0', es, 'extractedSS', '256'>), 
                                          'finished_secret', 
                                          h(h(<
                                               <
                                                <
                                                 <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                                  $cert_req, pk(~ltkS)>, 
                                                 sign(<
                                                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                        'g'^~y, $cert_req, pk(~ltkS)>, 
                                                       'server_cert_verify'>,
                                                      ~ltkS)
                                                >, 
                                                pk(~ltkC)>, 
                                               sign(<
                                                     <
                                                      <
                                                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                        'g'^~y, $cert_req, pk(~ltkS)>, 
                                                       sign(<
                                                             <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, 
                                                              $exts, 'g'^~y, $cert_req, pk(~ltkS)>, 
                                                             'server_cert_verify'>,
                                                            ~ltkS)
                                                      >, 
                                                      pk(~ltkC)>, 
                                                     'client_cert_verify'>,
                                                    ~ltkC)
                                              >)), 
                                          '256'>), 
                              'client_finished', 
                              <
                               <
                                <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                 pk(~ltkS)>, 
                                sign(<
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                       pk(~ltkS)>, 
                                      'server_cert_verify'>,
                                     ~ltkS)
                               >, 
                               pk(~ltkC)>, 
                              sign(<
                                    <
                                     <
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                       pk(~ltkS)>, 
                                      sign(<
                                            <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                             $cert_req, pk(~ltkS)>, 
                                            'server_cert_verify'>,
                                           ~ltkS)
                                     >, 
                                     pk(~ltkC)>, 
                                    'client_cert_verify'>,
                                   ~ltkC)
                             >)
                       >,
                       HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                    'handshake_key_expansion', 
                                    h(h(<
                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                          $cert_req, pk(~ltkS)>, 
                                         sign(<
                                               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, 
                                                $cert_req, pk(~ltkS)>, 
                                               'server_cert_verify'>,
                                              ~ltkS)
                                        >)), 
                                    '256'>))
             ) @ #vk.3 )
        case C_2_Auth_case_1
        by contradiction
      next
        case C_2_Auth_case_2
        by contradiction
      next
        case C_2_Auth_case_3
        by contradiction
      next
        case csenc
        solve( !KU( sign(<
                          <
                           <
                            <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                             pk(~ltkS)>, 
                            sign(<
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y, $cert_req, 
                                   pk(~ltkS)>, 
                                  'server_cert_verify'>,
                                 ~ltkS)
                           >, 
                           pk(~ltkC)>, 
                          'client_cert_verify'>,
                         ~ltkC)
               ) @ #vk.13 )
          case C_2_Auth_case_1
          by contradiction
        next
          case C_2_Auth_case_2
          by contradiction
        next
          case C_2_Auth_case_3
          by contradiction
        next
          case csign
          by contradiction
        qed
      qed
    next
      case S_2_RecvAuth_case_2
      solve( !KU( senc(<pk(~ltkC), 
                        sign(<
                              <
                               <
                                <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                 pk(~ltkS)>, 
                                sign(<
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                       $cert_req, pk(~ltkS)>, 
                                      'server_cert_verify'>,
                                     ~ltkS)
                               >, 
                               pk(~ltkC)>, 
                              'client_cert_verify'>,
                             ~ltkC), 
                        hmac(<
                              HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                          'finished_secret', 
                                          h(h(<
                                               <
                                                <
                                                 <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                  'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                 sign(<
                                                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                        'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                       'server_cert_verify'>,
                                                      ~ltkS)
                                                >, 
                                                pk(~ltkC)>, 
                                               sign(<
                                                     <
                                                      <
                                                       <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 
                                                        'g'^~y2, $cert_req, pk(~ltkS)>, 
                                                       sign(<
                                                             <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, 
                                                              $exts, 'g'^~y2, $cert_req, pk(~ltkS)
                                                             >, 
                                                             'server_cert_verify'>,
                                                            ~ltkS)
                                                      >, 
                                                      pk(~ltkC)>, 
                                                     'client_cert_verify'>,
                                                    ~ltkC)
                                              >)), 
                                          '256'>), 
                              'client_finished', 
                              <
                               <
                                <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                 pk(~ltkS)>, 
                                sign(<
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                       $cert_req, pk(~ltkS)>, 
                                      'server_cert_verify'>,
                                     ~ltkS)
                               >, 
                               pk(~ltkC)>, 
                              sign(<
                                    <
                                     <
                                      <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                       $cert_req, pk(~ltkS)>, 
                                      sign(<
                                            <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                             $cert_req, pk(~ltkS)>, 
                                            'server_cert_verify'>,
                                           ~ltkS)
                                     >, 
                                     pk(~ltkC)>, 
                                    'client_cert_verify'>,
                                   ~ltkC)
                             >)
                       >,
                       HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                    'handshake_key_expansion', 
                                    h(h(<
                                         <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                          $cert_req, pk(~ltkS)>, 
                                         sign(<
                                               <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, 
                                                $cert_req, pk(~ltkS)>, 
                                               'server_cert_verify'>,
                                              ~ltkS)
                                        >)), 
                                    '256'>))
             ) @ #vk.3 )
        case C_2_Auth_case_1
        by contradiction
      next
        case C_2_Auth_case_2
        by contradiction
      next
        case C_2_Auth_case_3
        by contradiction
      next
        case csenc
        solve( !KU( sign(<
                          <
                           <
                            <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                             pk(~ltkS)>, 
                            sign(<
                                  <<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts, 'g'^~y2, $cert_req, 
                                   pk(~ltkS)>, 
                                  'server_cert_verify'>,
                                 ~ltkS)
                           >, 
                           pk(~ltkC)>, 
                          'client_cert_verify'>,
                         ~ltkC)
               ) @ #vk.15 )
          case C_2_Auth_case_1
          by contradiction
        next
          case C_2_Auth_case_2
          by contradiction
        next
          case C_2_Auth_case_3
          by contradiction
        next
          case csign
          by contradiction
        qed
      qed
    next
      case S_2_case_1
      solve( !KU( senc(hmac(<
                             HKDFExpand(<HKDF(<'0', es, 'extractedSS', '256'>), 
                                         'finished_secret', 
                                         h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>), 
                             'client_finished', <<~nc, $pc, z>, ~ns, $ps>, $exts>),
                       HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                    'handshake_key_expansion', 
                                    h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>))
             ) @ #vk.3 )
        case C_2_NoAuth
        solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
               (∃ #j peer2.
                 (RunningTranscript( $S, peer2, 'server',
                                     <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                  ) @ #j)
                ∧
                 #j < #vr.4) )
          case case_1
          by contradiction
        next
          case case_2
          solve( RunningTranscript( $S, peer2, 'server',
                                    <<<~nc, $pc, 'g'^~a>, ~ns, $ps>, $exts>
                 ) @ #j.6 )
            case S_1_PSK
            solve( RunningNonces( $C, $S, 'client', <~nc, ~ns> ) @ #j.1 )
              case C_2
              by solve( F_St_C_1_init( ~nc, $C, ~nc, $pc.1, $S, ~a.1,
                                       prev_messages, auth_status
                        ) ▶₀ #j )
            next
              case C_2_KC
              by solve( F_St_C_1_init_KC( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss,
                                          prev_messages, config_hash.1, auth_status
                        ) ▶₀ #j )
            next
              case C_2_PSK
              solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss,
                                        prev_messages, config_hash.1, auth_status
                     ) ▶₀ #j )
                case C_1_PSK
                by contradiction
              qed
            next
              case C_2_PSK_DHE
              by solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss,
                                           prev_messages, config_hash.1, auth_status
                        ) ▶₀ #j )
            qed
          qed
        qed
      next
        case csenc
        solve( !KU( HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                 'handshake_key_expansion', 
                                 h(h(<<<~nc, $pc, z>, ~ns, $ps>, $exts>)), '256'>)
               ) @ #vk.14 )
          case cHKDFExpand1
          solve( !KU( HKDF(<'0', es, 'extractedES', '256'>) ) @ #vk.16 )
            case cHKDF
            solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            qed
          qed
        qed
      qed
    next
      case S_2_case_2
      solve( !KU( senc(hmac(<
                             HKDFExpand(<HKDF(<'0', ss, 'extractedSS', '256'>), 
                                         'finished_secret', 
                                         h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>), 
                             'client_finished', <<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>),
                       HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                    'handshake_key_expansion', 
                                    h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>))
             ) @ #vk.3 )
        case C_2_NoAuth
        solve( (∃ #r. (RevLtk( $S ) @ #r))  ∥
               (∃ #j peer2.
                 (RunningTranscript( $S, peer2, 'server',
                                     <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                  ) @ #j)
                ∧
                 #j < #vr.4) )
          case case_1
          by contradiction
        next
          case case_2
          solve( RunningTranscript( $S, peer2, 'server',
                                    <<<~nc, $pc, 'g'^~a>, ~ns, $ps, 'g'^~b>, $exts>
                 ) @ #j.6 )
            case S_1_PSK_DHE
            solve( RunningNonces( $C, $S, 'client', <~nc, ~ns> ) @ #j.1 )
              case C_2
              by solve( F_St_C_1_init( ~nc, $C, ~nc, $pc.1, $S, ~a.1,
                                       prev_messages, auth_status
                        ) ▶₀ #j )
            next
              case C_2_KC
              by solve( F_St_C_1_init_KC( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss.1,
                                          prev_messages, config_hash.1, auth_status
                        ) ▶₀ #j )
            next
              case C_2_PSK
              by solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss.1,
                                           prev_messages, config_hash.1, auth_status
                        ) ▶₀ #j )
            next
              case C_2_PSK_DHE
              solve( F_St_C_1_init_PSK( ~nc, $C, ~nc, $pc.1, $S, ~a.1, ss.1,
                                        prev_messages, config_hash.1, auth_status
                     ) ▶₀ #j )
                case C_1_PSK
                by contradiction
              qed
            qed
          qed
        qed
      next
        case csenc
        solve( !KU( HKDFExpand1(<HKDF(<'0', es, 'extractedES', '256'>), 
                                 'handshake_key_expansion', 
                                 h(h(<<<~nc, $pc, z>, ~ns, $ps, 'g'^~b>, $exts>)), '256'>)
               ) @ #vk.14 )
          case cHKDFExpand1
          solve( !KU( HKDF(<'0', es, 'extractedES', '256'>) ) @ #vk.16 )
            case cHKDF
            solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #i) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end