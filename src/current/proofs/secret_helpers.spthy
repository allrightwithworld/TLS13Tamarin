theory TLS_13_secret_helpers begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: Expand/3, Extract/2, fst/1, h/1, hmac/1, mac/1, mask/2,
           pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1, true/0, unmask/2,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    unmask(mask(x, y), x) = y,
    unmask(mask(x, y), y) = x,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

/*
looping facts with injective instances:
  EarlySendStream/5, F_State_C1/29
*/

section{* TLS 1.3 *}

axiom Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

axiom Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

axiom one_ltk:
  "∀ A x y #i #j.
    ((GenLtk( A, x ) @ #i) ∧ (GenLtk( A, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

axiom one_role_per_actor:
  "∀ actor tid tid2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧
     (Start( tid2, actor, role2 ) @ #j)) ⇒
    (role = role2)"
  // safety formula

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  --[ GenLtk( $A, ~ltkA ), HonestUse( ~ltkA ) ]->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_hello:
   [ Fr( ~nc ), Fr( ~x ) ]
  --[
  C0( ~nc ), Start( ~nc, $C, 'client' ),
  RIdentity( ~nc, $C, 'client', $C ), Neq( $g1, $g2 ),
  DH( ~nc, ~x, $g1^~x ), HonestUse( ~x ), HonestUse( $g1^~x )
  ]->
   [
   F_State_C1( ~nc, $C, $S, '0',
               <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, 
                $g1^~x>,
               ~nc, '0', $g1, <$g1, $g2>, '0', ~x, '0', $g1^~x, '0', '0', 'na',
               '0', '0', Extract('0', '0'), '0', '0', '0', '0', '0', '0', '0',
               '0', '0', '0'
   ),
   Out( <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, 
         $g1^~x>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_hello_retry_request:
   [
   F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, $g1,
               <$g1, $g2>, '0', prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
               prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
               prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Fr( ~new_x ), In( <'6', '0x0303', '40', $g2> )
   ]
  --[
  C1_retry( tid ), Neq( $g1, $g2 ), Instance( tid, $C, 'client' ),
  DH( tid, ~new_x, $g2^~new_x )
  ]->
   [
   Out( <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g2, 
         $g2^~new_x>
   ),
   F_State_C1( tid, $C, $S, prev_res_psk,
               <<prev_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', prev_nc, '0', 
                $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                <'13', $sig_algs>, '40', $g2, $g2^~new_x>,
               prev_nc, prev_ns, $g2, <$g1, $g2>, 'hrr', ~new_x, prev_y, $g2^~new_x, prev_gy,
               prev_gxy, 'na', prev_psk_id, prev_edi, Extract(prev_res_psk, '0'), prev_hs, prev_ms,
               prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, '0', prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_hello:
   [
   F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, $g,
               prev_sg, prev_hrr, ~x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        '40', $g, $g^new_y>
   )
   ]
  --[
  C1( tid ), Instance( tid, $C, 'client' ),
  RecvDH( tid, $g^new_y, $g^new_y^~x ), Neq( $g^new_y, $g ),
  Neq( $g^new_y^~x, $g ),
  DHChal( $g, ~x, new_y, prev_gx, $g^new_y, $g^new_y^~x ),
  RNonces( tid, $C, 'client', <prev_nc, new_ns> )
  ]->
   [
   F_State_C2a( tid, $C, $S, prev_res_psk,
                <prev_messages, '2', '0x0303', new_ns, $cipher_suite, 
                 <'13', $sig_algs>, '40', $g, $g^new_y>,
                prev_nc, new_ns, $g, prev_sg, prev_hrr, ~x, prev_y, prev_gx, $g^new_y,
                $g^new_y^~x, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                prev_sats, prev_hs_keyc, prev_hs_keys, '0', prev_ems, prev_rms, prev_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_server_hello:
     [
     F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, $g,
                 prev_sg, prev_hrr, ~x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
          '40', $g, z>
     )
     ]
    --[
    C1( tid ), Instance( tid, $C, 'client' ), RecvDH( tid, z, z.1 ),
    Neq( z, $g ), Neq( z.1, $g ),
    DHChal( $g, ~x, new_y, prev_gx, z, z.1 ),
    RNonces( tid, $C, 'client', <prev_nc, new_ns> )
    ]->
     [
     F_State_C2a( tid, $C, $S, prev_res_psk,
                  <prev_messages, '2', '0x0303', new_ns, $cipher_suite, 
                   <'13', $sig_algs>, '40', $g, z>,
                  prev_nc, new_ns, $g, prev_sg, prev_hrr, ~x, prev_y, prev_gx, z, z.1, 'na',
                  prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                  prev_hs_keys, '0', prev_ems, prev_rms, prev_cert_req
     )
     ]
    variants (modulo AC)
    1. $g    = $g.43
       ~x    = ~x.45
       new_y = inv(~x.45)
       z     = $g.43^inv(~x.45)
       z.1   = $g.43
    
    2. $g    = $g.43
       ~x    = ~x.45
       new_y = one
       z     = $g.43
       z.1   = $g.43^~x.45
    
    3. $g    = $g.45
       ~x    = ~x.47
       new_y = new_y.49
       z     = $g.45^new_y.49
       z.1   = $g.45^(~x.47*new_y.49)
    
    4. $g    = $g.276
       ~x    = ~x.278
       new_y = inv((~x.278*x.547))
       z     = $g.276^inv((~x.278*x.547))
       z.1   = $g.276^inv(x.547)
    
    5. $g    = $g.276
       ~x    = ~x.278
       new_y = (x.547*inv(~x.278))
       z     = $g.276^(x.547*inv(~x.278))
       z.1   = $g.276^x.547
    
    6. $g    = $g.277
       ~x    = ~x.279
       new_y = (x.549*inv((~x.279*x.548)))
       z     = $g.277^(x.549*inv((~x.279*x.548)))
       z.1   = $g.277^(x.549*inv(x.548))
  */

rule (modulo E) client_gen_keys:
   [
   F_State_C2a( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  C2a( tid ), Instance( tid, $C, 'client' ),
  RMS( tid, $C, 'client', Extract('0', Extract(prev_gxy, prev_es)) ),
  RHS( tid, $C, 'client', Extract(prev_gxy, prev_es) )
  ]->
   [
   F_State_C2b( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, Extract(prev_gxy, prev_es),
                Extract('0', Extract(prev_gxy, prev_es)), prev_cats, prev_sats,
                Expand(Expand(Extract(prev_gxy, prev_es), <'clienthts', h(prev_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(prev_gxy, prev_es), <'serverhts', h(prev_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_encrypted_extensions:
   [
   F_State_C2b( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( senc(<'8', $exts>, prev_hs_keys) )
   ]
  --[ C2b( tid ), Instance( tid, $C, 'client' ) ]->
   [
   F_State_C2c( tid, $C, $S, prev_res_psk, <prev_messages, '8', $exts>,
                prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
                prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
                prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_certificate_request:
   [
   F_State_C2c( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( senc(<'13', '0', $certificate_extensions>, prev_hs_keys) )
   ]
  --[ C2c_req( tid ), Instance( tid, $C, 'client' ) ]->
   [
   F_State_C2d( tid, $C, $S, prev_res_psk,
                <prev_messages, '13', '0', $certificate_extensions>, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, '1'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_recv_certificate_request:
   [
   F_State_C2c( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[ C2c( tid ), Instance( tid, $C, 'client' ) ]->
   [
   F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_auth:
   [
   F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   !Pk( $S, pk(~ltkS) ),
   In( senc(<<'11', '0', pk(~ltkS)>, <'15', signature>, '20', 
             verify_data>,
            prev_hs_keys)
   )
   ]
  --[
  C2d( tid ), Instance( tid, $C, 'client' ), Eq( 'na', 'na' ),
  Eq( verify(signature,
             <'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, pk(~ltkS)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(prev_hs,
                          <'serverhts', 
                           h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>)>)
  ),
  CIdentity( tid, $C, 'client', <$S, 'auth'> ),
  CHS( tid, $C, 'client', prev_hs ),
  CTranscript( tid, $C, 'client',
               <<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                verify_data>
  ),
  CNonces( tid, $C, 'client', <prev_nc, prev_ns> ),
  SessionKey( $C, $S, 'client',
              <
               Expand(Expand(prev_ms,
                             <'serverats', 
                              h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                 verify_data>)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32'), 
               'auth'>
  )
  ]->
   [
   F_State_C3( tid, $C, $S, prev_res_psk,
               <<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                verify_data>,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na',
               prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms,
               Expand(prev_ms,
                      <'clientats', 
                       h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               Expand(prev_ms,
                      <'serverats', 
                       h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               prev_hs_keyc, prev_hs_keys, 'auth',
               Expand(prev_ms,
                      <'ems', 
                       h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S,
               Expand(Expand(prev_ms,
                             <'serverats', 
                              h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                 verify_data>)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /*
  rule (modulo AC) recv_server_auth:
     [
     F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                  prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                  prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                  prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     !Pk( $S, pk(~ltkS) ),
     In( senc(<<'11', '0', pk(~ltkS)>, <'15', signature>, '20', 
               verify_data>,
              prev_hs_keys)
     )
     ]
    --[
    C2d( tid ), Instance( tid, $C, 'client' ), Eq( 'na', 'na' ),
    Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(prev_hs,
                            <'serverhts', 
                             h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>)>)
    ),
    CIdentity( tid, $C, 'client', <$S, 'auth'> ),
    CHS( tid, $C, 'client', prev_hs ),
    CTranscript( tid, $C, 'client',
                 <<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                  verify_data>
    ),
    CNonces( tid, $C, 'client', <prev_nc, prev_ns> ),
    SessionKey( $C, $S, 'client',
                <
                 Expand(Expand(prev_ms,
                               <'serverats', 
                                h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                   verify_data>)
                               >,
                               '32'),
                        <'adke_wk', '0'>, '32'), 
                 'auth'>
    )
    ]->
     [
     F_State_C3( tid, $C, $S, prev_res_psk,
                 <<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                  verify_data>,
                 prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na',
                 prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms,
                 Expand(prev_ms,
                        <'clientats', 
                         h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 Expand(prev_ms,
                        <'serverats', 
                         h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 prev_hs_keyc, prev_hs_keys, 'auth',
                 Expand(prev_ms,
                        <'ems', 
                         h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 prev_rms, prev_cert_req
     ),
     RecvStream( tid, $C, $S,
                 Expand(Expand(prev_ms,
                               <'serverats', 
                                h(<<<prev_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                   verify_data>)
                               >,
                               '32'),
                        <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. ~ltkS = ~ltkS.61
       prev_messages
             = prev_messages.76
       signature
             = sign(<'server_cv', h(<prev_messages.76, '11', '0', pk(~ltkS.61)>)>,
                    ~ltkS.61)
       z     = true
    
    2. ~ltkS = ~ltkS.72
       prev_messages
             = prev_messages.87
       signature
             = signature.98
       z     = verify(signature.98,
                      <'server_cv', h(<prev_messages.87, '11', '0', pk(~ltkS.72)>)>,
                      pk(~ltkS.72))
  */

rule (modulo E) client_auth:
   [
   F_State_C3( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, '0'
   )
   ]
  --[
  C3( tid ), Instance( tid, $C, 'client' ),
  RTranscript( tid, $C, 'client',
               <prev_messages, '20', 
                hmac(<
                      Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(prev_messages)>)
               >
  ),
  RHSMS( tid, $C, 'client', <prev_hs, prev_ms> ),
  RRMS( tid, $C, 'client',
        <$S, 
         Expand(prev_ms,
                <'rms', 
                 h(<prev_messages, '20', 
                    hmac(<
                          Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                                 <'fin', '0'>, '32'), 
                          h(prev_messages)>)
                   >)
                >,
                '32'), 
         prev_messages, '20', 
         hmac(<
               Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                      <'fin', '0'>, '32'), 
               h(prev_messages)>)
        >
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk,
               <prev_messages, '20', 
                hmac(<
                      Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(prev_messages)>)
               >,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
               prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
               prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems,
               Expand(prev_ms,
                      <'rms', 
                       h(<prev_messages, '20', 
                          hmac(<
                                Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                                       <'fin', '0'>, '32'), 
                                h(prev_messages)>)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<'20', 
              hmac(<
                    Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                           <'fin', '0'>, '32'), 
                    h(prev_messages)>)
             >,
             prev_hs_keyc)
   ),
   SendStream( tid, $C, $S, Expand(prev_cats, <'adke_wk', '0'>, '32') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_auth_cert:
   [
   F_State_C3( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
               prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, '1'
   ),
   !Ltk( $C, ~ltkC )
   ]
  --[
  C3_cert( tid ), Instance( tid, $C, 'client' ),
  UseLtk( ~ltkC,
          sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
  ),
  RHSMS( tid, $C, 'client', <prev_hs, prev_ms> ),
  RTranscript( tid, $C, 'client',
               <
                <<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(prev_hs,
                                    <'clienthts', 
                                     h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>,
                                             ~ltkC)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                     >)
               >
  ),
  RRMS( tid, $C, 'client',
        <$S, 
         Expand(prev_ms,
                <'rms', 
                 h(<
                    <<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                     sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                    >, 
                    '20', 
                    hmac(<
                          Expand(Expand(prev_hs,
                                        <'clienthts', 
                                         h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                            sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)
                                                 >,
                                                 ~ltkC)
                                           >)
                                        >,
                                        '32'),
                                 <'fin', '0'>, '32'), 
                          h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                             sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                         >)
                   >)
                >,
                '32'), 
         <<prev_messages, '11', '0', pk(~ltkC)>, '15', 
          sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
         >, 
         '20', 
         hmac(<
               Expand(Expand(prev_hs,
                             <'clienthts', 
                              h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                 sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                             >,
                             '32'),
                      <'fin', '0'>, '32'), 
               h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                  sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
              >)
        >
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk,
               <
                <<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(prev_hs,
                                    <'clienthts', 
                                     h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>,
                                             ~ltkC)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                     >)
               >,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na',
               prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
               prev_hs_keys, prev_auth_status, prev_ems,
               Expand(prev_ms,
                      <'rms', 
                       h(<
                          <<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                           sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(prev_hs,
                                              <'clienthts', 
                                               h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                                  sign(<'client_cv', 
                                                        h(<prev_messages, '11', '0', pk(~ltkC)>)>,
                                                       ~ltkC)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                   sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<<'11', '0', pk(~ltkC)>, 
              <'15', 
               sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(prev_hs,
                                  <'clienthts', 
                                   h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                                      sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>,
                                           ~ltkC)
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', 
                       sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                   >)
             >,
             prev_hs_keyc)
   ),
   SendStream( tid, $C, $S, Expand(prev_cats, <'adke_wk', '0'>, '32') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) start_server:
   [ Fr( ~tid ) ]
  --[
  Start( ~tid, $S, 'server' ), RIdentity( ~tid, $S, 'server', $S )
  ]->
   [
   F_State_S0( ~tid, $S, $C, '0', '0', '0', '0', '0', $g, '0', '0',
               '0', '0', '0', '0', 'na', '0', '0', '0', '0', '0', '0', '0', '0',
               '0', '0', '0', '0', '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_hello:
   [
   In( <'0', '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
        <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
        $new_g, $new_g^new_x>
   ),
   Fr( ~new_ns ),
   F_State_S0( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[ S0( tid ), Neq( $g1, $g2 ) ]->
   [
   F_State_S1( tid, $S, $C, prev_res_psk,
               <prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
                $new_g, $new_g^new_x>,
               new_nc, ~new_ns, $new_g, prev_sg, prev_hrr, prev_x, prev_y, $new_g^new_x, prev_gy,
               prev_gxy, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
               prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_client_hello:
     [
     In( <'0', '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
          <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
          $new_g, z>
     ),
     Fr( ~new_ns ),
     F_State_S0( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     )
     ]
    --[ S0( tid ), Neq( $g1, $g2 ) ]->
     [
     F_State_S1( tid, $S, $C, prev_res_psk,
                 <prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                  <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
                  $new_g, z>,
                 new_nc, ~new_ns, $new_g, prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy,
                 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                 prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
     )
     ]
    variants (modulo AC)
    1. $new_g
             = $new_g.48
       z     = $new_g.48
    
    2. $new_g
             = $new_g.384
       z     = $new_g.384^new_x.761
  */

rule (modulo E) hello_retry_request:
   [
   F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               $prev_sg, '0', prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  S1_retry( tid ), Neq( prev_g, $prev_sg ), Instance( tid, $S, 'server' )
  ]->
   [
   Out( <'6', '0x0303', '40', $prev_sg> ),
   F_State_S0( tid, $S, $C, prev_res_psk,
               <prev_messages, '6', '0x0303', '40', $prev_sg>, prev_nc, prev_ns, $prev_sg, $prev_sg,
               'hrr', prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id, prev_edi,
               prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) server_hello:
   [
   F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, $prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, $prev_g^some_x, prev_gy, prev_gxy, prev_psk_ke_mode,
               prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
               prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Fr( ~y )
   ]
  --[
  S1( tid ), Eq( $prev_g, prev_sg ), Neq( $prev_g^some_x, $prev_g ),
  Neq( $prev_g^some_x^~y, $prev_g ), Instance( tid, $S, 'server' ),
  RNonces( tid, $S, 'server', <prev_nc, prev_ns> ), DH( tid, ~y, $prev_g^~y ),
  HonestUse( ~y ), HonestUse( $prev_g^~y ),
  DHChal( $prev_g, some_x, ~y, $prev_g^some_x, $prev_g^~y, $prev_g^some_x^~y )
  ]->
   [
   F_State_S2a( tid, $S, $C, prev_res_psk,
                <prev_messages, '2', '0x0303', prev_ns, $cipher_suite, 
                 <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>,
                prev_nc, prev_ns, $prev_g, prev_sg, prev_hrr, prev_x, ~y, $prev_g^some_x, $prev_g^~y,
                $prev_g^some_x^~y, 'na', prev_psk_id, prev_edi, Extract(prev_res_psk, '0'),
                prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, '0', prev_ems,
                prev_rms, prev_cert_req
   ),
   Out( <'2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, '40', 
         $prev_g, $prev_g^~y>
   )
   ]

  /*
  rule (modulo AC) server_hello:
     [
     F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, $prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     Fr( ~y )
     ]
    --[
    S1( tid ), Eq( $prev_g, prev_sg ), Neq( z, $prev_g ), Neq( z.1, $prev_g ),
    Instance( tid, $S, 'server' ),
    RNonces( tid, $S, 'server', <prev_nc, prev_ns> ), DH( tid, ~y, $prev_g^~y ),
    HonestUse( ~y ), HonestUse( $prev_g^~y ),
    DHChal( $prev_g, some_x, ~y, z, $prev_g^~y, z.1 )
    ]->
     [
     F_State_S2a( tid, $S, $C, prev_res_psk,
                  <prev_messages, '2', '0x0303', prev_ns, $cipher_suite, 
                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>,
                  prev_nc, prev_ns, $prev_g, prev_sg, prev_hrr, prev_x, ~y, z, $prev_g^~y, z.1, 'na',
                  prev_psk_id, prev_edi, Extract(prev_res_psk, '0'), prev_hs, prev_ms, prev_cats,
                  prev_sats, prev_hs_keyc, prev_hs_keys, '0', prev_ems, prev_rms, prev_cert_req
     ),
     Out( <'2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, '40', 
           $prev_g, $prev_g^~y>
     )
     ]
    variants (modulo AC)
    1. $prev_g  = $prev_g.43
       ~y    = ~y.45
       some_x
             = inv(~y.45)
       z     = $prev_g.43^inv(~y.45)
       z.1   = $prev_g.43
    
    2. $prev_g  = $prev_g.43
       ~y    = ~y.45
       some_x
             = one
       z     = $prev_g.43
       z.1   = $prev_g.43^~y.45
    
    3. $prev_g  = $prev_g.68
       ~y    = ~y.70
       some_x
             = some_x.95
       z     = $prev_g.68^some_x.95
       z.1   = $prev_g.68^(~y.70*some_x.95)
    
    4. $prev_g  = $prev_g.491
       ~y    = ~y.493
       some_x
             = inv((~y.493*x.977))
       z     = $prev_g.491^inv((~y.493*x.977))
       z.1   = $prev_g.491^inv(x.977)
    
    5. $prev_g  = $prev_g.491
       ~y    = ~y.493
       some_x
             = (x.977*inv(~y.493))
       z     = $prev_g.491^(x.977*inv(~y.493))
       z.1   = $prev_g.491^x.977
    
    6. $prev_g  = $prev_g.492
       ~y    = ~y.494
       some_x
             = (x.979*inv((~y.494*x.978)))
       z     = $prev_g.492^(x.979*inv((~y.494*x.978)))
       z.1   = $prev_g.492^(x.979*inv(x.978))
  */

rule (modulo E) server_gen_keys:
   [
   F_State_S2a( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  S2a( tid ), Extract( '0', Extract(prev_gxy, prev_es) ),
  Instance( tid, $S, 'server' ),
  RHS( tid, $S, 'server', Extract(prev_gxy, prev_es) ),
  RMS( tid, $S, 'server', Extract('0', Extract(prev_gxy, prev_es)) )
  ]->
   [
   F_State_S2b( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, Extract(prev_gxy, prev_es),
                Extract('0', Extract(prev_gxy, prev_es)), prev_cats, prev_sats,
                Expand(Expand(Extract(prev_gxy, prev_es), <'clienthts', h(prev_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(prev_gxy, prev_es), <'serverhts', h(prev_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) encrypted_extensions:
   [
   F_State_S2b( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[ S2b( tid ), Instance( tid, $S, 'server' ) ]->
   [
   F_State_S2c( tid, $S, $C, prev_res_psk, <prev_messages, '8', $exts>,
                prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
                prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
                prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Out( senc(<'8', $exts>, prev_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) certificate_request:
   [
   F_State_S2c( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  S2c_req( tid ), Instance( tid, $S, 'server' ),
  RCertReqCtxt( tid, $S, 'server', '0' )
  ]->
   [
   F_State_S2d( tid, $S, $C, prev_res_psk,
                <prev_messages, '13', '0', $certificate_extensions>, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id, prev_edi,
                prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, '1'
   ),
   Out( senc(<'13', '0', $certificate_extensions>, prev_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_certificate_request:
   [
   F_State_S2c( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[ S2c( tid ), Instance( tid, $S, 'server' ) ]->
   [
   F_State_S2d( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_auth:
   [
   F_State_S2d( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   !Ltk( $S, ~ltkS )
   ]
  --[
  S2d( tid ), Instance( tid, $S, 'server' ),
  Eq( prev_psk_ke_mode, 'na' ),
  UseLtk( ~ltkS,
          sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
  ),
  RTranscript( tid, $S, 'server',
               <
                <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(prev_hs,
                                    <'serverhts', 
                                     h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                             ~ltkS)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                     >)
               >
  )
  ]->
   [
   F_State_S3( tid, $S, $C, prev_res_psk,
               <
                <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(prev_hs,
                                    <'serverhts', 
                                     h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                             ~ltkS)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                     >)
               >,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
               prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms,
               Expand(prev_ms,
                      <'clientats', 
                       h(<
                          <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(prev_hs,
                                              <'serverhts', 
                                               h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               Expand(prev_ms,
                      <'serverats', 
                       h(<
                          <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(prev_hs,
                                              <'serverhts', 
                                               h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               prev_hs_keyc, prev_hs_keys, prev_auth_status,
               Expand(prev_ms,
                      <'ems', 
                       h(<
                          <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(prev_hs,
                                              <'serverhts', 
                                               h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C,
               Expand(Expand(prev_ms,
                             <'serverats', 
                              h(<
                                 <<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                  sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                                 >, 
                                 '20', 
                                 hmac(<
                                       Expand(Expand(prev_hs,
                                                     <'serverhts', 
                                                      h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                                         sign(<'server_cv', 
                                                               h(<prev_messages, '11', '0', pk(~ltkS)>)
                                                              >,
                                                              ~ltkS)
                                                        >)
                                                     >,
                                                     '32'),
                                              <'fin', '0'>, '32'), 
                                       h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                          sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                               ~ltkS)
                                         >)
                                      >)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<<'11', '0', pk(~ltkS)>, 
              <'15', 
               sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(prev_hs,
                                  <'serverhts', 
                                   h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                                      sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>,
                                           ~ltkS)
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<prev_messages, '11', '0', pk(~ltkS)>, '15', 
                       sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                   >)
             >,
             prev_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth:
   [
   F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, '0'
   ),
   In( senc(<'20', verify_data>, prev_hs_keyc) )
   ]
  --[
  S3( tid ), Instance( tid, $S, 'server' ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(prev_hs, <'clienthts', h(prev_messages)>, '32'),
                   <'fin', '0'>, '32'), 
            h(prev_messages)>)
  ),
  SessionKey( $S, $C, 'server',
              <Expand(prev_cats, <'adke_wk', '0'>, '32'), prev_auth_status>
  ),
  CIdentity( tid, $S, 'server', <$C, prev_auth_status> ),
  CHS( tid, $S, 'server', prev_hs ),
  RHSMS( tid, $S, 'server', <prev_hs, prev_ms> ),
  RRMS( tid, $S, 'server',
        <$C, 
         Expand(prev_ms, <'rms', h(<prev_messages, '20', verify_data>)>, '32'), 
         prev_messages, '20', verify_data>
  ),
  CTranscript( tid, $S, 'server', <prev_messages, '20', verify_data> ),
  CNonces( tid, $S, 'server', <prev_nc, prev_ns> )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk,
               <prev_messages, '20', verify_data>, prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x,
               prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs,
               prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems,
               Expand(prev_ms, <'rms', h(<prev_messages, '20', verify_data>)>, '32'),
               '0'
   ),
   RecvStream( tid, $S, $C, Expand(prev_cats, <'adke_wk', '0'>, '32') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth_cert:
   [
   F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, '1'
   ),
   !Pk( $C, pk(~ltkC) ),
   In( senc(<<'11', '0', pk(~ltkC)>, <'15', signature>, '20', 
             verify_data>,
            prev_hs_keyc)
   )
   ]
  --[
  S3_cert( tid ), Instance( tid, $S, 'server' ),
  Eq( verify(signature,
             <'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, pk(~ltkC)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(prev_hs,
                          <'clienthts', 
                           h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>)>)
  ),
  CIdentity( tid, $S, 'server', <$C, 'auth'> ),
  CHS( tid, $S, 'server', prev_hs ),
  RHSMS( tid, $S, 'server', <prev_hs, prev_ms> ),
  RRMS( tid, $S, 'server',
        <$C, 
         Expand(prev_ms,
                <'rms', 
                 h(<<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                    verify_data>)
                >,
                '32'), 
         <<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
         verify_data>
  ),
  CTranscript( tid, $S, 'server',
               <<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                verify_data>
  ),
  SessionKey( $S, $C, 'server',
              <Expand(prev_cats, <'adke_wk', '0'>, '32'), 'auth'>
  ),
  CNonces( tid, $S, 'server', <prev_nc, prev_ns> )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk,
               <<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                verify_data>,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
               prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
               prev_hs_keyc, prev_hs_keys, 'auth', prev_ems,
               Expand(prev_ms,
                      <'rms', 
                       h(<<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               '0'
   ),
   RecvStream( tid, $S, $C, Expand(prev_cats, <'adke_wk', '0'>, '32') )
   ]

  /*
  rule (modulo AC) recv_client_auth_cert:
     [
     F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, '1'
     ),
     !Pk( $C, pk(~ltkC) ),
     In( senc(<<'11', '0', pk(~ltkC)>, <'15', signature>, '20', 
               verify_data>,
              prev_hs_keyc)
     )
     ]
    --[
    S3_cert( tid ), Instance( tid, $S, 'server' ), Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(prev_hs,
                            <'clienthts', 
                             h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>)>)
    ),
    CIdentity( tid, $S, 'server', <$C, 'auth'> ),
    CHS( tid, $S, 'server', prev_hs ),
    RHSMS( tid, $S, 'server', <prev_hs, prev_ms> ),
    RRMS( tid, $S, 'server',
          <$C, 
           Expand(prev_ms,
                  <'rms', 
                   h(<<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                      verify_data>)
                  >,
                  '32'), 
           <<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
           verify_data>
    ),
    CTranscript( tid, $S, 'server',
                 <<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                  verify_data>
    ),
    SessionKey( $S, $C, 'server',
                <Expand(prev_cats, <'adke_wk', '0'>, '32'), 'auth'>
    ),
    CNonces( tid, $S, 'server', <prev_nc, prev_ns> )
    ]->
     [
     F_State_S4( tid, $S, $C, prev_res_psk,
                 <<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                  verify_data>,
                 prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
                 prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats,
                 prev_hs_keyc, prev_hs_keys, 'auth', prev_ems,
                 Expand(prev_ms,
                        <'rms', 
                         h(<<<prev_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 '0'
     ),
     RecvStream( tid, $S, $C, Expand(prev_cats, <'adke_wk', '0'>, '32') )
     ]
    variants (modulo AC)
    1. ~ltkC = ~ltkC.58
       prev_messages
             = prev_messages.72
       signature
             = sign(<'client_cv', h(<prev_messages.72, '11', '0', pk(~ltkC.58)>)>,
                    ~ltkC.58)
       z     = true
    
    2. ~ltkC = ~ltkC.70
       prev_messages
             = prev_messages.84
       signature
             = signature.96
       z     = verify(signature.96,
                      <'client_cv', h(<prev_messages.84, '11', '0', pk(~ltkC.70)>)>,
                      pk(~ltkC.70))
  */

rule (modulo E) out_of_band_psk:
   [ Fr( ~ticket ), Fr( ~res_psk ), Fr( ~ticket_age_add ) ]
  --[
  GenPSK( $S, 'server' ), GenPSK( $C, 'client' ),
  FreshPSK( ~ticket, ~res_psk )
  ]->
   [
   !ClientPSK( $C, $S, ~res_psk, '0',
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'oob'
   ),
   !ServerPSK( $S, $C, ~res_psk, '0',
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'oob'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_session_ticket:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C, app_keys ), Fr( ~ticket ),
   Fr( ~ticket_age_add )
   ]
  --[
  S4_NST( tid ), Instance( tid, $S, 'server' ),
  RPostHS( tid, $S, 'server',
           <prev_hs, prev_rms, $C, prev_auth_status, prev_messages>
  ),
  RNST( tid, $S, 'server', <~ticket, ~ticket_age_add> )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_rms, prev_messages, prev_nc, prev_ns, prev_g, prev_sg,
               prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id, prev_edi,
               prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C, app_keys ),
   !ServerPSK( $S, $C, prev_rms, prev_auth_status,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'nst'
   ),
   Out( senc(<'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
              $max_early_data_size>,
             app_keys)
   )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_new_session_ticket:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, app_keys ),
   In( senc(<'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
             $max_early_data_size>,
            app_keys)
   )
   ]
  --[
  C4_NST( tid ), Instance( tid, $C, 'client' ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_rms, prev_messages, prev_nc, prev_ns, prev_g, prev_sg,
               prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id, prev_edi,
               prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, app_keys ),
   !ClientPSK( $C, $S, prev_rms, prev_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               'nst'
   )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_hello_psk:
   [
   Fr( ~nc ), Fr( ~x ),
   !ClientPSK( $C, $S, prev_res_psk, prev_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   )
   ]
  --[
  C0_PSK( ~nc ), Start( ~nc, $C, 'client' ),
  RPSK( ~nc, $C, 'client', <$S, prev_res_psk, prev_auth_status> ),
  Neq( prev_res_psk, '0' )
  ]->
   [
   F_State_C1( ~nc, $C, $S, prev_res_psk,
               <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g1, $g1^~x>, 
                <'45', '0', '1'>, <'42', '0'>, '41', 
                <ticket, mask(ticket_age_add, $ticket_age)>, 
                hmac(<
                      Expand(Expand(Extract(prev_res_psk, '0'), <'rpbk', '0'>, '32'),
                             <'binder', '0'>, '32'), 
                      h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                         <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g1, $g1^~x>, 
                         <'45', '0', '1'>, <'42', '0'>, '41', 
                         <ticket, mask(ticket_age_add, $ticket_age)>, '0'>)
                     >)
               >,
               ~nc, '0', $g1, <$g1, $g2>, '0', ~x, '0', $g1^~x, '0', '0',
               <'0', '1'>, ticket, <'42', '0'>, Extract(prev_res_psk, '0'), '0', '0',
               '0', '0', '0', '0', prev_auth_status, '0', '0', '0'
   ),
   F_CachePSK( ~nc, $S, prev_res_psk, prev_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   ),
   EarlySendStream( ~nc, $C, $S,
                    Expand(Expand(Extract(prev_res_psk, '0'),
                                  <'cets', 
                                   h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                      <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g1, $g1^~x>, 
                                      <'45', '0', '1'>, <'42', '0'>, '41', 
                                      <ticket, mask(ticket_age_add, $ticket_age)>, 
                                      hmac(<
                                            Expand(Expand(Extract(prev_res_psk, '0'), <'rpbk', '0'>,
                                                          '32'),
                                                   <'binder', '0'>, '32'), 
                                            h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                               <'43', '0x0304'>, <'10', $g1, $g2>, 
                                               <'40', $g1, $g1^~x>, <'45', '0', '1'>, <'42', '0'>, 
                                               '41', <ticket, mask(ticket_age_add, $ticket_age)>, 
                                               '0'>)
                                           >)
                                     >)
                                  >,
                                  '32'),
                           <'eadke_wk', '0'>, '32'),
                    <'42', '0'>
   ),
   Out( <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g1, $g1^~x>, 
         <'45', '0', '1'>, <'42', '0'>, '41', 
         <ticket, mask(ticket_age_add, $ticket_age)>, 
         hmac(<
               Expand(Expand(Extract(prev_res_psk, '0'), <'rpbk', '0'>, '32'),
                      <'binder', '0'>, '32'), 
               h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                  <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g1, $g1^~x>, 
                  <'45', '0', '1'>, <'42', '0'>, '41', 
                  <ticket, mask(ticket_age_add, $ticket_age)>, '0'>)
              >)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_hello_psk:
   [
   F_State_S0( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( <'0', '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
        <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, 
        <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
        binder>
   ),
   Fr( ~ns ),
   !ServerPSK( $S, $C, psk_res_psk, psk_auth_status,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               psk_type
   )
   ]
  --[
  S0_PSK( tid ), Neq( $g1, $g2 ),
  Eq( unmask(obfuscated_ticket_age, ~ticket_age_add), '1' ),
  RPSK( tid, $S, 'server', <$C, psk_res_psk, psk_auth_status> ),
  Neq( psk_res_psk, '0' )
  ]->
   [
   F_State_S1( tid, $S, $C, psk_res_psk,
               <prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, 
                <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
                binder>,
               new_nc, ~ns, $new_g, prev_sg, prev_hrr, prev_x, prev_y, $new_g^new_x, prev_gy,
               prev_gxy, <'0', '1'>, ~ticket, new_edi, Extract(psk_res_psk, '0'),
               prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, psk_auth_status,
               prev_ems, prev_rms, prev_cert_req
   ),
   EarlyRecvStream( tid, $S, $C,
                    Expand(Expand(Extract(psk_res_psk, '0'),
                                  <'cets', 
                                   h(<prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                                      <'43', '0x0304'>, <'10', $g1, $g2>, 
                                      <'40', $new_g, $new_g^new_x>, <'45', '0', '1'>, new_edi, 
                                      '41', <~ticket, obfuscated_ticket_age>, binder>)
                                  >,
                                  '32'),
                           <'eadke_wk', '0'>, '32'),
                    new_edi
   )
   ]

  /*
  rule (modulo AC) recv_client_hello_psk:
     [
     F_State_S0( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     In( <'0', '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
          <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, 
          <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
          binder>
     ),
     Fr( ~ns ),
     !ServerPSK( $S, $C, psk_res_psk, psk_auth_status,
                 <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                  $max_early_data_size>,
                 psk_type
     )
     ]
    --[
    S0_PSK( tid ), Neq( $g1, $g2 ), Eq( z.1, '1' ),
    RPSK( tid, $S, 'server', <$C, psk_res_psk, psk_auth_status> ),
    Neq( psk_res_psk, '0' )
    ]->
     [
     F_State_S1( tid, $S, $C, psk_res_psk,
                 <prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                  <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, 
                  <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
                  binder>,
                 new_nc, ~ns, $new_g, prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy,
                 <'0', '1'>, ~ticket, new_edi, Extract(psk_res_psk, '0'), prev_hs,
                 prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, psk_auth_status, prev_ems,
                 prev_rms, prev_cert_req
     ),
     EarlyRecvStream( tid, $S, $C,
                      Expand(Expand(Extract(psk_res_psk, '0'),
                                    <'cets', 
                                     h(<prev_messages, '1', '0x0303', new_nc, '0', $cipher_suites, 
                                        '0', <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, 
                                        <'45', '0', '1'>, new_edi, '41', 
                                        <~ticket, obfuscated_ticket_age>, binder>)
                                    >,
                                    '32'),
                             <'eadke_wk', '0'>, '32'),
                      new_edi
     )
     ]
    variants (modulo AC)
    1. $new_g
             = $new_g.73
       ~ticket_age_add
             = ~ticket_age_add.77
       obfuscated_ticket_age
             = obfuscated_ticket_age.82
       z     = $new_g.73
       z.1   = unmask(obfuscated_ticket_age.82, ~ticket_age_add.77)
    
    2. $new_g
             = $new_g.119
       ~ticket_age_add
             = ~ticket_age_add.123
       obfuscated_ticket_age
             = mask(~ticket_age_add.123, z.174)
       z     = $new_g.119
       z.1   = z.174
    
    3. $new_g
             = $new_g.119
       ~ticket_age_add
             = ~ticket_age_add.123
       obfuscated_ticket_age
             = mask(z.174, ~ticket_age_add.123)
       z     = $new_g.119
       z.1   = z.174
    
    4. $new_g
             = $new_g.862
       ~ticket_age_add
             = ~ticket_age_add.866
       obfuscated_ticket_age
             = obfuscated_ticket_age.871
       z     = $new_g.862^new_x.1716
       z.1   = unmask(obfuscated_ticket_age.871, ~ticket_age_add.866)
    
    5. $new_g
             = $new_g.864
       ~ticket_age_add
             = ~ticket_age_add.868
       obfuscated_ticket_age
             = mask(~ticket_age_add.868, z.919)
       z     = $new_g.864^new_x.1720
       z.1   = z.919
    
    6. $new_g
             = $new_g.864
       ~ticket_age_add
             = ~ticket_age_add.868
       obfuscated_ticket_age
             = mask(z.919, ~ticket_age_add.868)
       z     = $new_g.864^new_x.1720
       z.1   = z.919
  */

rule (modulo E) recv_hello_retry_request_psk:
   [
   F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, $g1,
               <$g1, $g2>, '0', prev_x, prev_y, prev_gx, prev_gy, prev_gxy, <'0', '1'>, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   F_CachePSK( tid, $S, prev_res_psk, prev_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   ),
   Fr( ~new_nc ), Fr( ~new_x ), In( <'6', '0x0303', '40', $g2> )
   ]
  --[
  C1_retry_PSK( tid ), Neq( $g1, $g2 ),
  Instance( tid, $C, 'client' ), DH( tid, ~new_x, $g2^~new_x ),
  FreshSecret( ~new_x ),
  RPSK( tid, $C, 'client', <$S, prev_res_psk, prev_auth_status> )
  ]->
   [
   Out( <'0', '1', '0x0303', ~new_nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g2, $g2^~new_x>, 
         <'45', '0', '1'>, '0', '41', <ticket, mask(ticket_age_add, '1')>, 
         hmac(<
               Expand(Expand(Extract(prev_res_psk, '0'), <'rpbk', '0'>, '32'),
                      <'binder', '0'>, '32'), 
               h(<<prev_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, 
                  '0', $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                  <'40', $g2, $g2^~new_x>, <'45', '0', '1'>, '0', '41', 
                  <ticket, mask(ticket_age_add, '1')>, '0'>)
              >)
        >
   ),
   F_State_C1( tid, $C, $S, prev_res_psk,
               <<prev_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, 
                '0', $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                <'40', $g2, $g2^~new_x>, <'45', '0', '1'>, '0', '41', 
                <ticket, mask(ticket_age_add, '1')>, 
                hmac(<
                      Expand(Expand(Extract(prev_res_psk, '0'), <'rpbk', '0'>, '32'),
                             <'binder', '0'>, '32'), 
                      h(<<prev_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, 
                         '0', $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                         <'40', $g2, $g2^~new_x>, <'45', '0', '1'>, '0', '41', 
                         <ticket, mask(ticket_age_add, '1')>, '0'>)
                     >)
               >,
               ~new_nc, prev_ns, $g2, <$g1, $g2>, 'hrr', ~new_x, prev_y, $g2^~new_x,
               prev_gy, prev_gxy, <'0', '1'>, ticket, '0', Extract(prev_res_psk, '0'),
               prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status,
               prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_hello_psk_dhe:
   [
   F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, ~ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, 'g'^x, prev_gy, prev_gxy, <'0', '1'>, ~ticket,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Fr( ~y )
   ]
  --[
  S1_PSK_DHE( tid ), Neq( 'g'^x, 'g' ), Neq( prev_x, inv(~y) ),
  Instance( tid, $S, 'server' ),
  DHChal( 'g', prev_x, ~y, 'g'^x, 'g'^~y, 'g'^x^~y ),
  RNonces( tid, $S, 'server', <prev_nc, ~ns> )
  ]->
   [
   F_State_S2a( tid, $S, $C, prev_res_psk,
                <prev_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                 <'40', 'g', 'g'^~y>, <'41', '0'>, prev_edi>,
                prev_nc, ~ns, 'g', prev_sg, prev_hrr, prev_x, ~y, 'g'^x, 'g'^~y, 'g'^x^~y, '1',
                ~ticket, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
         <'40', 'g', 'g'^~y>, <'41', '0'>, prev_edi>
   )
   ]

  /*
  rule (modulo AC) server_hello_psk_dhe:
     [
     F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, ~ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy, <'0', '1'>, ~ticket, prev_edi,
                 prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     Fr( ~y )
     ]
    --[
    S1_PSK_DHE( tid ), Neq( z, 'g' ), Neq( prev_x, inv(~y) ),
    Instance( tid, $S, 'server' ),
    DHChal( 'g', prev_x, ~y, z, 'g'^~y, z.1 ),
    RNonces( tid, $S, 'server', <prev_nc, ~ns> )
    ]->
     [
     F_State_S2a( tid, $S, $C, prev_res_psk,
                  <prev_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                   <'40', 'g', 'g'^~y>, <'41', '0'>, prev_edi>,
                  prev_nc, ~ns, 'g', prev_sg, prev_hrr, prev_x, ~y, z, 'g'^~y, z.1, '1', ~ticket,
                  prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                  prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
           <'40', 'g', 'g'^~y>, <'41', '0'>, prev_edi>
     )
     ]
    variants (modulo AC)
    1. ~y    = ~y.44
       z     = 'g'
       z.1   = 'g'^~y.44
    
    2. ~y    = ~y.44
       z     = 'g'^inv(~y.44)
       z.1   = 'g'
    
    3. ~y    = ~y.644
       z     = 'g'^x.1280
       z.1   = 'g'^(~y.644*x.1280)
    
    4. ~y    = ~y.645
       z     = 'g'^inv((~y.645*x.1282))
       z.1   = 'g'^inv(x.1282)
    
    5. ~y    = ~y.645
       z     = 'g'^(x.1282*inv(~y.645))
       z.1   = 'g'^x.1282
    
    6. ~y    = ~y.646
       z     = 'g'^(x.1284*inv((~y.646*x.1283)))
       z.1   = 'g'^(x.1284*inv(x.1283))
  */

rule (modulo E) recv_server_hello_psk_dhe:
   [
   F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, ~x, prev_y, prev_gx, prev_gy, prev_gxy, <'0', '1'>, ~ticket,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        <'40', 'g', 'g'^new_y>, <'41', '0'>, prev_edi>
   )
   ]
  --[
  C1_PSK_DHE( tid ), Neq( 'g'^new_y, 'g' ),
  Instance( tid, $C, 'client' ),
  DHChal( 'g', ~x, new_y, prev_gx, 'g'^new_y, 'g'^new_y^~x ),
  RNonces( tid, $C, 'client', <prev_nc, new_ns> )
  ]->
   [
   F_State_C2a( tid, $C, $S, prev_res_psk,
                <prev_messages, '2', '0x0303', new_ns, $cipher_suite, 
                 <'13', $sig_algs>, <'40', 'g', 'g'^new_y>, <'41', '0'>, prev_edi>,
                prev_nc, new_ns, 'g', prev_sg, prev_hrr, ~x, prev_y, prev_gx, 'g'^new_y,
                'g'^new_y^~x, '1', ~ticket, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                prev_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_server_hello_psk_dhe:
     [
     F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, ~x, prev_y, prev_gx, prev_gy, prev_gxy, <'0', '1'>, ~ticket,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
          <'40', 'g', z>, <'41', '0'>, prev_edi>
     )
     ]
    --[
    C1_PSK_DHE( tid ), Neq( z, 'g' ), Instance( tid, $C, 'client' ),
    DHChal( 'g', ~x, new_y, prev_gx, z, z.1 ),
    RNonces( tid, $C, 'client', <prev_nc, new_ns> )
    ]->
     [
     F_State_C2a( tid, $C, $S, prev_res_psk,
                  <prev_messages, '2', '0x0303', new_ns, $cipher_suite, 
                   <'13', $sig_algs>, <'40', 'g', z>, <'41', '0'>, prev_edi>,
                  prev_nc, new_ns, 'g', prev_sg, prev_hrr, ~x, prev_y, prev_gx, z, z.1, '1',
                  ~ticket, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                  prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
     )
     ]
    variants (modulo AC)
    1. ~x    = ~x.44
       new_y = inv(~x.44)
       z     = 'g'^inv(~x.44)
       z.1   = 'g'
    
    2. ~x    = ~x.44
       new_y = one
       z     = 'g'
       z.1   = 'g'^~x.44
    
    3. ~x    = ~x.46
       new_y = new_y.48
       z     = 'g'^new_y.48
       z.1   = 'g'^(~x.46*new_y.48)
    
    4. ~x    = ~x.349
       new_y = inv((~x.349*x.691))
       z     = 'g'^inv((~x.349*x.691))
       z.1   = 'g'^inv(x.691)
    
    5. ~x    = ~x.349
       new_y = (x.691*inv(~x.349))
       z     = 'g'^(x.691*inv(~x.349))
       z.1   = 'g'^x.691
    
    6. ~x    = ~x.350
       new_y = (x.693*inv((~x.350*x.692)))
       z     = 'g'^(x.693*inv((~x.350*x.692)))
       z.1   = 'g'^(x.693*inv(x.692))
  */

rule (modulo E) server_hello_psk:
   [
   F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, ~ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, 'g'^x, prev_gy, prev_gxy, <'0', '1'>, ~ticket,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  S1_PSK( tid ), Instance( tid, $S, 'server' ),
  RNonces( tid, $S, 'server', <prev_nc, ~ns> )
  ]->
   [
   F_State_S2a( tid, $S, $C, prev_res_psk,
                <prev_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                 <'41', '0'>, prev_edi>,
                prev_nc, ~ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, 'g'^x, prev_gy, prev_gxy, '0',
                ~ticket, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
         <'41', '0'>, prev_edi>
   )
   ]

  /*
  rule (modulo AC) server_hello_psk:
     [
     F_State_S1( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, ~ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy, <'0', '1'>, ~ticket, prev_edi,
                 prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     )
     ]
    --[
    S1_PSK( tid ), Instance( tid, $S, 'server' ),
    RNonces( tid, $S, 'server', <prev_nc, ~ns> )
    ]->
     [
     F_State_S2a( tid, $S, $C, prev_res_psk,
                  <prev_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                   <'41', '0'>, prev_edi>,
                  prev_nc, ~ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, z, prev_gy, prev_gxy, '0',
                  ~ticket, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                  prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
           <'41', '0'>, prev_edi>
     )
     ]
    variants (modulo AC)
    1. z     = 'g'
    
    2. z     = 'g'^x.33
  */

rule (modulo E) recv_server_hello_psk:
   [
   F_State_C1( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, <'0', '1'>, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        <'41', '0'>, prev_edi>
   )
   ]
  --[
  C1_PSK( tid ), Neq( prev_gy, 'g' ), Instance( tid, $C, 'client' ),
  RNonces( tid, $C, 'client', <prev_nc, new_ns> )
  ]->
   [
   F_State_C2a( tid, $C, $S, prev_res_psk,
                <prev_messages, '2', '0x0303', new_ns, $cipher_suite, 
                 <'13', $sig_algs>, <'41', '0'>, prev_edi>,
                prev_nc, new_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, '0',
                prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                prev_hs_keys, prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_auth_psk:
   [
   F_State_S2d( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   )
   ]
  --[
  S2d_PSK( tid ), Neq( prev_psk_ke_mode, 'na' ),
  Instance( tid, $S, 'server' ),
  RTranscript( tid, $S, 'server',
               <prev_messages, '20', 
                hmac(<
                      Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(prev_messages)>)
               >
  )
  ]->
   [
   F_State_S3( tid, $S, $C, prev_res_psk,
               <prev_messages, '20', 
                hmac(<
                      Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(prev_messages)>)
               >,
               prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy,
               prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms,
               Expand(prev_ms,
                      <'clientats', 
                       h(<prev_messages, '20', 
                          hmac(<
                                Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                                       <'fin', '0'>, '32'), 
                                h(prev_messages)>)
                         >)
                      >,
                      '32'),
               Expand(prev_ms,
                      <'serverats', 
                       h(<prev_messages, '20', 
                          hmac(<
                                Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                                       <'fin', '0'>, '32'), 
                                h(prev_messages)>)
                         >)
                      >,
                      '32'),
               prev_hs_keyc, prev_hs_keys, prev_auth_status,
               Expand(prev_ms,
                      <'ems', 
                       h(<prev_messages, '20', 
                          hmac(<
                                Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                                       <'fin', '0'>, '32'), 
                                h(prev_messages)>)
                         >)
                      >,
                      '32'),
               prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C,
               Expand(Expand(prev_ms,
                             <'serverats', 
                              h(<prev_messages, '20', 
                                 hmac(<
                                       Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                                              <'fin', '0'>, '32'), 
                                       h(prev_messages)>)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'20', 
              hmac(<
                    Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                           <'fin', '0'>, '32'), 
                    h(prev_messages)>)
             >,
             prev_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_auth_psk:
   [
   F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   In( senc(<'20', verify_data>, prev_hs_keys) )
   ]
  --[
  C2d_PSK( tid ), Neq( prev_psk_ke_mode, 'na' ),
  Instance( tid, $C, 'client' ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(prev_hs, <'serverhts', h(prev_messages)>, '32'),
                   <'fin', '0'>, '32'), 
            h(prev_messages)>)
  ),
  CIdentity( tid, $C, 'client', <$S, prev_auth_status> ),
  CHS( tid, $C, 'client', prev_hs ),
  SessionKey( $C, $S, 'client',
              <
               Expand(Expand(prev_ms,
                             <'serverats', h(<prev_messages, '20', verify_data>)>, '32'),
                      <'adke_wk', '0'>, '32'), 
               prev_auth_status>
  ),
  CNonces( tid, $C, 'client', <prev_nc, prev_ns> ),
  CTranscript( tid, $C, 'client', <prev_messages, '20', verify_data> )
  ]->
   [
   F_State_C3( tid, $C, $S, prev_res_psk,
               <prev_messages, '20', verify_data>, prev_nc, prev_ns, prev_g, prev_sg, prev_hrr, prev_x,
               prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id, prev_edi, prev_es, prev_hs,
               prev_ms,
               Expand(prev_ms, <'clientats', h(<prev_messages, '20', verify_data>)>,
                      '32'),
               Expand(prev_ms, <'serverats', h(<prev_messages, '20', verify_data>)>,
                      '32'),
               prev_hs_keyc, prev_hs_keys, prev_auth_status,
               Expand(prev_ms, <'ems', h(<prev_messages, '20', verify_data>)>, '32'),
               prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S,
               Expand(Expand(prev_ms,
                             <'serverats', h(<prev_messages, '20', verify_data>)>, '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) send:
   [ SendStream( ~tid, $actor, $peer, app_key_out ), Fr( ~data ) ]
  --[ Send( ~tid ) ]->
   [
   SendStream( ~tid, $actor, $peer, app_key_out ),
   Out( senc(<~data, '23'>, app_key_out) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv:
   [
   RecvStream( ~tid, $actor, $peer, app_key_in ),
   In( senc(<data, '23'>, app_key_in) )
   ]
  --[ Recv( ~tid ) ]->
   [ RecvStream( ~tid, $actor, $peer, app_key_in ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) end_early_data:
   [ EarlySendStream( tid, $C, $S, ead_keyc, <'42', '0'> ) ]
  --[ C_EndZeroRTT( tid ) ]->
   [ Out( senc(<'1', '21'>, ead_keyc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_end_early_data:
   [
   EarlyRecvStream( tid, $S, $C, ead_keyc, <'42', '0'> ),
   In( senc(<'1', '21'>, ead_keyc) )
   ]
  --[ S_RecvEndZeroRTT( tid ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) send_early_data:
   [
   EarlySendStream( tid, $C, $S, ead_keyc, <'42', '0'> ), Fr( ~data )
   ]
  --[ C_SendZeroRTT( tid ) ]->
   [
   EarlySendStream( tid, $C, $S, ead_keyc, <'42', '0'> ),
   Out( senc(<~data, '23'>, ead_keyc) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_early_data:
   [
   EarlyRecvStream( tid, $S, $C, ead_keyc, <'42', '0'> ),
   In( senc(<data, '23'>, ead_keyc) )
   ]
  --[ S_RecvZeroRTT( tid ) ]->
   [ EarlyRecvStream( tid, $S, $C, ead_keyc, <'42', '0'> ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) certificate_request_post:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C, app_keys ), Fr( ~cert_req_ctxt )
   ]
  --[
  S4_req( tid ), Instance( tid, $S, 'server' ),
  RCertReqCtxt( tid, $S, 'server', ~cert_req_ctxt ),
  RPostHS( tid, $S, 'server',
           <prev_hs, prev_rms, $C, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C, app_keys ),
   L_ServerCertReq( tid, $S, $C, ~cert_req_ctxt ),
   Out( senc(<'13', ~cert_req_ctxt, $certificate_extensions>,
             app_keys)
   )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_certificate_request_post:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, app_keys ),
   In( senc(<'13', certificate_request_context, 
             $certificate_extensions>,
            app_keys)
   )
   ]
  --[
  C4_req( tid ), Neq( certificate_request_context, '0' ),
  Instance( tid, $C, 'client' ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, app_keys ),
   L_ClientCertReq( tid, $C, $S, certificate_request_context )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) client_auth_post:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $C, $S, app_keyc ), !Ltk( $C, ~ltkC ),
   L_ClientCertReq( tid, $C, $S, certificate_request_context )
   ]
  --[
  C4_cert( tid ), Instance( tid, $C, 'client' ),
  Neq( certificate_request_context, '0' ),
  UseLtk( ~ltkC,
          sign(<'client_cv', 
                h(<prev_messages, '13', certificate_request_context, 
                   $certificate_extensions>)
               >,
               ~ltkC)
  ),
  RTranscriptPost( tid, $C, 'client',
                   <prev_messages, certificate_request_context>
  ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $C, $S, app_keyc ),
   Out( senc(<<'11', certificate_request_context, pk(~ltkC)>, 
              <'15', 
               sign(<'client_cv', 
                     h(<prev_messages, '13', certificate_request_context, 
                        $certificate_extensions>)
                    >,
                    ~ltkC)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(prev_hs,
                                  <'fin_keychts', 
                                   h(<prev_messages, '13', certificate_request_context, 
                                      $certificate_extensions>)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<prev_messages, '13', certificate_request_context, 
                       $certificate_extensions>)
                   >)
             >,
             app_keyc)
   )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth_post:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $S, $C, app_keyc ), !Pk( $C, pk(~ltkC) ),
   L_ServerCertReq( tid, $S, $C, ~cert_req_ctxt ),
   In( senc(<<'11', ~cert_req_ctxt, pk(~ltkC)>, <'15', signature>, 
             '20', verify_data>,
            app_keyc)
   )
   ]
  --[
  S4_cert( tid ), Instance( tid, $S, 'server' ),
  Neq( ~cert_req_ctxt, '0' ),
  Eq( verify(signature,
             <'client_cv', 
              h(<prev_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
             pk(~ltkC)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(prev_hs,
                          <'fin_keychts', 
                           h(<prev_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<prev_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>)
  ),
  CIdentityPost( tid, $S, 'server', <$C, 'auth'> ),
  CTranscriptPost( tid, $S, 'server', <prev_messages, ~cert_req_ctxt> ),
  CHS( tid, $S, 'server', prev_hs ),
  RPostHS( tid, $S, 'server', <prev_hs, prev_rms, $C, 'auth', prev_messages> )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               'auth', prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $S, $C, app_keyc )
   ]

  // loop breakers: [1,0]
  /*
  rule (modulo AC) recv_client_auth_post:
     [
     F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 prev_auth_status, prev_ems, prev_rms, prev_cert_req
     ),
     RecvStream( tid, $S, $C, app_keyc ), !Pk( $C, pk(~ltkC) ),
     L_ServerCertReq( tid, $S, $C, ~cert_req_ctxt ),
     In( senc(<<'11', ~cert_req_ctxt, pk(~ltkC)>, <'15', signature>, 
               '20', verify_data>,
              app_keyc)
     )
     ]
    --[
    S4_cert( tid ), Instance( tid, $S, 'server' ),
    Neq( ~cert_req_ctxt, '0' ), Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(prev_hs,
                            <'fin_keychts', 
                             h(<prev_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<prev_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>)
    ),
    CIdentityPost( tid, $S, 'server', <$C, 'auth'> ),
    CTranscriptPost( tid, $S, 'server', <prev_messages, ~cert_req_ctxt> ),
    CHS( tid, $S, 'server', prev_hs ),
    RPostHS( tid, $S, 'server', <prev_hs, prev_rms, $C, 'auth', prev_messages> )
    ]->
     [
     F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
                 prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
                 prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                 'auth', prev_ems, prev_rms, prev_cert_req
     ),
     RecvStream( tid, $S, $C, app_keyc )
     ]
    variants (modulo AC)
    1. $certificate_extensions
             = $certificate_extensions.62
       ~cert_req_ctxt
             = ~cert_req_ctxt.63
       ~ltkC = ~ltkC.64
       prev_messages
             = prev_messages.80
       signature
             = sign(<'client_cv', 
                     h(<prev_messages.80, '13', ~cert_req_ctxt.63, 
                        $certificate_extensions.62>)
                    >,
                    ~ltkC.64)
       z     = true
    
    2. $certificate_extensions
             = $certificate_extensions.74
       ~cert_req_ctxt
             = ~cert_req_ctxt.75
       ~ltkC = ~ltkC.76
       prev_messages
             = prev_messages.92
       signature
             = signature.104
       z     = verify(signature.104,
                      <'client_cv', 
                       h(<prev_messages.92, '13', ~cert_req_ctxt.75, 
                          $certificate_extensions.74>)
                      >,
                      pk(~ltkC.76))
    // loop breakers: [1,0]
  */

rule (modulo E) update_req_client:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $C, $S, prev_app_keyc )
   ]
  --[
  C4_update_req( tid ), Instance( tid, $C, 'client' ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, Expand(prev_cats, <'ats', '0'>, '32'),
               prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
               prev_cert_req
   ),
   SendStream( tid, $C, $S,
               Expand(Expand(prev_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '1'>, prev_app_keyc) )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) update_req_server:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C, prev_app_keys )
   ]
  --[
  S4_update_req( tid ), Instance( tid, $S, 'server' ),
  RPostHS( tid, $S, 'server',
           <prev_hs, prev_rms, $C, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
               Expand(prev_sats, <'ats', '0'>, '32'), prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   SendStream( tid, $S, $C,
               Expand(Expand(prev_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '1'>, prev_app_keys) )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) update_recv_client:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, prev_app_keys ),
   SendStream( tid, $C, $S, prev_app_keyc ),
   In( senc(<'24', '1'>, prev_app_keys) )
   ]
  --[
  C4_update_recv( tid ), Instance( tid, $C, 'client' ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, Expand(prev_cats, <'ats', '0'>, '32'),
               Expand(prev_sats, <'ats', '0'>, '32'), prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S,
               Expand(Expand(prev_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   SendStream( tid, $C, $S,
               Expand(Expand(prev_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '0'>, prev_app_keyc) )
   ]

  // loop breakers: [1,0,2]
  /* has exactly the trivial AC variant */

rule (modulo E) update_recv_server:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $S, $C, prev_app_keyc ),
   SendStream( tid, $S, $C, prev_app_keys ),
   In( senc(<'24', '1'>, prev_app_keyc) )
   ]
  --[
  S4_update_recv( tid ), Instance( tid, $S, 'server' ),
  RPostHS( tid, $S, 'server',
           <prev_hs, prev_rms, $C, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, Expand(prev_cats, <'ats', '0'>, '32'),
               Expand(prev_sats, <'ats', '0'>, '32'), prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $S, $C,
               Expand(Expand(prev_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   SendStream( tid, $S, $C,
               Expand(Expand(prev_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '0'>, prev_app_keys) )
   ]

  // loop breakers: [1,2,0]
  /* has exactly the trivial AC variant */

rule (modulo E) update_fin_client:
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S, prev_app_keys ),
   In( senc(<'24', '0'>, prev_app_keys) )
   ]
  --[
  C4_update_fin( tid ), Instance( tid, $C, 'client' ),
  RPostHS( tid, $C, 'client',
           <prev_hs, prev_rms, $S, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_C4( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
               Expand(prev_sats, <'ats', '0'>, '32'), prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $C, $S,
               Expand(Expand(prev_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) update_fin_server:
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
               prev_auth_status, prev_ems, prev_rms, prev_cert_req
   ),
   RecvStream( tid, $S, $C, prev_app_keyc ),
   In( senc(<'24', '0'>, prev_app_keyc) )
   ]
  --[
  S4_update_fin( tid ), Instance( tid, $S, 'server' ),
  RPostHS( tid, $S, 'server',
           <prev_hs, prev_rms, $C, prev_auth_status, prev_messages>
  )
  ]->
   [
   F_State_S4( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns, prev_g,
               prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode, prev_psk_id,
               prev_edi, prev_es, prev_hs, prev_ms, Expand(prev_cats, <'ats', '0'>, '32'),
               prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
               prev_cert_req
   ),
   RecvStream( tid, $S, $C,
               Expand(Expand(prev_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   )
   ]

  // loop breakers: [1,0]
  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

lemma one_C2d_per_tid [reuse]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2d_PSK_per_tid [reuse]:
  all-traces
  "∀ tid #i #j.
    ((C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_per_tid [reuse]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_PSK_per_tid [reuse]:
  all-traces
  "∀ tid #i #j.
    ((S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_per_tid [reuse]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_cert_per_tid [reuse]:
  all-traces
  "∀ tid #i #j.
    ((C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_per_tid [reuse]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_cert_per_tid [reuse]:
  all-traces
  "∀ tid #i #j.
    ((S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma s3_vs_s3_cert [reuse]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)"
*/
by sorry

lemma c3_vs_c3_cert [reuse]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)"
*/
by sorry

lemma s2d_vs_s2d_psk [reuse]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)"
*/
by sorry

lemma c2d_vs_c2d_psk [reuse]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)"
*/
by sorry

lemma tid_invariant [use_induction, reuse]:
  all-traces
  "∀ tid actor role #i.
    (Instance( tid, actor, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role #i.
  (Instance( tid, actor, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma one_start_per_tid [reuse]:
  all-traces
  "∀ tid actor actor2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧
     (Start( tid, actor2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 role role2 #i #j.
  (Start( tid, actor, role ) @ #i) ∧
  (Start( tid, actor2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma cert_req_origin [typing]:
  all-traces
  "∀ certificate_request_context certificate_extensions keys #i.
    (!KU( senc(<'13', certificate_request_context, 
                certificate_extensions>,
               keys)
     ) @ #i) ⇒
    ((∃ #j. (!KU( certificate_request_context ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j tid actor role.
       (RCertReqCtxt( tid, actor, role, certificate_request_context
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ certificate_request_context certificate_extensions keys #i.
  (!KU( senc(<'13', certificate_request_context, 
              certificate_extensions>,
             keys)
   ) @ #i)
 ∧
  (∀ #j. (!KU( certificate_request_context ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j tid actor role.
    (RCertReqCtxt( tid, actor, role, certificate_request_context
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma nst_source [typing]:
  all-traces
  "∀ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
    (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>,
               app_key)
     ) @ #i) ⇒
    ((∃ #j #k.
       (((!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)) ∧
        (#j < #i)) ∧
       (#k < #i)) ∨
     (∃ tid S #j.
       (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
  (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>,
             app_key)
   ) @ #i)
 ∧
  (∀ #j #k.
    (!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)
   ⇒
    ((¬(#j < #i)) ∨ (¬(#k < #i)))) ∧
  (∀ tid S #j.
    (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma ku_extract [reuse, use_induction]:
  all-traces
  "∀ a b #i.
    (!KU( Extract(a, b) ) @ #i) ⇒
    (∃ #j #k.
      (((!KU( a ) @ #j) ∧ (!KU( b ) @ #k)) ∧ (#j < #i)) ∧ (#k < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ a b #i.
  (!KU( Extract(a, b) ) @ #i)
 ∧
  ∀ #j #k.
   (!KU( a ) @ #j) ∧ (!KU( b ) @ #k) ⇒ ((¬(#j < #i)) ∨ (¬(#k < #i)))"
*/
by sorry

lemma ku_expand [reuse, use_induction]:
  all-traces
  "∀ secret label len #i.
    (!KU( Expand(secret, label, len) ) @ #i) ⇒
    (∃ #j. (!KU( secret ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ secret label len #i.
  (!KU( Expand(secret, label, len) ) @ #i)
 ∧
  ∀ #j. (!KU( secret ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma dh_chal_dual [reuse]:
  all-traces
  "∀ tid tid2 role role2 actor actor2 g x y gx gy gxy #i #j #r.
    (((((((DHChal( g, x, y, gx, gy, gxy ) @ #i) ∧
          (Instance( tid, actor, role ) @ #i)) ∧
         (DHChal( g, x, y, gx, gy, gxy ) @ #j)) ∧
        (Instance( tid2, actor2, role2 ) @ #j)) ∧
       (¬(role = role2))) ∧
      (#i < #j)) ∧
     (!KU( gxy ) @ #r)) ⇒
    (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 role role2 actor actor2 g x y gx gy gxy #i #j #r.
  (DHChal( g, x, y, gx, gy, gxy ) @ #i) ∧
  (Instance( tid, actor, role ) @ #i) ∧
  (DHChal( g, x, y, gx, gy, gxy ) @ #j) ∧
  (Instance( tid2, actor2, role2 ) @ #j) ∧
  (!KU( gxy ) @ #r)
 ∧
  (¬(role = role2)) ∧ (#i < #j)"
*/
by sorry

lemma ku_hs [reuse]:
  all-traces
  "∀ tid actor role es hs res_psk gxy #i #j.
    ((((RHS( tid, actor, role, hs ) @ #i) ∧ (hs = Extract(gxy, es))) ∧
      (es = Extract(res_psk, '0'))) ∧
     (!KU( hs ) @ #j)) ⇒
    (∃ #k #l.
      (((!KU( gxy ) @ #k) ∧ (!KU( res_psk ) @ #l)) ∧ (#k < #j)) ∧
      (#l < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role es hs res_psk gxy #i #j.
  (RHS( tid, actor, role, hs ) @ #i) ∧
  (hs = Extract(gxy, es)) ∧
  (es = Extract(res_psk, '0')) ∧
  (!KU( hs ) @ #j)
 ∧
  ∀ #k #l.
   (!KU( gxy ) @ #k) ∧ (!KU( res_psk ) @ #l)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#l < #j)))"
*/
by sorry

lemma ku_ltk [reuse]:
  all-traces
  "∀ actor ltkA #i #j.
    ((GenLtk( actor, ltkA ) @ #i) ∧ (!KU( ltkA ) @ #j)) ⇒
    (∃ #k. (RevLtk( actor ) @ #k) ∧ (#k < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ltkA #i #j.
  (GenLtk( actor, ltkA ) @ #i) ∧ (!KU( ltkA ) @ #j)
 ∧
  ∀ #k. (RevLtk( actor ) @ #k) ⇒ ¬(#k < #j)"
*/
by sorry

lemma ku_fresh_psk [reuse]:
  all-traces
  "∀ ticket res_psk #i #k.
    ((FreshPSK( ticket, res_psk ) @ #i) ∧ (!KU( res_psk ) @ #k)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ ticket res_psk #i #k.
  (FreshPSK( ticket, res_psk ) @ #i) ∧ (!KU( res_psk ) @ #k)"
*/
by sorry

lemma hsms_derive [reuse]:
  all-traces
  "∀ tid actor role hs ms #i.
    (RHSMS( tid, actor, role, <hs, ms> ) @ #i) ⇒
    (ms = Extract('0', hs))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role hs ms #i.
  (RHSMS( tid, actor, role, <hs, ms> ) @ #i)
 ∧
  ¬(ms = Extract('0', hs))"
*/
by sorry

lemma posths_rms [reuse, use_induction]:
  all-traces
  "∀ tid actor role hs rms peer auth_status messages #i.
    (RPostHS( tid, actor, role, <hs, rms, peer, auth_status, messages>
     ) @ #i) ⇒
    (∃ ms #j.
      ((((RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
         (ms = Extract('0', hs))) ∧
        (rms = Expand(ms, <'rms', h(messages)>, '32'))) ∧
       (#j < #i)) ∧
      ((∃ #k.
         (CIdentity( tid, actor, role, <peer, auth_status> ) @ #k) ∧
         (#k < #i)) ∨
       (∃ #k.
         (((CIdentityPost( tid, actor, role, <peer, auth_status> ) @ #k) ∧
           (role = 'server')) ∧
          (auth_status = 'auth')) ∧
         ((#k < #i) ∨ (#k = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role hs rms peer auth_status messages #i.
  (RPostHS( tid, actor, role, <hs, rms, peer, auth_status, messages>
   ) @ #i)
 ∧
  ∀ ms #j.
   (RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
   (ms = Extract('0', hs)) ∧
   (rms = Expand(ms, <'rms', h(messages)>, '32'))
  ⇒
   ((¬(#j < #i)) ∨
    ((∀ #k.
       (CIdentity( tid, actor, role, <peer, auth_status> ) @ #k)
      ⇒
       ¬(#k < #i)) ∧
     (∀ #k.
       (CIdentityPost( tid, actor, role, <peer, auth_status> ) @ #k) ∧
       (role = 'server') ∧
       (auth_status = 'auth')
      ⇒
       (¬(#k < #i)) ∧ (¬(#k = #i)))))"
*/
by sorry

lemma matching_transcripts_posths [reuse]:
  all-traces
  "∀ tid tid2 actor peer actor2 peer2 role role2 rms rms2 messages #i
     #j.
    (((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
      (RRMS( tid2, peer, role2, <actor2, rms2, messages> ) @ #j)) ∧
     (¬(role = role2))) ⇒
    (rms = rms2)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer actor2 peer2 role role2 rms rms2 messages #i
   #j.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms2, messages> ) @ #j)
 ∧
  (¬(role = role2)) ∧ (¬(rms = rms2))"
*/
by sorry

lemma matching_rms_posths [reuse]:
  all-traces
  "∀ tid tid2 actor peer actor2 peer2 role role2 rms messages
     messages2 #i #j.
    (((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
      (RRMS( tid2, peer, role2, <actor2, rms, messages2> ) @ #j)) ∧
     (¬(role = role2))) ⇒
    (messages = messages2)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer actor2 peer2 role role2 rms messages
   messages2 #i #j.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms, messages2> ) @ #j)
 ∧
  (¬(role = role2)) ∧ (¬(messages = messages2))"
*/
by sorry

lemma sig_origin [reuse]:
  all-traces
  "∀ certificate certificate_request_context signature verify_data
     hs_key sig_messages ltkA #i.
    ((!KU( senc(<<'11', certificate_request_context, certificate>, 
                 <'15', signature>, '20', verify_data>,
                hs_key)
      ) @ #i) ∧
     (signature = sign(sig_messages, ltkA))) ⇒
    ((∃ #j. (!KU( ltkA ) @ #j) ∧ (#j < #i)) ∨
     (∃ #k. (UseLtk( ltkA, signature ) @ #k) ∧ (#k < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ certificate certificate_request_context signature verify_data
   hs_key sig_messages ltkA #i.
  (!KU( senc(<<'11', certificate_request_context, certificate>, 
              <'15', signature>, '20', verify_data>,
             hs_key)
   ) @ #i) ∧
  (signature = sign(sig_messages, ltkA))
 ∧
  (∀ #j. (!KU( ltkA ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #k. (UseLtk( ltkA, signature ) @ #k) ⇒ ¬(#k < #i))"
*/
by sorry

lemma rms_derives_hs [reuse]:
  all-traces
  "∀ tid actor role peer hs rms messages #i #j #k.
    (((RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
      (CHS( tid, actor, role, hs ) @ #i)) ∧
     (!KU( rms ) @ #k)) ⇒
    (∃ ms #l.
      ((ms = Extract('0', hs)) ∧ (!KU( hs ) @ #l)) ∧ (#l < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role peer hs rms messages #i #j #k.
  (RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (!KU( rms ) @ #k)
 ∧
  ∀ ms #l. (ms = Extract('0', hs)) ∧ (!KU( hs ) @ #l) ⇒ ¬(#l < #k)"
*/
by sorry

lemma matching_sessions [reuse, use_induction]:
  all-traces
  "∀ tid tid2 actor actor2 role role2 peer peer2 rms messages #i #j
     #k.
    ((((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
       (RRMS( tid2, peer, role2, <actor2, rms, messages> ) @ #j)) ∧
      (¬(role = role2))) ∧
     (!KU( rms ) @ #k)) ⇒
    ((∃ g x y gx gy gxy tid3 tid4 #a #b #r.
       ((((((((DHChal( g, x, y, gx, gy, gxy ) @ #a) ∧
              (Instance( tid3, actor, role ) @ #a)) ∧
             (#a < #i)) ∧
            (DHChal( g, x, y, gx, gy, gxy ) @ #b)) ∧
           (Instance( tid4, peer, role2 ) @ #b)) ∧
          (#b < #j)) ∧
         (¬(#a = #b))) ∧
        (!KU( gxy ) @ #r)) ∧
       (#r < #k)) ∨
     (∃ ticket res_psk #a #r.
       ((((FreshPSK( ticket, res_psk ) @ #a) ∧ (!KU( res_psk ) @ #r)) ∧
         (#a < #i)) ∧
        (#a < #j)) ∧
       (#r < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor actor2 role role2 peer peer2 rms messages #i #j
   #k.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms, messages> ) @ #j) ∧
  (!KU( rms ) @ #k)
 ∧
  (¬(role = role2)) ∧
  (∀ g x y gx gy gxy tid3 tid4 #a #b #r.
    (DHChal( g, x, y, gx, gy, gxy ) @ #a) ∧
    (Instance( tid3, actor, role ) @ #a) ∧
    (DHChal( g, x, y, gx, gy, gxy ) @ #b) ∧
    (Instance( tid4, peer, role2 ) @ #b) ∧
    (!KU( gxy ) @ #r)
   ⇒
    ((¬(#a < #i)) ∨ (¬(#b < #j)) ∨ (#a = #b) ∨ (¬(#r < #k)))) ∧
  (∀ ticket res_psk #a #r.
    (FreshPSK( ticket, res_psk ) @ #a) ∧ (!KU( res_psk ) @ #r)
   ⇒
    ((¬(#a < #i)) ∨ (¬(#a < #j)) ∨ (¬(#r < #k))))"
*/
by sorry

lemma post_master_secret [reuse]:
  all-traces
  "∀ tid actor peer role hs rms messages #i #k.
    ((((RPostHS( tid, actor, role, <hs, rms, peer, 'auth', messages>
        ) @ #i) ∧
       (CHS( tid, actor, role, hs ) @ #i)) ∧
      (CIdentityPost( tid, actor, role, <peer, 'auth'> ) @ #i)) ∧
     (!KU( rms ) @ #k)) ⇒
    (∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role hs rms messages #i #k.
  (RPostHS( tid, actor, role, <hs, rms, peer, 'auth', messages>
   ) @ #i) ∧
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (CIdentityPost( tid, actor, role, <peer, 'auth'> ) @ #i) ∧
  (!KU( rms ) @ #k)
 ∧
  ∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)"
*/
simplify
solve( !Pk( $C, pk(~ltkC) ) ▶₂ #i )
  case Register_pk
  solve( RPostHS( tid, $S, 'server',
                  <hs, Expand(Extract('0', hs), <'rms', h(messages)>, '32'), $C, 
                   'auth', messages>
         ) @ #i )
    case recv_client_auth_post
    solve( CHS( tid, $S, 'server', hs ) @ #i )
      case recv_client_auth_post
      solve( (∃ #j. (!KU( ~ltkC ) @ #j) ∧ #j < #vk)  ∥
             (∃ #k.
               (UseLtk( ~ltkC,
                        sign(<'client_cv', 
                              h(<messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                             ~ltkC)
                ) @ #k)
              ∧
               #k < #vk) )
        case case_1
        by contradiction
      next
        case case_2
        solve( UseLtk( ~ltkC,
                       sign(<'client_cv', 
                             h(<messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                            ~ltkC)
               ) @ #k.1 )
          case client_auth_post
          solve( (∃ g x y gx gy gxy tid3 tid4 #a #b #r.
                   (DHChal( g, x, y, gx, gy, gxy ) @ #a) ∧
                   (Instance( tid3, $C.1, 'client' ) @ #a) ∧
                   (DHChal( g, x, y, gx, gy, gxy ) @ #b) ∧
                   (Instance( tid4, $S, 'server' ) @ #b) ∧
                   (!KU( gxy ) @ #r)
                  ∧
                   (#a < #j.5) ∧ (#b < #j) ∧ (¬(#a = #b)) ∧ (#r < #k.1))  ∥
                 (∃ ticket res_psk #a #r.
                   (FreshPSK( ticket, res_psk ) @ #a) ∧ (!KU( res_psk ) @ #r)
                  ∧
                   (#a < #j.5) ∧ (#a < #j) ∧ (#r < #k.1)) )
            case case_1
            solve( (∃ g x y gx gy gxy tid3 tid4 #a #b #r.
                     (DHChal( g, x, y, gx, gy, gxy ) @ #a) ∧
                     (Instance( tid3, $C.1, 'client' ) @ #a) ∧
                     (DHChal( g, x, y, gx, gy, gxy ) @ #b) ∧
                     (Instance( tid4, $S, 'server' ) @ #b) ∧
                     (!KU( gxy ) @ #r)
                    ∧
                     (#a < #j.5) ∧ (#b < #j.2) ∧ (¬(#a = #b)) ∧ (#r < #k.1))  ∥
                   (∃ ticket res_psk #a #r.
                     (FreshPSK( ticket, res_psk ) @ #a) ∧ (!KU( res_psk ) @ #r)
                    ∧
                     (#a < #j.5) ∧ (#a < #j.2) ∧ (#r < #k.1)) )
              case case_1
              solve( (∃ g x y gx gy gxy tid3 tid4 #a #b #r.
                       (DHChal( g, x, y, gx, gy, gxy ) @ #a) ∧
                       (Instance( tid3, $S, 'server' ) @ #a) ∧
                       (DHChal( g, x, y, gx, gy, gxy ) @ #b) ∧
                       (Instance( tid4, $C.1, 'client' ) @ #b) ∧
                       (!KU( gxy ) @ #r)
                      ∧
                       (#a < #j.1) ∧ (#b < #j) ∧ (¬(#a = #b)) ∧ (#r < #k.1))  ∥
                     (∃ ticket res_psk #a #r.
                       (FreshPSK( ticket, res_psk ) @ #a) ∧ (!KU( res_psk ) @ #r)
                      ∧
                       (#a < #j.1) ∧ (#a < #j) ∧ (#r < #k.1)) )
                case case_1
                solve( (#a < #b)  ∥ (#b < #a) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        qed
      qed
    qed
  qed
qed

lemma invariant_post_hs [reuse, use_induction]:
  all-traces
  "∀ tid actor peer peer2 role hs hs2 rms rms2 as as2 msgs msgs2 #i
     #j.
    ((RPostHS( tid, actor, role, <hs, rms, peer, as, msgs> ) @ #i) ∧
     (RPostHS( tid, actor, role, <hs2, rms2, peer2, as2, msgs2>
      ) @ #j)) ⇒
    ((((peer = peer2) ∧ (rms = rms2)) ∧ (msgs = msgs2)) ∧ (hs = hs2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer peer2 role hs hs2 rms rms2 as as2 msgs msgs2 #i
   #j.
  (RPostHS( tid, actor, role, <hs, rms, peer, as, msgs> ) @ #i) ∧
  (RPostHS( tid, actor, role, <hs2, rms2, peer2, as2, msgs2> ) @ #j)
 ∧
  ((¬(peer = peer2)) ∨
   (¬(rms = rms2)) ∨
   (¬(msgs = msgs2)) ∨
   (¬(hs = hs2)))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( RRMS( tid, actor, role,
               <peer, Expand(Extract('0', hs), <'rms', h(msgs)>, '32'), msgs>
         ) @ #j )
    case client_auth
    solve( RRMS( tid, $C, 'client',
                 <peer2, Expand(Extract('0', hs2), <'rms', h(msgs2)>, '32'), msgs2>
           ) @ #j.1 )
      case client_auth
      by contradiction
    next
      case client_auth_cert
      by contradiction
    qed
  next
    case client_auth_cert
    solve( RRMS( tid, $C, 'client',
                 <peer2, Expand(Extract('0', hs2), <'rms', h(msgs2)>, '32'), msgs2>
           ) @ #j.1 )
      case client_auth
      by contradiction
    next
      case client_auth_cert
      by contradiction
    qed
  next
    case recv_client_auth
    solve( RRMS( tid, $S, 'server',
                 <peer2, Expand(Extract('0', hs2), <'rms', h(msgs2)>, '32'), msgs2>
           ) @ #j.1 )
      case recv_client_auth
      by contradiction
    next
      case recv_client_auth_cert
      by contradiction
    qed
  next
    case recv_client_auth_cert
    solve( RRMS( tid, $S, 'server',
                 <peer2, Expand(Extract('0', hs2), <'rms', h(msgs2)>, '32'), msgs2>
           ) @ #j.1 )
      case recv_client_auth
      by contradiction
    next
      case recv_client_auth_cert
      by contradiction
    qed
  qed
qed

lemma handshake_secret [reuse, use_induction]:
  all-traces
  "∀ tid actor peer role hs #i #k.
    (((CHS( tid, actor, role, hs ) @ #i) ∧
      (CIdentity( tid, actor, role, <peer, 'auth'> ) @ #i)) ∧
     (!KU( hs ) @ #k)) ⇒
    (∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role hs #i #k.
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (CIdentity( tid, actor, role, <peer, 'auth'> ) @ #i) ∧
  (!KU( hs ) @ #k)
 ∧
  ∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (last(#k))  ∥ (last(#i))  ∥
         (∃ #r. (RevLtk( peer ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) )
    case case_1
    solve( CHS( tid, actor, role, hs ) @ #i )
      case recv_client_auth
      solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
        case recv_client_auth
        solve( F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns,
                           prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                           prev_psk_id, prev_edi, prev_es, hs, Extract('0', hs), prev_cats, prev_sats,
                           prev_hs_keyc, prev_hs_keys, 'auth', prev_ems, prev_rms, '0'
               ) ▶₀ #i )
          case server_auth_psk_case_1
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.6)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.6) ∨ (#k = #vr.6))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_2
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.7)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.7) ∨ (#k = #vr.7))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_3
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.6)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.6) ∨ (#k = #vr.6))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_4
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.7)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.7) ∨ (#k = #vr.7))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        qed
      qed
    next
      case recv_client_auth_cert
      solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
        case recv_client_auth_cert
        solve( !Pk( $C, pk(~ltkC) ) ▶₁ #i )
          case Register_pk
          solve( (∃ #j. (!KU( ~ltkC ) @ #j) ∧ #j < #vk)  ∥
                 (∃ #k.
                   (UseLtk( ~ltkC,
                            sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                    ) @ #k)
                  ∧
                   #k < #vk) )
            case case_1
            by contradiction
          next
            case case_2
            solve( UseLtk( ~ltkC,
                           sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                   ) @ #k )
              case client_auth_cert
              solve( !Ltk( $C.1, ~ltkC ) ▶₁ #k )
                case Register_pk
                solve( F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns,
                                   prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                                   prev_psk_id, prev_edi, prev_es, hs, Extract('0', hs), prev_cats, prev_sats,
                                   prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms, '1'
                       ) ▶₀ #i )
                  case server_auth_case_1
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, 
                                            '40', $prev_g, prev_gx>, 
                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy, Extract('0', '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <'0', '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'13', $sig_algs>, '40', $prev_g, 
                                                                   prev_gx>, 
                                                                  '2', '0x0303', ~new_ns, 
                                                                  $cipher_suite, 
                                                                  <'13', $sig_algs.1>, '40', $prev_g, 
                                                                  $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <'0', '1', '0x0303', 
                                                                           prev_nc, '0', 
                                                                           $cipher_suites, '0', 
                                                                           <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'13', $sig_algs>, '40', 
                                                                           $prev_g, prev_gx>, 
                                                                          '2', '0x0303', ~new_ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs.1>, 
                                                                          '40', $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <'0', '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'13', $sig_algs>, 
                                                            '40', $prev_g, prev_gx>, 
                                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y
                                                          >, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, Extract('0', prev_hs),
                                     prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems,
                                     prev_rms, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction
                  qed
                next
                  case server_auth_case_2
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk.1,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', '0x0303', 
                                            prev_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                                            <'10', $g1, $g2>, <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy, Extract(prev_res_psk, '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <
                                                                   <prev_messages, '6', '0x0303', 
                                                                    '40', $prev_g>, 
                                                                   '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'13', $sig_algs>, '40', $prev_g, 
                                                                   prev_gx>, 
                                                                  '2', '0x0303', ~new_ns, 
                                                                  $cipher_suite, 
                                                                  <'13', $sig_algs.1>, '40', $prev_g, 
                                                                  $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <
                                                                           <prev_messages, '6', 
                                                                            '0x0303', '40', $prev_g>, 
                                                                           '1', '0x0303', prev_nc, 
                                                                           '0', $cipher_suites, 
                                                                           '0', <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'13', $sig_algs>, '40', 
                                                                           $prev_g, prev_gx>, 
                                                                          '2', '0x0303', ~new_ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs.1>, 
                                                                          '40', $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <
                                                            <prev_messages, '6', '0x0303', '40', $prev_g
                                                            >, 
                                                            '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'13', $sig_algs>, 
                                                            '40', $prev_g, prev_gx>, 
                                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y
                                                          >, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x.1, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id.1, prev_edi.1, prev_es, prev_hs,
                                     Extract('0', prev_hs), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms.1, '1'
                         ) ▶₀ #k )
                    case recv_server_auth_case_1
                    by contradiction
                  next
                    case recv_server_auth_case_2
                    by contradiction
                  next
                    case recv_server_auth_case_3
                    by contradiction
                  qed
                next
                  case server_auth_case_3
                  by contradiction
                next
                  case server_auth_case_4
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                            <'45', '0', '1'>, prev_edi, '41', <~ticket, mask(x, x.1)>, 
                                            binder>, 
                                           '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                                           '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy,
                                                                  Extract(Expand(Extract('0', prev_hs),
                                                                                 <'rms', 
                                                                                  h(prev_messages)>,
                                                                                 '32'),
                                                                          '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <'0', '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'40', $prev_g, prev_gx>, 
                                                                   <'45', '0', '1'>, prev_edi, '41', 
                                                                   <~ticket, mask(x, x.1)>, binder
                                                                  >, 
                                                                  '2', '0x0303', ~ns, 
                                                                  $cipher_suite, <'13', $sig_algs>, 
                                                                  '40', $prev_g, $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <'0', '1', '0x0303', 
                                                                           prev_nc, '0', 
                                                                           $cipher_suites, '0', 
                                                                           <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'40', $prev_g, prev_gx>, 
                                                                           <'45', '0', '1'>, prev_edi, 
                                                                           '41', 
                                                                           <~ticket, mask(x, x.1)>, 
                                                                           binder>, 
                                                                          '2', '0x0303', ~ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs>, '40', 
                                                                          $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <'0', '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                                            <'45', '0', '1'>, prev_edi, '41', 
                                                            <~ticket, mask(x, x.1)>, binder>, 
                                                           '2', '0x0303', ~ns, $cipher_suite, 
                                                           <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi.1, prev_es, prev_hs.1,
                                     Extract('0', prev_hs.1), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction /* cyclic */
                  qed
                next
                  case server_auth_case_5
                  by contradiction
                next
                  case server_auth_case_6
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                            '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                            <'45', '0', '1'>, prev_edi, '41', <~ticket, mask(x, x.1)>, 
                                            binder>, 
                                           '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                                           '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy,
                                                                  Extract(Expand(Extract('0', prev_hs),
                                                                                 <'rms', 
                                                                                  h(prev_messages)>,
                                                                                 '32'),
                                                                          '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <
                                                                   <prev_messages.1, '6', '0x0303', 
                                                                    '40', $prev_g>, 
                                                                   '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'40', $prev_g, prev_gx>, 
                                                                   <'45', '0', '1'>, prev_edi, '41', 
                                                                   <~ticket, mask(x, x.1)>, binder
                                                                  >, 
                                                                  '2', '0x0303', ~ns, 
                                                                  $cipher_suite, <'13', $sig_algs>, 
                                                                  '40', $prev_g, $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <
                                                                           <prev_messages.1, '6', 
                                                                            '0x0303', '40', $prev_g>, 
                                                                           '1', '0x0303', prev_nc, 
                                                                           '0', $cipher_suites, 
                                                                           '0', <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'40', $prev_g, prev_gx>, 
                                                                           <'45', '0', '1'>, prev_edi, 
                                                                           '41', 
                                                                           <~ticket, mask(x, x.1)>, 
                                                                           binder>, 
                                                                          '2', '0x0303', ~ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs>, '40', 
                                                                          $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <
                                                            <prev_messages.1, '6', '0x0303', '40', $prev_g
                                                            >, 
                                                            '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                                            <'45', '0', '1'>, prev_edi, '41', 
                                                            <~ticket, mask(x, x.1)>, binder>, 
                                                           '2', '0x0303', ~ns, $cipher_suite, 
                                                           <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x.1, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi.1, prev_es, prev_hs.1,
                                     Extract('0', prev_hs.1), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms.1, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case recv_client_auth_post
      by solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
    next
      case recv_server_auth
      solve( !Pk( $S, pk(~ltkS) ) ▶₁ #i )
        case Register_pk
        solve( CIdentity( tid, $C, 'client', <peer, 'auth'> ) @ #i )
          case recv_server_auth
          solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk)  ∥
                 (∃ #k.
                   (UseLtk( ~ltkS,
                            sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                    ) @ #k)
                  ∧
                   #k < #vk) )
            case case_1
            by contradiction
          next
            case case_2
            solve( UseLtk( ~ltkS,
                           sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                   ) @ #k )
              case server_auth
              solve( !Ltk( $S.1, ~ltkS ) ▶₁ #k )
                case Register_pk
                solve( F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns,
                                    prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id,
                                    prev_edi, prev_es, hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                    prev_auth_status, prev_ems, prev_rms, prev_cert_req
                       ) ▶₀ #i )
                  case recv_certificate_request_case_1
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                          <'43', '0x0304'>, <'10', $g, $g2>, <'13', $sig_algs>, 
                                          '40', $g, $g^~x>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction
                  qed
                next
                  case recv_certificate_request_case_2
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                            '40', $g1, $g1^~x>, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs.1>, 
                                          '40', $g, $g^~x.1>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.2>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction
                  qed
                next
                  case recv_certificate_request_case_3
                  by contradiction
                next
                  case recv_certificate_request_case_4
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                            <'45', '0', '1'>, <'42', '0'>, '41', 
                                            <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                            hmac(<
                                                  Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                               <'rms', h(prev_messages)
                                                                               >,
                                                                               '32'),
                                                                        '0'),
                                                                <'rpbk', '0'>, '32'),
                                                         <'binder', '0'>, '32'), 
                                                  h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     '0'>)
                                                 >)
                                           >, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                          '40', $g, $g^~x.1>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction /* cyclic */
                  qed
                next
                  case recv_certificate_request_case_5
                  by contradiction
                next
                  case recv_certificate_request_case_6
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                          <'43', '0x0304'>, <'10', $g, $g2>, <'40', $g, $g^~x>, 
                                          <'45', '0', '1'>, <'42', '0'>, '41', 
                                          <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                          hmac(<
                                                Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                             <'rms', h(prev_messages)>,
                                                                             '32'),
                                                                      '0'),
                                                              <'rpbk', '0'>, '32'),
                                                       <'binder', '0'>, '32'), 
                                                h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                   '0', <'43', '0x0304'>, <'10', $g, $g2>, 
                                                   <'40', $g, $g^~x>, <'45', '0', '1'>, 
                                                   <'42', '0'>, '41', 
                                                   <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                   '0'>)
                                               >)
                                         >, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case recv_certificate_request_case_7
                  by contradiction
                next
                  case recv_certificate_request_case_8
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                            <'45', '0', '1'>, <'42', '0'>, '41', 
                                            <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                            hmac(<
                                                  Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                               <'rms', h(prev_messages)
                                                                               >,
                                                                               '32'),
                                                                        '0'),
                                                                <'rpbk', '0'>, '32'),
                                                         <'binder', '0'>, '32'), 
                                                  h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     '0'>)
                                                 >)
                                           >, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~new_nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g, $g^~x.1>, 
                                          <'45', '0', '1'>, '0', '41', 
                                          <prev_psk_id, mask(ticket_age_add, '1')>, 
                                          hmac(<
                                                Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                             <'rms', h(prev_messages)>,
                                                                             '32'),
                                                                      '0'),
                                                              <'rpbk', '0'>, '32'),
                                                       <'binder', '0'>, '32'), 
                                                h(<
                                                   <
                                                    <'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     hmac(<
                                                           Expand(Expand(Extract(Expand(Extract('0',
                                                                                                prev_hs),
                                                                                        <'rms', 
                                                                                         h(prev_messages)
                                                                                        >,
                                                                                        '32'),
                                                                                 '0'),
                                                                         <'rpbk', '0'>, '32'),
                                                                  <'binder', '0'>, '32'), 
                                                           h(<'0', '1', '0x0303', ~nc, '0', 
                                                              $cipher_suites, '0', 
                                                              <'43', '0x0304'>, <'10', $g1, $g>, 
                                                              <'40', $g1, $g1^~x>, 
                                                              <'45', '0', '1'>, <'42', '0'>, '41', 
                                                              <prev_psk_id, 
                                                               mask(ticket_age_add, $ticket_age)>, 
                                                              '0'>)
                                                          >)
                                                    >, 
                                                    '6', '0x0303', '40', $g>, 
                                                   '1', '0x0303', ~new_nc, '0', $cipher_suites.1, 
                                                   '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                   <'40', $g, $g^~x.1>, <'45', '0', '1'>, '0', 
                                                   '41', <prev_psk_id, mask(ticket_age_add, '1')>, '0'
                                                  >)
                                               >)
                                         >, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_1
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                         <'43', '0x0304'>, <'10', $g, $g2>, <'13', $sig_algs>, 
                                         '40', $g, $g^~x>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction
                  qed
                next
                  case skip_recv_certificate_request_case_2
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                           '40', $g1, $g1^~x>, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs.1>, 
                                         '40', $g, $g^~x.1>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.2>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction
                  qed
                next
                  case skip_recv_certificate_request_case_3
                  by contradiction
                next
                  case skip_recv_certificate_request_case_4
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                           <'45', '0', '1'>, <'42', '0'>, '41', 
                                           <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                           hmac(<
                                                 Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                              <'rms', h(prev_messages)
                                                                              >,
                                                                              '32'),
                                                                       '0'),
                                                               <'rpbk', '0'>, '32'),
                                                        <'binder', '0'>, '32'), 
                                                 h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    '0'>)
                                                >)
                                          >, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                         '40', $g, $g^~x.1>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_5
                  by contradiction
                next
                  case skip_recv_certificate_request_case_6
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                         <'43', '0x0304'>, <'10', $g, $g2>, <'40', $g, $g^~x>, 
                                         <'45', '0', '1'>, <'42', '0'>, '41', 
                                         <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                         hmac(<
                                               Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                            <'rms', h(prev_messages)>,
                                                                            '32'),
                                                                     '0'),
                                                             <'rpbk', '0'>, '32'),
                                                      <'binder', '0'>, '32'), 
                                               h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                  '0', <'43', '0x0304'>, <'10', $g, $g2>, 
                                                  <'40', $g, $g^~x>, <'45', '0', '1'>, <'42', '0'>, 
                                                  '41', 
                                                  <prev_psk_id, mask(ticket_age_add, $ticket_age)>, '0'
                                                 >)
                                              >)
                                        >, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case skip_certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_7
                  by contradiction
                next
                  case skip_recv_certificate_request_case_8
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                           <'45', '0', '1'>, <'42', '0'>, '41', 
                                           <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                           hmac(<
                                                 Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                              <'rms', h(prev_messages)
                                                                              >,
                                                                              '32'),
                                                                       '0'),
                                                               <'rpbk', '0'>, '32'),
                                                        <'binder', '0'>, '32'), 
                                                 h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    '0'>)
                                                >)
                                          >, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~new_nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g, $g^~x.1>, 
                                         <'45', '0', '1'>, '0', '41', 
                                         <prev_psk_id, mask(ticket_age_add, '1')>, 
                                         hmac(<
                                               Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                            <'rms', h(prev_messages)>,
                                                                            '32'),
                                                                     '0'),
                                                             <'rpbk', '0'>, '32'),
                                                      <'binder', '0'>, '32'), 
                                               h(<
                                                  <
                                                   <'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    hmac(<
                                                          Expand(Expand(Extract(Expand(Extract('0',
                                                                                               prev_hs),
                                                                                       <'rms', 
                                                                                        h(prev_messages)
                                                                                       >,
                                                                                       '32'),
                                                                                '0'),
                                                                        <'rpbk', '0'>, '32'),
                                                                 <'binder', '0'>, '32'), 
                                                          h(<'0', '1', '0x0303', ~nc, '0', 
                                                             $cipher_suites, '0', <'43', '0x0304'>, 
                                                             <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                                             <'45', '0', '1'>, <'42', '0'>, '41', 
                                                             <prev_psk_id, 
                                                              mask(ticket_age_add, $ticket_age)>, 
                                                             '0'>)
                                                         >)
                                                   >, 
                                                   '6', '0x0303', '40', $g>, 
                                                  '1', '0x0303', ~new_nc, '0', $cipher_suites.1, 
                                                  '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                  <'40', $g, $g^~x.1>, <'45', '0', '1'>, '0', '41', 
                                                  <prev_psk_id, mask(ticket_age_add, '1')>, '0'>)
                                              >)
                                        >, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case skip_certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case recv_server_auth_psk
      solve( CIdentity( tid, $C, 'client', <peer, 'auth'> ) @ #i )
        case recv_server_auth_psk
        solve( F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns,
                            prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                            prev_psk_id, prev_edi, prev_es, hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                            prev_hs_keys, 'auth', prev_ems, prev_rms, prev_cert_req
               ) ▶₀ #i )
          case skip_recv_certificate_request_case_1
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.4)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.4) ∨ (#k = #vr.4))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_2
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.5)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.5) ∨ (#k = #vr.5))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_3
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.4)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.4) ∨ (#k = #vr.4))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_4
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.5)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.5) ∨ (#k = #vr.5))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( CHS( tid, actor, role, hs ) @ #i )
      case recv_client_auth
      solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
        case recv_client_auth
        solve( F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns,
                           prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                           prev_psk_id, prev_edi, prev_es, hs, Extract('0', hs), prev_cats, prev_sats,
                           prev_hs_keyc, prev_hs_keys, 'auth', prev_ems, prev_rms, '0'
               ) ▶₀ #i )
          case server_auth_psk_case_1
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.6)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.6) ∨ (#k = #vr.6))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_2
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.7)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.7) ∨ (#k = #vr.7))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_3
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.6)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.6) ∨ (#k = #vr.6))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case server_auth_psk_case_4
          solve( (∃ #k.
                   (CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.7)  ∥
                 (∃ #k.
                   (CIdentityPost( tid.1, $S, 'server', <$C, 'auth'> ) @ #k) ∧
                   ('server' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.7) ∨ (#k = #vr.7))) )
            case case_1
            solve( CIdentity( tid.1, $S, 'server', <$C, 'auth'> ) @ #k.3 )
              case recv_client_auth
              by contradiction
            next
              case recv_client_auth_cert
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        qed
      qed
    next
      case recv_client_auth_cert
      solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
        case recv_client_auth_cert
        solve( !Pk( $C, pk(~ltkC) ) ▶₁ #i )
          case Register_pk
          solve( (∃ #j. (!KU( ~ltkC ) @ #j) ∧ #j < #vk)  ∥
                 (∃ #k.
                   (UseLtk( ~ltkC,
                            sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                    ) @ #k)
                  ∧
                   #k < #vk) )
            case case_1
            by contradiction
          next
            case case_2
            solve( UseLtk( ~ltkC,
                           sign(<'client_cv', h(<prev_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                   ) @ #k )
              case client_auth_cert
              solve( !Ltk( $C.1, ~ltkC ) ▶₁ #k )
                case Register_pk
                solve( F_State_S3( tid, $S, $C, prev_res_psk, prev_messages, prev_nc, prev_ns,
                                   prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                                   prev_psk_id, prev_edi, prev_es, hs, Extract('0', hs), prev_cats, prev_sats,
                                   prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms, '1'
                       ) ▶₀ #i )
                  case server_auth_case_1
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, 
                                            '40', $prev_g, prev_gx>, 
                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy, Extract('0', '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <'0', '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'13', $sig_algs>, '40', $prev_g, 
                                                                   prev_gx>, 
                                                                  '2', '0x0303', ~new_ns, 
                                                                  $cipher_suite, 
                                                                  <'13', $sig_algs.1>, '40', $prev_g, 
                                                                  $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <'0', '1', '0x0303', 
                                                                           prev_nc, '0', 
                                                                           $cipher_suites, '0', 
                                                                           <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'13', $sig_algs>, '40', 
                                                                           $prev_g, prev_gx>, 
                                                                          '2', '0x0303', ~new_ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs.1>, 
                                                                          '40', $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <'0', '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'13', $sig_algs>, 
                                                            '40', $prev_g, prev_gx>, 
                                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y
                                                          >, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, Extract('0', prev_hs),
                                     prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems,
                                     prev_rms, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction
                  qed
                next
                  case server_auth_case_2
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk.1,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', '0x0303', 
                                            prev_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                                            <'10', $g1, $g2>, <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy, Extract(prev_res_psk, '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <
                                                                   <prev_messages, '6', '0x0303', 
                                                                    '40', $prev_g>, 
                                                                   '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'13', $sig_algs>, '40', $prev_g, 
                                                                   prev_gx>, 
                                                                  '2', '0x0303', ~new_ns, 
                                                                  $cipher_suite, 
                                                                  <'13', $sig_algs.1>, '40', $prev_g, 
                                                                  $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <
                                                                           <prev_messages, '6', 
                                                                            '0x0303', '40', $prev_g>, 
                                                                           '1', '0x0303', prev_nc, 
                                                                           '0', $cipher_suites, 
                                                                           '0', <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'13', $sig_algs>, '40', 
                                                                           $prev_g, prev_gx>, 
                                                                          '2', '0x0303', ~new_ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs.1>, 
                                                                          '40', $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <<prev_messages, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'13', $sig_algs>, '40', $prev_g, prev_gx>, 
                                                   '2', '0x0303', ~new_ns, $cipher_suite, 
                                                   <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <
                                                            <prev_messages, '6', '0x0303', '40', $prev_g
                                                            >, 
                                                            '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'13', $sig_algs>, 
                                                            '40', $prev_g, prev_gx>, 
                                                           '2', '0x0303', ~new_ns, $cipher_suite, 
                                                           <'13', $sig_algs.1>, '40', $prev_g, $prev_g^~y
                                                          >, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x.1, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id.1, prev_edi.1, prev_es, prev_hs,
                                     Extract('0', prev_hs), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms.1, '1'
                         ) ▶₀ #k )
                    case recv_server_auth_case_1
                    by contradiction
                  next
                    case recv_server_auth_case_2
                    by contradiction
                  next
                    case recv_server_auth_case_3
                    by contradiction
                  qed
                next
                  case server_auth_case_3
                  by contradiction
                next
                  case server_auth_case_4
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                            <'45', '0', '1'>, prev_edi, '41', <~ticket, mask(x, x.1)>, 
                                            binder>, 
                                           '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                                           '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy,
                                                                  Extract(Expand(Extract('0', prev_hs),
                                                                                 <'rms', 
                                                                                  h(prev_messages)>,
                                                                                 '32'),
                                                                          '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <'0', '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'40', $prev_g, prev_gx>, 
                                                                   <'45', '0', '1'>, prev_edi, '41', 
                                                                   <~ticket, mask(x, x.1)>, binder
                                                                  >, 
                                                                  '2', '0x0303', ~ns, 
                                                                  $cipher_suite, <'13', $sig_algs>, 
                                                                  '40', $prev_g, $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <'0', '1', '0x0303', 
                                                                           prev_nc, '0', 
                                                                           $cipher_suites, '0', 
                                                                           <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'40', $prev_g, prev_gx>, 
                                                                           <'45', '0', '1'>, prev_edi, 
                                                                           '41', 
                                                                           <~ticket, mask(x, x.1)>, 
                                                                           binder>, 
                                                                          '2', '0x0303', ~ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs>, '40', 
                                                                          $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <'0', '1', '0x0303', prev_nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <'0', '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                                            <'45', '0', '1'>, prev_edi, '41', 
                                                            <~ticket, mask(x, x.1)>, binder>, 
                                                           '2', '0x0303', ~ns, $cipher_suite, 
                                                           <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi.1, prev_es, prev_hs.1,
                                     Extract('0', prev_hs.1), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction /* cyclic */
                  qed
                next
                  case server_auth_case_5
                  by contradiction
                next
                  case server_auth_case_6
                  solve( F_State_C3( tid.1, $C, $S.1, prev_res_psk,
                                     <
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                            '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                            <'45', '0', '1'>, prev_edi, '41', <~ticket, mask(x, x.1)>, 
                                            binder>, 
                                           '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                                           '40', $prev_g, $prev_g^~y>, 
                                          '8', $exts>, 
                                         '13', '0', $certificate_extensions>, 
                                        '11', '0', pk(~ltkS)>, 
                                       '15', 
                                       sign(<'server_cv', 
                                             h(<
                                                <
                                                 <
                                                  <
                                                   <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>)
                                            >,
                                            ~ltkS)
                                      >, 
                                      '20', 
                                      hmac(<
                                            Expand(Expand(Extract(prev_gxy,
                                                                  Extract(Expand(Extract('0', prev_hs),
                                                                                 <'rms', 
                                                                                  h(prev_messages)>,
                                                                                 '32'),
                                                                          '0')),
                                                          <'serverhts', 
                                                           h(<
                                                              <
                                                               <
                                                                <
                                                                 <
                                                                  <
                                                                   <prev_messages.1, '6', '0x0303', 
                                                                    '40', $prev_g>, 
                                                                   '1', '0x0303', prev_nc, '0', 
                                                                   $cipher_suites, '0', 
                                                                   <'43', '0x0304'>, 
                                                                   <'10', $g1, $g2>, 
                                                                   <'40', $prev_g, prev_gx>, 
                                                                   <'45', '0', '1'>, prev_edi, '41', 
                                                                   <~ticket, mask(x, x.1)>, binder
                                                                  >, 
                                                                  '2', '0x0303', ~ns, 
                                                                  $cipher_suite, <'13', $sig_algs>, 
                                                                  '40', $prev_g, $prev_g^~y>, 
                                                                 '8', $exts>, 
                                                                '13', '0', $certificate_extensions
                                                               >, 
                                                               '11', '0', pk(~ltkS)>, 
                                                              '15', 
                                                              sign(<'server_cv', 
                                                                    h(<
                                                                       <
                                                                        <
                                                                         <
                                                                          <
                                                                           <prev_messages.1, '6', 
                                                                            '0x0303', '40', $prev_g>, 
                                                                           '1', '0x0303', prev_nc, 
                                                                           '0', $cipher_suites, 
                                                                           '0', <'43', '0x0304'>, 
                                                                           <'10', $g1, $g2>, 
                                                                           <'40', $prev_g, prev_gx>, 
                                                                           <'45', '0', '1'>, prev_edi, 
                                                                           '41', 
                                                                           <~ticket, mask(x, x.1)>, 
                                                                           binder>, 
                                                                          '2', '0x0303', ~ns, 
                                                                          $cipher_suite, 
                                                                          <'13', $sig_algs>, '40', 
                                                                          $prev_g, $prev_g^~y>, 
                                                                         '8', $exts>, 
                                                                        '13', '0', 
                                                                        $certificate_extensions>, 
                                                                       '11', '0', pk(~ltkS)>)
                                                                   >,
                                                                   ~ltkS)
                                                             >)
                                                          >,
                                                          '32'),
                                                   <'fin', '0'>, '32'), 
                                            h(<
                                               <
                                                <
                                                 <
                                                  <
                                                   <<prev_messages.1, '6', '0x0303', '40', $prev_g>, '1', 
                                                    '0x0303', prev_nc, '0', $cipher_suites, '0', 
                                                    <'43', '0x0304'>, <'10', $g1, $g2>, 
                                                    <'40', $prev_g, prev_gx>, <'45', '0', '1'>, prev_edi, 
                                                    '41', <~ticket, mask(x, x.1)>, binder>, 
                                                   '2', '0x0303', ~ns, $cipher_suite, 
                                                   <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                  '8', $exts>, 
                                                 '13', '0', $certificate_extensions>, 
                                                '11', '0', pk(~ltkS)>, 
                                               '15', 
                                               sign(<'server_cv', 
                                                     h(<
                                                        <
                                                         <
                                                          <
                                                           <
                                                            <prev_messages.1, '6', '0x0303', '40', $prev_g
                                                            >, 
                                                            '1', '0x0303', prev_nc, '0', 
                                                            $cipher_suites, '0', <'43', '0x0304'>, 
                                                            <'10', $g1, $g2>, <'40', $prev_g, prev_gx>, 
                                                            <'45', '0', '1'>, prev_edi, '41', 
                                                            <~ticket, mask(x, x.1)>, binder>, 
                                                           '2', '0x0303', ~ns, $cipher_suite, 
                                                           <'13', $sig_algs>, '40', $prev_g, $prev_g^~y>, 
                                                          '8', $exts>, 
                                                         '13', '0', $certificate_extensions>, 
                                                        '11', '0', pk(~ltkS)>)
                                                    >,
                                                    ~ltkS)
                                              >)
                                           >)
                                     >,
                                     prev_nc.1, prev_ns, prev_g.1, prev_sg, prev_hrr, prev_x.1, prev_y, prev_gx.1, prev_gy,
                                     prev_gxy.1, 'na', prev_psk_id, prev_edi.1, prev_es, prev_hs.1,
                                     Extract('0', prev_hs.1), prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                     prev_auth_status, prev_ems, prev_rms.1, '1'
                         ) ▶₀ #k )
                    case recv_server_auth
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case recv_client_auth_post
      by solve( CIdentity( tid, $S, 'server', <peer, 'auth'> ) @ #i )
    next
      case recv_server_auth
      solve( !Pk( $S, pk(~ltkS) ) ▶₁ #i )
        case Register_pk
        solve( CIdentity( tid, $C, 'client', <peer, 'auth'> ) @ #i )
          case recv_server_auth
          solve( (∃ #j. (!KU( ~ltkS ) @ #j) ∧ #j < #vk)  ∥
                 (∃ #k.
                   (UseLtk( ~ltkS,
                            sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                    ) @ #k)
                  ∧
                   #k < #vk) )
            case case_1
            by contradiction
          next
            case case_2
            solve( UseLtk( ~ltkS,
                           sign(<'server_cv', h(<prev_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
                   ) @ #k )
              case server_auth
              solve( !Ltk( $S.1, ~ltkS ) ▶₁ #k )
                case Register_pk
                solve( F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns,
                                    prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, 'na', prev_psk_id,
                                    prev_edi, prev_es, hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc, prev_hs_keys,
                                    prev_auth_status, prev_ems, prev_rms, prev_cert_req
                       ) ▶₀ #i )
                  case recv_certificate_request_case_1
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                          <'43', '0x0304'>, <'10', $g, $g2>, <'13', $sig_algs>, 
                                          '40', $g, $g^~x>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction
                  qed
                next
                  case recv_certificate_request_case_2
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                            '40', $g1, $g1^~x>, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs.1>, 
                                          '40', $g, $g^~x.1>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.2>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction
                  qed
                next
                  case recv_certificate_request_case_3
                  by contradiction
                next
                  case recv_certificate_request_case_4
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                            <'45', '0', '1'>, <'42', '0'>, '41', 
                                            <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                            hmac(<
                                                  Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                               <'rms', h(prev_messages)
                                                                               >,
                                                                               '32'),
                                                                        '0'),
                                                                <'rpbk', '0'>, '32'),
                                                         <'binder', '0'>, '32'), 
                                                  h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     '0'>)
                                                 >)
                                           >, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                          '40', $g, $g^~x.1>, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request
                    by contradiction /* cyclic */
                  qed
                next
                  case recv_certificate_request_case_5
                  by contradiction
                next
                  case recv_certificate_request_case_6
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                          <'43', '0x0304'>, <'10', $g, $g2>, <'40', $g, $g^~x>, 
                                          <'45', '0', '1'>, <'42', '0'>, '41', 
                                          <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                          hmac(<
                                                Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                             <'rms', h(prev_messages)>,
                                                                             '32'),
                                                                      '0'),
                                                              <'rpbk', '0'>, '32'),
                                                       <'binder', '0'>, '32'), 
                                                h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                   '0', <'43', '0x0304'>, <'10', $g, $g2>, 
                                                   <'40', $g, $g^~x>, <'45', '0', '1'>, 
                                                   <'42', '0'>, '41', 
                                                   <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                   '0'>)
                                               >)
                                         >, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case recv_certificate_request_case_7
                  by contradiction
                next
                  case recv_certificate_request_case_8
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <
                                           <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                            <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                            <'45', '0', '1'>, <'42', '0'>, '41', 
                                            <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                            hmac(<
                                                  Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                               <'rms', h(prev_messages)
                                                                               >,
                                                                               '32'),
                                                                        '0'),
                                                                <'rpbk', '0'>, '32'),
                                                         <'binder', '0'>, '32'), 
                                                  h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     '0'>)
                                                 >)
                                           >, 
                                           '6', '0x0303', '40', $g>, 
                                          '1', '0x0303', ~new_nc, '0', $cipher_suites.1, '0', 
                                          <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g, $g^~x.1>, 
                                          <'45', '0', '1'>, '0', '41', 
                                          <prev_psk_id, mask(ticket_age_add, '1')>, 
                                          hmac(<
                                                Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                             <'rms', h(prev_messages)>,
                                                                             '32'),
                                                                      '0'),
                                                              <'rpbk', '0'>, '32'),
                                                       <'binder', '0'>, '32'), 
                                                h(<
                                                   <
                                                    <'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                     '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                     <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                     <'42', '0'>, '41', 
                                                     <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                     hmac(<
                                                           Expand(Expand(Extract(Expand(Extract('0',
                                                                                                prev_hs),
                                                                                        <'rms', 
                                                                                         h(prev_messages)
                                                                                        >,
                                                                                        '32'),
                                                                                 '0'),
                                                                         <'rpbk', '0'>, '32'),
                                                                  <'binder', '0'>, '32'), 
                                                           h(<'0', '1', '0x0303', ~nc, '0', 
                                                              $cipher_suites, '0', 
                                                              <'43', '0x0304'>, <'10', $g1, $g>, 
                                                              <'40', $g1, $g1^~x>, 
                                                              <'45', '0', '1'>, <'42', '0'>, '41', 
                                                              <prev_psk_id, 
                                                               mask(ticket_age_add, $ticket_age)>, 
                                                              '0'>)
                                                          >)
                                                    >, 
                                                    '6', '0x0303', '40', $g>, 
                                                   '1', '0x0303', ~new_nc, '0', $cipher_suites.1, 
                                                   '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                   <'40', $g, $g^~x.1>, <'45', '0', '1'>, '0', 
                                                   '41', <prev_psk_id, mask(ticket_age_add, '1')>, '0'
                                                  >)
                                               >)
                                         >, 
                                         '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                         '40', $g, prev_gy>, 
                                        '8', $exts>, 
                                       '13', '0', $certificate_extensions>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_1
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                         <'43', '0x0304'>, <'10', $g, $g2>, <'13', $sig_algs>, 
                                         '40', $g, $g^~x>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction
                  qed
                next
                  case skip_recv_certificate_request_case_2
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                           '40', $g1, $g1^~x>, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs.1>, 
                                         '40', $g, $g^~x.1>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.2>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id, prev_edi, prev_es, prev_hs, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction
                  qed
                next
                  case skip_recv_certificate_request_case_3
                  by contradiction
                next
                  case skip_recv_certificate_request_case_4
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                           <'45', '0', '1'>, <'42', '0'>, '41', 
                                           <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                           hmac(<
                                                 Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                              <'rms', h(prev_messages)
                                                                              >,
                                                                              '32'),
                                                                       '0'),
                                                               <'rpbk', '0'>, '32'),
                                                        <'binder', '0'>, '32'), 
                                                 h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    '0'>)
                                                >)
                                          >, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'13', $sig_algs>, 
                                         '40', $g, $g^~x.1>, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs.1>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_5
                  by contradiction
                next
                  case skip_recv_certificate_request_case_6
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                         <'43', '0x0304'>, <'10', $g, $g2>, <'40', $g, $g^~x>, 
                                         <'45', '0', '1'>, <'42', '0'>, '41', 
                                         <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                         hmac(<
                                               Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                            <'rms', h(prev_messages)>,
                                                                            '32'),
                                                                     '0'),
                                                             <'rpbk', '0'>, '32'),
                                                      <'binder', '0'>, '32'), 
                                               h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                  '0', <'43', '0x0304'>, <'10', $g, $g2>, 
                                                  <'40', $g, $g^~x>, <'45', '0', '1'>, <'42', '0'>, 
                                                  '41', 
                                                  <prev_psk_id, mask(ticket_age_add, $ticket_age)>, '0'
                                                 >)
                                              >)
                                        >, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case skip_certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case skip_recv_certificate_request_case_7
                  by contradiction
                next
                  case skip_recv_certificate_request_case_8
                  solve( F_State_S2d( tid, $S, $C.1, prev_res_psk,
                                      <
                                       <
                                        <
                                         <
                                          <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                           <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                           <'45', '0', '1'>, <'42', '0'>, '41', 
                                           <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                           hmac(<
                                                 Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                              <'rms', h(prev_messages)
                                                                              >,
                                                                              '32'),
                                                                       '0'),
                                                               <'rpbk', '0'>, '32'),
                                                        <'binder', '0'>, '32'), 
                                                 h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    '0'>)
                                                >)
                                          >, 
                                          '6', '0x0303', '40', $g>, 
                                         '1', '0x0303', ~new_nc, '0', $cipher_suites.1, '0', 
                                         <'43', '0x0304'>, <'10', $g1, $g>, <'40', $g, $g^~x.1>, 
                                         <'45', '0', '1'>, '0', '41', 
                                         <prev_psk_id, mask(ticket_age_add, '1')>, 
                                         hmac(<
                                               Expand(Expand(Extract(Expand(Extract('0', prev_hs),
                                                                            <'rms', h(prev_messages)>,
                                                                            '32'),
                                                                     '0'),
                                                             <'rpbk', '0'>, '32'),
                                                      <'binder', '0'>, '32'), 
                                               h(<
                                                  <
                                                   <'0', '1', '0x0303', ~nc, '0', $cipher_suites, 
                                                    '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                    <'40', $g1, $g1^~x>, <'45', '0', '1'>, 
                                                    <'42', '0'>, '41', 
                                                    <prev_psk_id, mask(ticket_age_add, $ticket_age)>, 
                                                    hmac(<
                                                          Expand(Expand(Extract(Expand(Extract('0',
                                                                                               prev_hs),
                                                                                       <'rms', 
                                                                                        h(prev_messages)
                                                                                       >,
                                                                                       '32'),
                                                                                '0'),
                                                                        <'rpbk', '0'>, '32'),
                                                                 <'binder', '0'>, '32'), 
                                                          h(<'0', '1', '0x0303', ~nc, '0', 
                                                             $cipher_suites, '0', <'43', '0x0304'>, 
                                                             <'10', $g1, $g>, <'40', $g1, $g1^~x>, 
                                                             <'45', '0', '1'>, <'42', '0'>, '41', 
                                                             <prev_psk_id, 
                                                              mask(ticket_age_add, $ticket_age)>, 
                                                             '0'>)
                                                         >)
                                                   >, 
                                                   '6', '0x0303', '40', $g>, 
                                                  '1', '0x0303', ~new_nc, '0', $cipher_suites.1, 
                                                  '0', <'43', '0x0304'>, <'10', $g1, $g>, 
                                                  <'40', $g, $g^~x.1>, <'45', '0', '1'>, '0', '41', 
                                                  <prev_psk_id, mask(ticket_age_add, '1')>, '0'>)
                                              >)
                                        >, 
                                        '2', '0x0303', prev_ns, $cipher_suite, <'13', $sig_algs>, 
                                        '40', $g, prev_gy>, 
                                       '8', $exts>,
                                      prev_nc, prev_ns.1, prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy.1,
                                      prev_gxy.1, 'na', prev_psk_id.1, prev_edi, prev_es, prev_hs.1, prev_ms, prev_cats,
                                      prev_sats, prev_hs_keyc, prev_hs_keys, prev_auth_status.1, prev_ems, prev_rms,
                                      prev_cert_req
                         ) ▶₀ #k )
                    case skip_certificate_request_case_1
                    by contradiction /* cyclic */
                  next
                    case skip_certificate_request_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case recv_server_auth_psk
      solve( CIdentity( tid, $C, 'client', <peer, 'auth'> ) @ #i )
        case recv_server_auth_psk
        solve( F_State_C2d( tid, $C, $S, prev_res_psk, prev_messages, prev_nc, prev_ns,
                            prev_g, prev_sg, prev_hrr, prev_x, prev_y, prev_gx, prev_gy, prev_gxy, prev_psk_ke_mode,
                            prev_psk_id, prev_edi, prev_es, hs, prev_ms, prev_cats, prev_sats, prev_hs_keyc,
                            prev_hs_keys, 'auth', prev_ems, prev_rms, prev_cert_req
               ) ▶₀ #i )
          case skip_recv_certificate_request_case_1
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.4)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.4) ∨ (#k = #vr.4))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_2
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.5)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.5) ∨ (#k = #vr.5))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_3
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.4)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.4) ∨ (#k = #vr.4))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        next
          case skip_recv_certificate_request_case_4
          solve( (∃ #k.
                   (CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k)
                  ∧
                   #k < #vr.5)  ∥
                 (∃ #k.
                   (CIdentityPost( tid, $C, 'client', <$S, 'auth'> ) @ #k) ∧
                   ('client' = 'server') ∧
                   ('auth' = 'auth')
                  ∧
                   ((#k < #vr.5) ∨ (#k = #vr.5))) )
            case case_1
            solve( CIdentity( tid, $C, 'client', <$S, 'auth'> ) @ #k.3 )
              case recv_server_auth
              by contradiction
            next
              case recv_server_auth_psk
              by contradiction
            qed
          qed
        qed
      qed
    qed
  next
    case case_3
    by contradiction
  qed
qed

/* All well-formedness checks were successful. */

end